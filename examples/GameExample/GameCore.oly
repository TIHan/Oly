module Game.Core

open System
open System.Text
open System.Numerics
open System.Collections.Generic
open Evergreen.Graphics
open Evergreen.Graphics.UI
open Evergreen.Physics
open System.Runtime.InteropServices

private alias Array = OlyPrelude.Array

private CreatePhongFragmentCode(usesTexture: bool): string =
    let colorCalcCode = 
        if (usesTexture)
            "texture(sampler2D(Texture, Sampler), in_TexCoord) * in_Color"
        else
            "in_Color"
    let src =
        "
#version 450

struct PointLight
{
    vec3 Position;
    float Padding;
    vec4 Color;
};

struct DirectionalLight
{
    vec3 Direction;
    float Padding;
    vec4 Color;
};

layout(set = 0, binding = 0) uniform _Global
{
    mat4 View;
    mat4 Projection;
    mat4 NormalMatrix;
    mat4 PreviousView;
    mat4 PreviousViewProjection;
    mat4 InverseViewProjection;
    vec4 ViewPort;
    float DeltaTime;
};

layout(set = 2, binding = 0) uniform texture2D Texture;
layout(set = 2, binding = 1) uniform sampler Sampler;

layout(set = 3, binding = 0) readonly buffer _PointLights
{
    PointLight[] PointLights;
};
layout(set = 3, binding = 1) uniform _PointLightsCount
{
    int PointLightsCount;
};
layout(set = 5, binding = 0) readonly buffer _DirectionalLights
{
    DirectionalLight[] DirectionalLights;
};
layout(set = 5, binding = 1) uniform _DirectionalLightsCount
{
    int DirectionalLightsCount;
};


layout(location = 0) in vec4 in_Color;
layout(location = 1) in vec2 in_TexCoord;
layout(location = 2) in vec3 in_Normal;
layout(location = 3) in vec3 in_Position_world;

layout(location = 0) out vec4 out_Color;

vec3 GetEyePosition()
{
    // TODO: We should not do this every time for every fragment!
    return inverse(View)[3].xyz;
}

vec3 Ambient(
    /* property */ float ambientIntensity, 
    vec3 color)
{
    return ambientIntensity * color;
}

vec3 Diffuse(
    /* property */ float diffuseIntensity,
    vec3 lightDir, 
    vec3 normal, 
    vec3 color)
{
    float diffuseAmount = max(dot(normal, lightDir), 0.0);
    return diffuseIntensity * diffuseAmount * color;
}

vec3 Specular(
    /* property */ float specularIntensity,
    vec3 lightDir, 
    vec3 eyeDir, 
    vec3 normal,
    vec3 color)
{
    vec3 reflectDir = reflect(-lightDir, normal);
    float specularAmount = pow(max(dot(eyeDir, reflectDir), 0.0), 32);
    return specularIntensity * specularAmount * color;  
}

vec3 Phong(
    /* property */ float ambientIntensity,
    /* property */ float diffuseIntensity,
    /* property */ float specularIntensity,
    vec3 lightDir,
    vec3 eyeDir,
    vec3 normal, 
    vec3 color)
{
    vec3 ambientColor = Ambient(ambientIntensity, color);
    vec3 diffuseColor = Diffuse(diffuseIntensity, lightDir, normal, color);
    vec3 specularColor = Specular(specularIntensity, lightDir, eyeDir, normal, color);

    return ambientColor + diffuseColor + specularColor;
}

float PointLightIntensity(
    /* property */ float intensity,
    /* property */ float radius,
    vec3 lightVec)
{
    /* internal property */ float radiusFadeScale = 0;

    float radiusFade  = radius * radiusFadeScale;
    float lightLength = abs(length(lightVec));

    // This makes the light not extend past the radius.
    if (lightLength > radius)
    {
        return 0;
    }

    // When the light is nearing the edge of the radius,
    //     start to smoothly fade it.
    if (lightLength > radiusFade)
    {
        float n = smoothstep(radius, radiusFade, lightLength);
        return intensity * n;
    }

    return intensity;
}

void main()
{
    /* internal property */ float ambientIntensity = 0.25;
    /* internal property */ float diffuseIntensity = 1;
    /* internal property */ float specularIntensity = 0.5;
    /* internal property */ float intensity = 1;
    /* internal property */ float radius = 5;

    vec3 eyeDir = normalize(GetEyePosition() - in_Position_world);
    vec4 color   = {0};

    vec3 phongColorAcc = vec3(0);

    int litCount = 0;
    for(int i = 0; i < PointLightsCount; i++)
    {
        vec3  lightVec       = PointLights[i].Position - in_Position_world;
        float lightIntensity = PointLightIntensity(intensity, radius, lightVec);

        if (lightIntensity > 0)
        {
            vec3 lightDir = normalize(lightVec);
            vec3 phongColor = Phong(ambientIntensity, diffuseIntensity, specularIntensity, lightDir, eyeDir, in_Normal, PointLights[i].Color.xyz);
            
            phongColorAcc = phongColorAcc + (phongColor * lightIntensity);
            litCount++;
        }
    }

    for(int i = 0; i < DirectionalLightsCount; i++)
    {
        vec3 lightDir = -normalize(DirectionalLights[i].Direction);
        vec3 phongColor = Phong(ambientIntensity, diffuseIntensity, specularIntensity, lightDir, eyeDir, in_Normal, DirectionalLights[i].Color.xyz);

        phongColorAcc = phongColorAcc + phongColor;
        litCount++;
    }

    color.xyz = phongColorAcc * color.xyz;
    out_Color = color;
}"
    src.Replace("{0}", colorCalcCode)

DefaultVertexCode: string get = System.IO.File.ReadAllText("GameExample/default.vert")

DefaultFragmentCode: string get =
    CreatePhongFragmentCode(true)

DefaultColorFragmentCode: string get =
    CreatePhongFragmentCode(false)

DefaultComputeCode: string get = System.IO.File.ReadAllText("GameExample/transform_rotation.comp")

radians(degrees: float64): float64 = degrees * System.Math.PI / 180
radians(degrees: float32): float32 = float32(radians(float64(degrees)))

clamp(min: float32, max: float32, value: float32): float32 =
    if (max <= min)
        throw (System.ArgumentException("Invalid Min Max"))

    if (value < min)
        min
    else if (value > max)
        max
    else
        value

struct PointLight =
    public mutable field Position: Vector3 = Vector3.Zero
    public field Padding: float32 = 0
    public mutable field Color: Vector4 = Vector4.Zero

struct DirectionalLight =
    public mutable field Direction: Vector3 = Vector3.Zero
    public field Padding: float32 = 0
    public mutable field Color: Vector4 = Vector4.Zero

struct Camera =
    public mutable field Transform: Transform
    public mutable field Projection: Matrix4x4

    mutable field yaw: float32
    mutable field pitch: float32

    private static DefaultRotation: Quaternion get = Quaternion.CreateFromAxisAngle(Vector3.UnitX, radians(90))

    new(fov: float32, width: int32, height: int32, nearPlaneDistance: float32, farPlaneDistance: float32) =
        {
            Transform = Transform(Matrix4x4.CreateFromQuaternion(Camera.DefaultRotation))
            Projection = Matrix4x4.CreatePerspectiveFieldOfView(radians(fov), float32(width) / float32(height), nearPlaneDistance, farPlaneDistance)
            yaw = 0
            pitch = 0
        }

    Yaw: float32
        get() = this.yaw
        
    Pitch: float32
        get() = this.pitch

    mutable SetYawPitch(yaw: float32, pitch: float32): () =
        this.yaw <- yaw
        this.pitch <- pitch
        let position = this.Transform.Position
        let rotation = Camera.DefaultRotation * Quaternion.CreateFromYawPitchRoll(-yaw, -pitch, 0)
        this.Transform <- Transform.Create(position, rotation, Vector3.One)

#[open]
extension Vector3Extensions =
    inherits Vector3

    static Forward: Vector3 get() = -Vector3.UnitZ
    static Back: Vector3 get() = Vector3.UnitZ
    static Left: Vector3 get() = -Vector3.UnitX
    static Right: Vector3 get() = Vector3.UnitX

(*)(v: Vector3, s: float32): Vector3 = Vector3.Multiply(v, s)

struct Transform =
    public mutable field Matrix: Matrix4x4

    new(matrix: Matrix4x4) = { Matrix = matrix }

    Position: Vector3
        get() = this.Matrix.Translation
        set(value) = this.Matrix.Translation <- value

    Rotation: Quaternion
        get() = Quaternion.CreateFromRotationMatrix(this.Matrix)

    Scale: Vector3
        get() = 
            let mutable scale = Vector3.Zero
            let mutable rotation = Quaternion.Identity
            let mutable position = Vector3.Zero
            if (Matrix4x4.Decompose(this.Matrix, &scale, &rotation, &position))
                scale
            else
                Vector3.Zero

    Forward: Vector3
        get() = Vector3.Transform(Vector3.Forward, this.Rotation)

    Back: Vector3
        get() = Vector3.Transform(Vector3.Back, this.Rotation)

    Left: Vector3
        get() = Vector3.Transform(Vector3.Left, this.Rotation)

    Right: Vector3
        get() = Vector3.Transform(Vector3.Right, this.Rotation)

    WorldToLocalMatrix: Matrix4x4
        get() =
            let mutable inverted = Matrix4x4.Identity
            let didSucceed = Matrix4x4.Invert(this.Matrix, &inverted)
            inverted

    static Create(position: Vector3, rotation: Quaternion, scale: Vector3): Transform =
        let rotationMatrix = Matrix4x4.CreateFromQuaternion(rotation)
        let mutable scaleMatrix = Matrix4x4.CreateScale(scale)
        scaleMatrix.Translation <- position
        Transform(rotationMatrix * scaleMatrix)

struct EntityId =
    public mutable field Index: int32 = 0
    public mutable field Version: uint32 = 0

    IsNil: bool get() = this.Version == 0

class Archetype<T0> where T0: unmanaged =
    Count: int32 get, set

    Lookup: mutable int32[] get
    EntityIds: mutable EntityId[] get
    Buffer0: mutable T0[] get

    new(size: int32) =
        {
            Count = 0
            Lookup  = Array.ZeroCreate(size)
            EntityIds = Array.ZeroCreate(size)
            Buffer0 = Array.ZeroCreate(size)
        }

    Add(entId: EntityId, item0: T0): () =
        let index = this.Count
        this.Count <- this.Count + 1

        this.Lookup[entId.Index] <- index
        this.EntityIds[index] <- entId
        this.Buffer0[index] <- item0

class Archetype<T0, T1> where T0: unmanaged 
                               where T1: unmanaged =
    Count: int32 get, set

    Lookup: mutable int32[] get
    EntityIds: mutable EntityId[] get
    Buffer0: mutable T0[] get
    Buffer1: mutable T1[] get

    new(size: int32) =
        {
            Count = 0
            Lookup  = Array.ZeroCreate(size)
            EntityIds = Array.ZeroCreate(size)
            Buffer0 = Array.ZeroCreate(size)
            Buffer1 = Array.ZeroCreate(size)
        }

    Add(entId: EntityId, item0: T0, item1: T1): () =
        let index = this.Count
        this.Count <- this.Count + 1

        this.Lookup[entId.Index] <- index
        this.EntityIds[index] <- entId
        this.Buffer0[index] <- item0
        this.Buffer1[index] <- item1

class Archetype<T0, T1, T2> where T0: unmanaged 
                                   where T1: unmanaged 
                                   where T2: unmanaged =
    Count: int32 get, set

    Lookup: mutable int32[] get
    EntityIds: mutable EntityId[] get
    Buffer0: mutable T0[] get
    Buffer1: mutable T1[] get
    Buffer2: mutable T2[] get

    new(size: int32) =
        {
            Count = 0
            Lookup  = Array.ZeroCreate(size)
            EntityIds = Array.ZeroCreate(size)
            Buffer0 = Array.ZeroCreate(size)
            Buffer1 = Array.ZeroCreate(size)
            Buffer2 = Array.ZeroCreate(size)
        }

    Add(entId: EntityId, item0: T0, item1: T1, item2: T2): () =
        let index = this.Count
        this.Count <- this.Count + 1

        this.Lookup[entId.Index] <- index
        this.EntityIds[index] <- entId
        this.Buffer0[index] <- item0
        this.Buffer1[index] <- item1
        this.Buffer2[index] <- item2

class Archetype<T0, T1, T2, T3> where T0: unmanaged 
                                       where T1: unmanaged 
                                       where T2: unmanaged 
                                       where T3: unmanaged =
    Count: int32 get, set

    Lookup: mutable int32[] get
    EntityIds: mutable EntityId[] get
    Buffer0: mutable T0[] get
    Buffer1: mutable T1[] get
    Buffer2: mutable T2[] get
    Buffer3: mutable T3[] get

    new(size: int32) =
        {
            Count = 0
            Lookup  = Array.ZeroCreate(size)
            EntityIds = Array.ZeroCreate(size)
            Buffer0 = Array.ZeroCreate(size)
            Buffer1 = Array.ZeroCreate(size)
            Buffer2 = Array.ZeroCreate(size)
            Buffer3 = Array.ZeroCreate(size)
        }

    Add(entId: EntityId, item0: T0, item1: T1, item2: T2, item3: T3): () =
        let index = this.Count
        this.Count <- this.Count + 1

        this.Lookup[entId.Index] <- index
        this.EntityIds[index] <- entId
        this.Buffer0[index] <- item0
        this.Buffer1[index] <- item1
        this.Buffer2[index] <- item2
        this.Buffer3[index] <- item3

alias Color = Vector4

class World =

    mutable field nextIndex: int32 = 0
    mutable field indexQueue: Queue<int32> = Queue()
    mutable field entityCount: int32 = 0
    field entityVersions: mutable uint32[] = Array.ZeroCreate<uint32>(1024)

    Archetype_StaticBox:  Archetype<Transform, Color, StaticObjectId> get             = Archetype(1024)
    Archetype_Box:        Archetype<Transform, Color, DynamicObjectId> get           = Archetype(1024)
    Archetype_PointLight:      Archetype<Transform, Color, DynamicObjectId, PointLight> get = Archetype(1024)

    Archetype_DirectionalLight: Archetype<DirectionalLight> get = Archetype(1024)

    private NewEntityId(): EntityId =
        let index =
            if (this.indexQueue.Count == 0)
                let index = this.nextIndex
                this.nextIndex <- this.nextIndex + 1
                index
            else
                this.indexQueue.Dequeue()

        let version = this.entityVersions[index] + 1
        this.entityVersions[index] <- version

        let mutable entId = EntityId()
        entId.Index <- index
        entId.Version <- version
        entId

    CreateStaticBox(transform: Transform, color: Color, staticObjId: StaticObjectId): EntityId =
        let entId = this.NewEntityId()
        this.Archetype_StaticBox.Add(entId, transform, color, staticObjId)
        entId

    CreateBox(transform: Transform, color: Color, dynamicObjId: DynamicObjectId): EntityId =
        let entId = this.NewEntityId()
        this.Archetype_Box.Add(entId, transform, color, dynamicObjId)
        entId

    CreatePointLight(transform: Transform, color: Color, dynamicObjId: DynamicObjectId, pointLight: PointLight): EntityId =
        let entId = this.NewEntityId()
        this.Archetype_PointLight.Add(entId, transform, color, dynamicObjId, pointLight)
        entId

    CreateDirectionalLight(directionalLight: DirectionalLight): EntityId =
        let entId = this.NewEntityId()
        this.Archetype_DirectionalLight.Add(entId, directionalLight)
        entId

