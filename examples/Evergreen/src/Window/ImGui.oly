module Evergreen.ImGui

open System
open Evergreen.Window
open System.Numerics
open System.Runtime.InteropServices
open System.Runtime.CompilerServices
open TerraFX.Interop.Windows
open TerraFX.Interop.Vulkan
open static TerraFX.Interop.Vulkan.Vulkan

private alias Unsafe = OlyPrelude.Unsafe

alias ImGuiInputTextCallback = static blittable ImGuiInputTextCallbackData* -> int32

// enum ImGuiWindowFlags_
// {
//     ImGuiWindowFlags_None                   = 0,
//     ImGuiWindowFlags_NoTitleBar             = 1 << 0,   // Disable title-bar
//     ImGuiWindowFlags_NoResize               = 1 << 1,   // Disable user resizing with the lower-right grip
//     ImGuiWindowFlags_NoMove                 = 1 << 2,   // Disable user moving the window
//     ImGuiWindowFlags_NoScrollbar            = 1 << 3,   // Disable scrollbars (window can still scroll with mouse or programmatically)
//     ImGuiWindowFlags_NoScrollWithMouse      = 1 << 4,   // Disable user vertically scrolling with mouse wheel. On child window, mouse wheel will be forwarded to the parent unless NoScrollbar is also set.
//     ImGuiWindowFlags_NoCollapse             = 1 << 5,   // Disable user collapsing window by double-clicking on it. Also referred to as Window Menu Button (e.g. within a docking node).
//     ImGuiWindowFlags_AlwaysAutoResize       = 1 << 6,   // Resize every window to its content every frame
//     ImGuiWindowFlags_NoBackground           = 1 << 7,   // Disable drawing background color (WindowBg, etc.) and outside border. Similar as using SetNextWindowBgAlpha(0.0f).
//     ImGuiWindowFlags_NoSavedSettings        = 1 << 8,   // Never load/save settings in .ini file
//     ImGuiWindowFlags_NoMouseInputs          = 1 << 9,   // Disable catching mouse, hovering test with pass through.
//     ImGuiWindowFlags_MenuBar                = 1 << 10,  // Has a menu-bar
//     ImGuiWindowFlags_HorizontalScrollbar    = 1 << 11,  // Allow horizontal scrollbar to appear (off by default). You may use SetNextWindowContentSize(ImVec2(width,0.0f)); prior to calling Begin() to specify width. Read code in imgui_demo in the "Horizontal Scrolling" section.
//     ImGuiWindowFlags_NoFocusOnAppearing     = 1 << 12,  // Disable taking focus when transitioning from hidden to visible state
//     ImGuiWindowFlags_NoBringToFrontOnFocus  = 1 << 13,  // Disable bringing window to front when taking focus (e.g. clicking on it or programmatically giving it focus)
//     ImGuiWindowFlags_AlwaysVerticalScrollbar= 1 << 14,  // Always show vertical scrollbar (even if ContentSize.y < Size.y)
//     ImGuiWindowFlags_AlwaysHorizontalScrollbar=1<< 15,  // Always show horizontal scrollbar (even if ContentSize.x < Size.x)
//     ImGuiWindowFlags_AlwaysUseWindowPadding = 1 << 16,  // Ensure child windows without border uses style.WindowPadding (ignored by default for non-bordered child windows, because more convenient)
//     ImGuiWindowFlags_NoNavInputs            = 1 << 18,  // No gamepad/keyboard navigation within the window
//     ImGuiWindowFlags_NoNavFocus             = 1 << 19,  // No focusing toward this window with gamepad/keyboard navigation (e.g. skipped by CTRL+TAB)
//     ImGuiWindowFlags_UnsavedDocument        = 1 << 20,  // Display a dot next to the title. When used in a tab/docking context, tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.
//     ImGuiWindowFlags_NoDocking              = 1 << 21,  // Disable docking of this window

//     ImGuiWindowFlags_NoNav                  = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,
//     ImGuiWindowFlags_NoDecoration           = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoCollapse,
//     ImGuiWindowFlags_NoInputs               = ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,

//     // [Internal]
//     ImGuiWindowFlags_NavFlattened           = 1 << 23,  // [BETA] On child window: allow gamepad/keyboard navigation to cross over parent border to this child or between sibling child windows.
//     ImGuiWindowFlags_ChildWindow            = 1 << 24,  // Don't use! For internal use by BeginChild()
//     ImGuiWindowFlags_Tooltip                = 1 << 25,  // Don't use! For internal use by BeginTooltip()
//     ImGuiWindowFlags_Popup                  = 1 << 26,  // Don't use! For internal use by BeginPopup()
//     ImGuiWindowFlags_Modal                  = 1 << 27,  // Don't use! For internal use by BeginPopupModal()
//     ImGuiWindowFlags_ChildMenu              = 1 << 28,  // Don't use! For internal use by BeginMenu()
//     ImGuiWindowFlags_DockNodeHost           = 1 << 29,  // Don't use! For internal use by Begin()/NewFrame()

// TODO:
enum ImGuiWindowFlags =
    | None = 0
    | NoTitleBar       = 0b000000001
    | NoResize         = 0b000000010
    | NoMove           = 0b000000100
    | NoCollapse       = 0b000100000
    | AlwaysAutoResize = 0b001000000
    | NoSavedSettings  = 0b100000000

// TODO:
enum ImGuiInputTextFlags =
    | None = 0

struct ImFontConfig =
    public mutable field FontData: void* = default
    public mutable field FontDataSize: int32 = default
    public mutable field FontDataOwnedByAtlas: ImGuiBool = default
    public mutable field FontNo: int32 = default
    public mutable field SizePixels: float32 = default
    public mutable field OversampleH: int32 = default
    public mutable field OversampleV: int32 = default
    public mutable field PixelSnapH: ImGuiBool = default
    public mutable field GlyphExtraSpacing: Vector2 = default
    public mutable field GlyphOffset: Vector2 = default
    public mutable field GlyphRanges: int16* = default
    public mutable field GlyphMinAdvanceX: float32 = default
    public mutable field GlyphMaxAdvanceX: float32 = default
    public mutable field MergeMode: ImGuiBool = default
    public mutable field FontBuilderFlags: uint32 = default
    public mutable field RasterizerMultiply: float32 = default
    public mutable field EllipsisChar: int16 = default

// TODO: Add fields
private struct ImFontAtlas

struct ImFont

alias ImTextureID = void*

newtype ImGuiBool =
    field Value: byte

    static False: ImGuiBool get() = ImGuiBool(0)
    static True: ImGuiBool get() = ImGuiBool(1)

    static op_Equality(value1: ImGuiBool, value2: ImGuiBool): bool =
        value1.Value == value2.Value

    static op_Equality(value1: ImGuiBool, value2: bool): bool =
        value1.Value == byte(value2)

    static op_Inequality(value1: ImGuiBool, value2: bool): bool =
        value1.Value != byte(value2)

alias ImGuiKey = int32

struct ImGuiInputTextCallbackData =
    public mutable field Ctx: nint = default
    public field EventFlag: ImGuiInputTextFlags = default
    public field Flags: ImGuiInputTextFlags = default
    public field UserData: void* = default

    // -------------------------------------
    public mutable field EventChar: int16 = default
    public field EventKey: ImGuiKey = default
    public mutable field Buf: byte* = default
    public mutable field BufTextLen: int32 = default
    public mutable field BufSize: int32 = default
    public mutable field CursorPos: int32 = default
    public mutable field SelectionStart: int32 = default
    public mutable field SelectionEnd: int32 = default

private struct ImGuiIO =
    public mutable field ConfigFlags: int32 = 0
    public mutable field BackendFlags: int32 = 0
    public mutable field DisplaySize: Vector2 = Vector2.Zero
    public mutable field DeltaTime: float32 = 0
    public mutable field IniSavingRate: float32 = default
    public mutable field IniFilename: byte* = default
    public mutable field Logfilename: byte* = default
    public mutable field MouseDoubleClickTime: float32 = default
    public mutable field MouseDoubleClickMaxDist: float32 = default
    public mutable field MouseDragThreshold: float32 = default
    public mutable field KeyRepeatDelay: float32 = default
    public mutable field KeyRepeatRate: float32 = default
    public mutable field HoverDelayNormal: float32 = default
    public mutable field HoverDelayShort: float32 = default
    public mutable field UserData: void* = default

    public mutable field Fonts: ImFontAtlas* = default
    // TODO: Add the rest of the fields
// {
//     //------------------------------------------------------------------
//     // Configuration                            // Default value
//     //------------------------------------------------------------------

//     ImGuiConfigFlags   ConfigFlags;             // = 0              // See ImGuiConfigFlags_ enum. Set by user/application. Gamepad/keyboard navigation options, etc.
//     ImGuiBackendFlags  BackendFlags;            // = 0              // See ImGuiBackendFlags_ enum. Set by backend (imgui_impl_xxx files or custom backend) to communicate features supported by the backend.
//     ImVec2      DisplaySize;                    // <unset>          // Main display size, in pixels (generally == GetMainViewport()->Size). May change every frame.
//     float       DeltaTime;                      // = 1.0f/60.0f     // Time elapsed since last frame, in seconds. May change every frame.

internal struct ImGui_ImplVulkan_InitInfo =
    public mutable field Instance: VkInstance = default
    public mutable field PhysicalDevice: VkPhysicalDevice = default
    public mutable field Device: VkDevice = default
    public mutable field QueueFamily: uint32 = default
    public mutable field Queue: VkQueue = default
    public mutable field PipelineCache: VkPipelineCache = default
    public mutable field DescriptorPool: VkDescriptorPool = default
    public mutable field Subpass: uint32 = default
    public mutable field MinImageCount: uint32 = default // >= 2
    public mutable field ImageCount: uint32 = default // >= MinImageCount
    public mutable field MSAASamples: VkSampleCountFlags = default // >= VK_SAMPLE_COUNT_1_BIT (0 -> default to VK_SAMPLE_COUNT_1_BIT)
    public mutable field Allocator: VkAllocationCallbacks* = default
    public mutable field CheckVnResultVn: static blittable VkResult -> () = default

private alias ImGuiCond = int32

#[import("C", "imgui.dll", "igCreateContext")]
private igCreateContext(shared_font_atlas: void*): nint

#[import("C", "imgui.dll", "igDestroyContext")]
private igDestroyContext(ctx: nint): ()

#[import("C", "imgui.dll", "igNewFrame")]
private igNewFrame(): ()

#[import("C", "imgui.dll", "igRender")]
private igRender(): ()

#[import("C", "imgui.dll", "igGetDrawData")]
private igGetDrawData(): nint

#[import("C", "imgui.dll", "igGetIO")]
private igGetIO(): byref<ImGuiIO>

#[import("C", "imgui.dll", "igGetCurrentContext")]
private igGetCurrentContext(): nint

#[import("C", "imgui.dll", "igSetCurrentContext")]
private igSetCurrentContext(ctx: nint): ()

#[import("C", "imgui.dll", "igShowDemoWindow")]
private igShowDemoWindow(p_open: ImGuiBool*): ()

#[import("C", "imgui.dll", "igStyleColorsDark")]
private igStyleColorsDark(dst: void*): ()

#[import("C", "imgui.dll", "igStyleColorsClassic")]
private igStyleColorsClassic(dst: void*): ()

#[import("C", "imgui.dll", "igUpdateMouseMovingWindowNewFrame")]
private igUpdateMouseMovingWindowNewFrame(): ()

#[import("C", "imgui.dll", "igUpdateMouseMovingWindowEndFrame")]
private igUpdateMouseMovingWindowEndFrame(): ()

#[import("C", "imgui.dll", "igBegin")]
private igBegin(name: byte*, p_open: ImGuiBool*, flags: ImGuiWindowFlags): ImGuiBool

#[import("C", "imgui.dll", "igEnd")]
private igEnd(): ()

#[import("C", "imgui.dll", "igBeginDisabled")]
private igBeginDisabled(disabled: ImGuiBool): ()

#[import("C", "imgui.dll", "igEndDisabled")]
private igEndDisabled(): ()

#[import("C", "imgui.dll", "igBeginChild_ID")]
private igBeginChild_ID(id: uint32, size: Vector2, border: ImGuiBool, flags: ImGuiWindowFlags): ImGuiBool

#[import("C", "imgui.dll", "igEndChild")]
private igEndChild(): ()

#[import("C", "imgui.dll", "igPushID_Ptr")]
private igPushID_Ptr(ptr_id: void*): ()

#[import("C", "imgui.dll", "igPopID")]
private igPopID(): ()

#[import("C", "imgui.dll", "igSetNextWindowPos")]
private igSetNextWindowPos(pos: Vector2, cond: ImGuiCond, pivot: Vector2): ()

#[import("C", "imgui.dll", "igSetNextWindowSize")]
private igSetNextWindowSize(size: Vector2, cond: ImGuiCond): ()

#[import("C", "imgui.dll", "igGetWindowPos")]
private igGetWindowPos(pOut: Vector2*): ()

#[import("C", "imgui.dll", "igGetWindowSize")]
private igGetWindowSize(pOut: Vector2*): ()

#[import("C", "imgui.dll", "igSetWindowPos_WindowPtr")]
private igSetWindowPos_WindowPtr(window: nuint, pos: Vector2, cond: ImGuiCond): ()

#[import("C", "imgui.dll", "igSetWindowSize_WindowPtr")]
private igSetWindowSize_WindowPtr(window: nuint, size: Vector2, cond: ImGuiCond): ()

#[import("C", "imgui.dll", "igGetCurrentWindow")]
private igGetCurrentWindow(): nuint

#[import("C", "imgui.dll", "igCalcWindowNextAutoFitSize")]
private igCalcWindowNextAutoFitSize(pOut: Vector2*, window: nuint): ()

#[import("C", "imgui.dll", "igLabelText")]
private igLabelText(label: byte*, fmt: byte*): ()

#[import("C", "imgui.dll", "igButton")]
private igButton(label: byte*, size: Vector2): ImGuiBool

#[import("C", "imgui.dll", "igCheckbox")]
private igCheckbox(label: byte*, v: ImGuiBool*): ImGuiBool

#[import("C", "imgui.dll", "igInputText")]
private igInputText(label: byte*, buf: byte*, buf_size: nuint, flags: ImGuiInputTextFlags, callback: ImGuiInputTextCallback, user_data: void*): ImGuiBool

#[import("C", "imgui.dll", "igInputInt")]
private igInputInt(label: byte*, v: int32*, step: int32, step_fast: int32, flags: ImGuiInputTextFlags): ImGuiBool

#[import("C", "imgui.dll", "igCombo_Str_arr")]
private igCombo_Str_arr(label: byte*, current_item: int32*, items: (byte*)*, items_count: int32, popup_max_height_in_items: int32): ImGuiBool

#[import("C", "imgui.dll", "igImage")]
private igImage(user_texture_id: VkDescriptorSet, size: Vector2, uv0: Vector2, uv1: Vector2, tint_col: Vector4, border_col: Vector4): ()

#[import("C", "imgui.dll", "ImFontConfig_ImFontConfig")]
private ImFontConfig_ImFontConfig(): ImFontConfig*

#[import("C", "imgui.dll", "ImFontConfig_destroy")]
private ImFontConfig_destroy(self: ImFontConfig*): ()

#[import("C", "imgui.dll", "ImFontAtlas_AddFontDefault")]
private ImFontAtlas_AddFontDefault(self: ImFontAtlas*, font_cfg: ImFontConfig*): ImFont*

#[import("C", "imgui.dll", "ImFontAtlas_AddFontFromMemoryTTF")]
private ImFontAtlas_AddFontFromMemoryTTF(self: ImFontAtlas*, font_data: void*, font_size: int32, size_pixels: float32, font_cfg: ImFontConfig*, glyph_ranges: int16*): ImFont*

#[import("C", "imgui.dll", "ImFontAtlas_GetGlyphRangesGreek")]
private ImFontAtlas_GetGlyphRangesGreek(self: ImFontAtlas*): int16*

#[import("C", "imgui.dll", "ImGui_ImplVulkan_Init")]
private ImGui_ImplVulkan_Init(info: ImGui_ImplVulkan_InitInfo*, render_pass: VkRenderPass): ImGuiBool

#[import("C", "imgui.dll", "ImGui_ImplVulkan_Shutdown")]
private ImGui_ImplVulkan_Shutdown(): ()

#[import("C", "imgui.dll", "ImGui_ImplVulkan_NewFrame")]
private ImGui_ImplVulkan_NewFrame(): ()

#[import("C", "imgui.dll", "ImGui_ImplVulkan_RenderDrawData")]
private ImGui_ImplVulkan_RenderDrawData(draw_data: nint, command_buffer: VkCommandBuffer, pipeline: VkPipeline): ()

#[import("C", "imgui.dll", "ImGui_ImplVulkan_CreateFontsTexture")]
private ImGui_ImplVulkan_CreateFontsTexture(command_buffer: VkCommandBuffer): ()

#[import("C", "imgui.dll", "ImGui_ImplVulkan_DestroyFontUploadObjects")]
private ImGui_ImplVulkan_DestroyFontUploadObjects(): ()

// Register a texture (VkDescriptorSet == ImTextureID)
// FIXME: This is experimental in the sense that we are unsure how to best design/tackle this problem
// Please post to https://github.com/ocornut/imgui/pull/914 if you have suggestions.
#[import("C", "imgui.dll", "ImGui_ImplVulkan_AddTexture")]
private ImGui_ImplVulkan_AddTexture(sampler: VkSampler, image_view: VkImageView, image_layout: VkImageLayout): VkDescriptorSet
#[import("C", "imgui.dll", "ImGui_ImplVulkan_RemoveTexture")]
private ImGui_ImplVulkan_RemoveTexture(descriptor_set: VkDescriptorSet): ()

#[import("C", "imgui.dll", "ImGui_ImplWin32_Init")]
private ImGui_ImplWin32_Init(hwnd: nint): ImGuiBool

#[import("C", "imgui.dll", "ImGui_ImplWin32_Shutdown")]
private ImGui_ImplWin32_Shutdown(): ()

#[import("C", "imgui.dll", "ImGui_ImplWin32_NewFrame")]
private ImGui_ImplWin32_NewFrame(): ()

#[import("C", "imgui.dll", "ImGui_ImplWin32_WndProcHandler")]
private ImGui_ImplWin32_WndProcHandler(hWnd: HWND, msg: uint32, wParam: WPARAM, lParam: LPARAM): LRESULT

private fixed(o: object): GCHandle =
    System.Runtime.InteropServices.GCHandle.Alloc(o, GCHandleType.Pinned)

private fixedCopyUTF8(str: string): GCHandle =
    fixed(System.Text.UTF8Encoding.UTF8.GetBytes(str))

#[blittable]
#[UnmanagedCallersOnly(CallConvs = [typeof<CallConvCdecl>])]
private CheckIntializeVulkan(result: VkResult): () =
    if (result != VkResult.VK_SUCCESS)
        fail("Failed to intialize ImGui.")

class ImGuiContext =
    internal Context: nint get
    internal Win32Handle: nint get
    internal VulkanInfo: ImGui_ImplVulkan_InitInfo get
    internal VkDescriptorSets: System.Collections.Concurrent.ConcurrentDictionary<VkDescriptorSet, () -> ()> get
    Frame: int32 get, set

    internal new(context: nint, hwnd: nint, info: ImGui_ImplVulkan_InitInfo) =
        {
            Context = context
            Win32Handle = hwnd
            VulkanInfo = info
            Frame = 0
            VkDescriptorSets = System.Collections.Concurrent.ConcurrentDictionary()
        }

    internal static InputContext: ImGuiContext get, set = unchecked default

CreateContext(window: IWindow, app: Evergreen.Graphics.Backend.Vulkan.VulkanApplication, minImageCount: uint32, imageCount: uint32, renderPass: VkRenderPass): ImGuiContext =
    let context = igCreateContext(nullptr)

    igSetCurrentContext(context)

    let io = &igGetIO()
   // io.ConfigFlags <- 1 // ImGuiConfigFlags_NavEnableKeyboard
   //ImGuiConfigFlags_NoMouse                = 1 << 4
    io.ConfigFlags <- 1 << 4

    let mutable info = default: ImGui_ImplVulkan_InitInfo
    info.Instance <- app.Instance
    info.PhysicalDevice <- app.PhysicalDevice
    info.Device <- app.Device
    info.QueueFamily <- app.GraphicsQueueFamilyIndex
    info.Queue <- app.GraphicsQueue
    info.PipelineCache <- VkPipelineCache.NULL
    info.Subpass <- 0
    info.MinImageCount <- minImageCount
    info.ImageCount <- imageCount
    info.MSAASamples <- VkSampleCountFlags.VK_SAMPLE_COUNT_1_BIT
    info.Allocator <- nullptr
    info.CheckVnResultVn <- &&CheckIntializeVulkan

    let poolSizes =
        static let create(ty, count) =
            let mutable poolSize = default: VkDescriptorPoolSize
            poolSize.`type` <- ty
            poolSize.descriptorCount <- count
            poolSize
        [
            create(VkDescriptorType.VK_DESCRIPTOR_TYPE_SAMPLER, 1000);
            create(VkDescriptorType.VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, 1000);
            create(VkDescriptorType.VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, 1000);
            create(VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, 1000);
            create(VkDescriptorType.VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER, 1000);
            create(VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER, 1000);
            create(VkDescriptorType.VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, 1000);
            create(VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, 1000);
            create(VkDescriptorType.VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, 1000);
            create(VkDescriptorType.VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, 1000);
            create(VkDescriptorType.VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, 1000)
        ]

    let mutable poolSizesHandle = fixed(poolSizes)

    let mutable poolInfo = default: VkDescriptorPoolCreateInfo
    poolInfo.sType <- VkStructureType.VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO
    poolInfo.flags <- VkDescriptorPoolCreateFlags.VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT
    poolInfo.maxSets <- uint32(1000 * poolSizes.Length)
    poolInfo.poolSizeCount <- uint32(poolSizes.Length)
    poolInfo.pPoolSizes <- Unsafe.Cast(poolSizesHandle.AddrOfPinnedObject())

    if (vkCreateDescriptorPool(app.Device, &&poolInfo, nullptr, &&info.DescriptorPool) != VkResult.VK_SUCCESS)
        fail("Failed to create descriptor pool for ImGui.")

    poolSizesHandle.Free()

    let hwnd = window.HWND

    igSetCurrentContext(context)

    if (ImGui_ImplWin32_Init(hwnd) != true)
        fail("Failed to initialize ImGui for Win32.")
    
    if (ImGui_ImplVulkan_Init(&&info, renderPass) != true)
        fail("Failed to initialize ImGui for Vulkan.")

    ImGuiContext(context, hwnd, info)

DestroyContext(context: ImGuiContext): () =
    igSetCurrentContext(context.Context)

    let descriptorSets = context.VkDescriptorSets.ToArray()
    let mutable i = 0
    while (i < descriptorSets.Length)
        let mutable pair = descriptorSets[i]
        pair.Value()
        i <- i + 1

    ImGui_ImplVulkan_Shutdown()
    ImGui_ImplWin32_Shutdown()
    vkDestroyDescriptorPool(context.VulkanInfo.Device, context.VulkanInfo.DescriptorPool, nullptr)
    igDestroyContext(context.Context)

AddFontDefault(context: ImGuiContext): ImFont* =
    igSetCurrentContext(context.Context)

    let mutable io = igGetIO()
    ImFontAtlas_AddFontDefault(io.Fonts, nullptr)

AddFont(context: ImGuiContext, filePath: string, pixelSize: float32): ImFont* =
    igSetCurrentContext(context.Context)

    let fontData = System.IO.File.ReadAllBytes(filePath)
    let fontSize = fontData.Length
    let mutable fontDataHandle = fixed(fontData)

    let fontConfigPtr = ImFontConfig_ImFontConfig()
    let mutable fontConfig = &System.Runtime.CompilerServices.Unsafe.AsRef<ImFontConfig>(Unsafe.AsPointer(fontConfigPtr))
    // Do this to avoid memory corruption when destroying the context.
    fontConfig.FontDataOwnedByAtlas <- ImGuiBool.False

    let mutable io = igGetIO()
    let glyphRanges = ImFontAtlas_GetGlyphRangesGreek(io.Fonts)

    let fontPtr = ImFontAtlas_AddFontFromMemoryTTF(io.Fonts, Unsafe.Cast(fontDataHandle.AddrOfPinnedObject()), fontSize, pixelSize, &&fontConfig, glyphRanges)

    ImFontConfig_destroy(fontConfigPtr)
    fontDataHandle.Free()
    fontPtr

UploadFonts(context: ImGuiContext, commandPool: VkCommandPool, commandBuffer: VkCommandBuffer): () =
    igSetCurrentContext(context.Context)

    if (vkResetCommandPool(context.VulkanInfo.Device, commandPool, default) != VkResult.VK_SUCCESS)
        fail("Failed to reset command pool.")

    let mutable beginInfo = default: VkCommandBufferBeginInfo
    beginInfo.sType <- VkStructureType.VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO
    beginInfo.flags <- VkCommandBufferUsageFlags.VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT

    if (vkBeginCommandBuffer(commandBuffer, &&beginInfo) != VkResult.VK_SUCCESS)
        fail("Failed to begin command buffer.")

    ImGui_ImplVulkan_CreateFontsTexture(commandBuffer)

    let mutable endInfo = default: VkSubmitInfo
    endInfo.sType <- VkStructureType.VK_STRUCTURE_TYPE_SUBMIT_INFO
    endInfo.commandBufferCount <- 1
    endInfo.pCommandBuffers <- &&commandBuffer

    if (vkEndCommandBuffer(commandBuffer) != VkResult.VK_SUCCESS)
        fail("Failed to end command buffer.")

    if (vkQueueSubmit(context.VulkanInfo.Queue, 1, &&endInfo, VkFence.NULL) != VkResult.VK_SUCCESS)
        fail("Failed to submit.")

    if (vkDeviceWaitIdle(context.VulkanInfo.Device) != VkResult.VK_SUCCESS)
        fail("Failed to wait idle for device.")

    ImGui_ImplVulkan_DestroyFontUploadObjects()

SetDarkMode(context: ImGuiContext): () =
    igSetCurrentContext(context.Context)

    igStyleColorsDark(nullptr)

SetClassicMode(context: ImGuiContext): () =
    igSetCurrentContext(context.Context)

    igStyleColorsClassic(nullptr)

NewFrame(context: ImGuiContext): () =
    igSetCurrentContext(context.Context)

    ImGui_ImplVulkan_NewFrame()
    ImGui_ImplWin32_NewFrame()
    igNewFrame()

Draw(context: ImGuiContext, commandBuffer: VkCommandBuffer, pipeline: VkPipeline): () =
    igSetCurrentContext(context.Context)

    igRender()
    let drawData = igGetDrawData()
    ImGui_ImplVulkan_RenderDrawData(drawData, commandBuffer, pipeline)

EnableInput(context: ImGuiContext): () =
    igSetCurrentContext(context.Context)

    let io = &igGetIO()
    io.ConfigFlags <- io.ConfigFlags & ~(1 << 4)

    ImGuiContext.InputContext <- context

DisableInput(context: ImGuiContext): () =
    if (ImGuiContext.InputContext === context)
        igSetCurrentContext(context.Context)

        let io = &igGetIO()
        io.ConfigFlags <- io.ConfigFlags | (1 << 4)

        ImGuiContext.InputContext <- unchecked default

internal Win32ProcHandler(hWnd: HWND, msg: uint32, wParam: WPARAM, lParam: LPARAM): bool =
    !ImGui_ImplWin32_WndProcHandler(hWnd, msg, wParam, lParam).Equals(LRESULT(nint(0)))

internal SetCurrentContext(context: ImGuiContext): () =
    igSetCurrentContext(context.Context)

// TODO: PRODUCES BAD MSIL - WHY?!
//InputContext: ImGuiContext get, set = unchecked default

ShowDemoWindow(context: ImGuiContext): () =
    igSetCurrentContext(context.Context)

    let mutable p_open = ImGuiBool.True
    igShowDemoWindow(&&p_open)

Begin(context: ImGuiContext, isOpen: byref<bool>, hideCloseButton: bool, mutable title: ReadOnlySpan<byte>, flags: ImGuiWindowFlags): bool =
    igSetCurrentContext(context.Context)

    let titlePtr = &&title.GetPinnableReference()

    let mutable p_open = ImGuiBool.True
    let p_openPtr = if (hideCloseButton) nullptr else &&p_open
    let result = igBegin(titlePtr, p_openPtr, flags)

    isOpen <- p_open == true

    result == true

End(context: ImGuiContext): () =
    igSetCurrentContext(context.Context)

    igEnd()

BeginDisabled(context: ImGuiContext, isDisabled: bool): () =
    igSetCurrentContext(context.Context)

    igBeginDisabled(if (isDisabled) ImGuiBool.True else ImGuiBool.False)

EndDisabled(context: ImGuiContext): () =
    igSetCurrentContext(context.Context)

    igEndDisabled()

BeginChild(context: ImGuiContext, id: uint32, size: Vector2): bool =
    igSetCurrentContext(context.Context)

    igBeginChild_ID(id, size, ImGuiBool.False, ImGuiWindowFlags.None) == true

EndChild(context: ImGuiContext): () =
    igSetCurrentContext(context.Context)

    igEndChild()

PushId(context: ImGuiContext, id: void*): () =
    igSetCurrentContext(context.Context)

    igPushID_Ptr(id)

PopId(context: ImGuiContext): () =
    igSetCurrentContext(context.Context)

    igPopID()

SetNextWindowPosition(context: ImGuiContext, position: Vector2): () =
    igSetCurrentContext(context.Context)

    igSetNextWindowPos(position, 0, Vector2.Zero)

SetNextWindowSize(context: ImGuiContext, size: Vector2): () =
    igSetCurrentContext(context.Context)

    igSetNextWindowSize(size, 0)

GetWindowPosition(context: ImGuiContext): Vector2 =
    igSetCurrentContext(context.Context)

    let mutable position = default
    igGetWindowPos(&&position)
    position

GetWindowSize(context: ImGuiContext): Vector2 =
    igSetCurrentContext(context.Context)

    let mutable size = default
    igGetWindowSize(&&size)
    size

SetWindowPosition(context: ImGuiContext, position: Vector2): () =
    igSetCurrentContext(context.Context)

    let window = igGetCurrentWindow()

    igSetWindowPos_WindowPtr(window, position, 0)

SetWindowSize(context: ImGuiContext, size: Vector2): () =
    igSetCurrentContext(context.Context)

    let window = igGetCurrentWindow()

    igSetWindowSize_WindowPtr(window, size, 0)

CalculateWindowSize(context: ImGuiContext): Vector2 =
    igSetCurrentContext(context.Context)

    let window = igGetCurrentWindow()

    let mutable size = default
    igCalcWindowNextAutoFitSize(&&size, window)
    size

LabelText(context: ImGuiContext, mutable label: ReadOnlySpan<byte>, mutable text: ReadOnlySpan<byte>): () =
    igSetCurrentContext(context.Context)

    let labelPtr = &&label.GetPinnableReference()
    let textPtr = &&text.GetPinnableReference()

    igLabelText(labelPtr, textPtr)

InputText(context: ImGuiContext, mutable label: ReadOnlySpan<byte>, mutable buffer: Span<byte>): bool =
    igSetCurrentContext(context.Context)

    let labelPtr = &&label.GetPinnableReference()
    let bufferPtr = Unsafe.AsPointer(&&buffer.GetPinnableReference())

    let result =
        igInputText(
            labelPtr,
            bufferPtr,
            nuint(buffer.Length),
            ImGuiInputTextFlags.None,
            default,
            nullptr
        )

    result == true

InputInt(context: ImGuiContext, mutable label: ReadOnlySpan<byte>, value: byref<int32>): bool =
    igSetCurrentContext(context.Context)

    let labelPtr = &&label.GetPinnableReference()

    let result =
        igInputInt(
            labelPtr,
            &&value,
            1,
            0,
            ImGuiInputTextFlags.None
        )

    result == true

Checkbox(context: ImGuiContext, mutable label: ReadOnlySpan<byte>, value: byref<bool>): bool =
    igSetCurrentContext(context.Context)

    let labelPtr = &&label.GetPinnableReference()

    let mutable imValue = if (value) ImGuiBool.True else ImGuiBool.False
    let result = igCheckbox(labelPtr, &&imValue)

    if (imValue == true)
        value <- true
    else
        value <- false

    result == true

Button(context: ImGuiContext, mutable label: ReadOnlySpan<byte>, size: Vector2): bool =
    igSetCurrentContext(context.Context)

    let labelPtr = &&label.GetPinnableReference()

    igButton(labelPtr, size) == true

Combo(context: ImGuiContext, mutable label: ReadOnlySpan<byte>, selectedItemIndex: byref<int32>, items: mutable (byte*)[], popupMaxHeight: int32): bool =
    igSetCurrentContext(context.Context)

    let labelPtr = &&label.GetPinnableReference()
    let mutable itemsHandle = fixed(items)

    let result =
        igCombo_Str_arr(
            labelPtr,
            &&selectedItemIndex,
            Unsafe.AsPointer(itemsHandle.AddrOfPinnedObject()),
            items.Length,
            popupMaxHeight
        )

    itemsHandle.Free()

    result == true

CreateTexture(context: ImGuiContext, sampler: VkSampler, imageView: VkImageView, imageLayout: VkImageLayout, onDestroyTexture: () -> ()): VkDescriptorSet =
    igSetCurrentContext(context.Context)

    let descriptorSet = ImGui_ImplVulkan_AddTexture(sampler, imageView, imageLayout)
    context.VkDescriptorSets[descriptorSet] <- onDestroyTexture
    descriptorSet

DestroyTexture(context: ImGuiContext, descriptorSet: VkDescriptorSet): () =
    let mutable onDestroy = unchecked default
    if (context.VkDescriptorSets.TryRemove(descriptorSet, &onDestroy))
        igSetCurrentContext(context.Context)
        ImGui_ImplVulkan_RemoveTexture(descriptorSet)
        onDestroy()
    else
        fail("Texture already destroyed.")

Image(context: ImGuiContext, texture: VkDescriptorSet, size: Vector2, uv0: Vector2, uv1: Vector2): () =
    igSetCurrentContext(context.Context)

    igImage(texture, size, uv0, uv1, Vector4(255, 255, 255, 255), Vector4.One)