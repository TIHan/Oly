namespace Evergreen.Window

open System
open System.Text
open System.Numerics
open System.Diagnostics
open System.Collections.Generic
open System.Runtime.InteropServices
open System.Runtime.CompilerServices
open TerraFX.Interop.Windows
open Evergreen.Window
open static TerraFX.Interop.Windows.Windows
open static TerraFX.Interop.Windows.CS
open static TerraFX.Interop.Windows.GWLP
open static TerraFX.Interop.Windows.PM
open static TerraFX.Interop.Windows.WM
open static TerraFX.Interop.Windows.WS
open static TerraFX.Interop.Windows.SW

private alias Unsafe = OlyPrelude.Unsafe

internal class Marker

internal module Win32 =

    #[open]
    private module Helpers =

        fixed(o: object): GCHandle =
            GCHandle.Alloc(o, GCHandleType.Pinned)

        fixedCopyUTF8(str: string): GCHandle =
            fixed(UTF8Encoding.UTF8.GetBytes(str))

    WindowLookup: System.Collections.Concurrent.ConcurrentDictionary<HWND, Win32Window> get = System.Collections.Concurrent.ConcurrentDictionary()

    RegisterRawMouseInput(): () =
        let mutable rawMouse = default: RAWINPUTDEVICE
        rawMouse.usUsagePage <- 0x01
        rawMouse.usUsage <- 0x02
        rawMouse.dwFlags <- 0
        rawMouse.hwndTarget <- HWND.NULL
        if (RegisterRawInputDevices(&&rawMouse, 1, uint32(sizeof<RAWINPUTDEVICE>)) == BOOL.FALSE)
            fail("Failed to register raw input device.")

    GetRawMouseInput(hrawinput: HRAWINPUT): RAWMOUSE =
        let mutable inp = default: RAWINPUT
        let pData = Unsafe.AsPointer(&&inp)
        let mutable size = uint32(sizeof<RAWINPUT>)
        let bytesCopied = GetRawInputData(hrawinput, 0x10000003, pData, &&size, uint32(sizeof<RAWINPUTHEADER>))
        inp.`data`.mouse

    IsMouseRelative(rawMouse: RAWMOUSE): bool =
        (rawMouse.usFlags & 0x01) == 0

    GetDisplayModes(): DisplayMode[] =
        let displayModes = List()
        let hash = HashSet()

        let mutable mode = default: DEVMODEA
        mode.dmSize <- uint16(sizeof<DEVMODEA>)
        mode.dmDriverExtra <- 0
        let mutable i = 0: uint32
        while (EnumDisplaySettingsA(nullptr, i, &&mode) == BOOL.TRUE)
            if (mode.dmBitsPerPel == 32)
                let displayMode =
                    DisplayMode(int32(mode.dmPelsWidth), int32(mode.dmPelsHeight), int32(mode.dmDisplayFrequency))

                if (hash.Add(displayMode))
                    displayModes.Add(displayMode)
            i <- i + 1

        let displayModes = System.Linq.Enumerable.OrderBy(displayModes, x -> x.RefreshRate)
        let displayModes = System.Linq.Enumerable.OrderBy(displayModes, x -> x.Height * x.Width)
        let displayModes = System.Linq.Enumerable.ToArray(displayModes)
        Unsafe.AsImmutable(displayModes)

    GetCurrentDisplayMode(): DisplayMode =
        let mutable devmodew = default: DEVMODEW
        if (EnumDisplaySettings(nullptr, ENUM.ENUM_CURRENT_SETTINGS, &&devmodew) == BOOL.FALSE)
            fail("Failed to get display settings.")

        let displayModes = GetDisplayModes()
        OlyPrelude.Array.Find(displayModes, 
            x -> 
                int32(devmodew.dmDisplayFrequency) == x.RefreshRate &&
                 int32(devmodew.dmPelsWidth) == x.Width &&
                    int32(devmodew.dmPelsHeight) == x.Height
        )

    SetDisplayMode(displayMode: DisplayMode): () =
        let mutable mode = default: DEVMODEA
        mode.dmSize <- uint16(sizeof<DEVMODEA>)
        mode.dmBitsPerPel <- 32
        mode.dmPelsWidth <- uint32(displayMode.Width)
        mode.dmPelsHeight <- uint32(displayMode.Height)
        mode.dmDisplayFrequency <- uint32(displayMode.RefreshRate)
        mode.dmFields <- uint32(DM.DM_BITSPERPEL | DM.DM_DISPLAYFREQUENCY | DM.DM_PELSWIDTH | DM.DM_PELSHEIGHT)
        let _ = ChangeDisplaySettingsA(&&mode, uint32(CDS.CDS_FULLSCREEN))

    GetSize(hwnd: HWND): Vector2 =
        let mutable rect = default: RECT
        if (GetClientRect(hwnd, &&rect) == BOOL.TRUE)
            let width = rect.right - rect.left
            let height = rect.bottom - rect.top
            Vector2(float32(width), float32(height))
        else
            Vector2.Zero

    SetSize(hwnd: HWND, width: int32, height: int32): () =
        let mutable rect = default: RECT
        rect.top <- 0
        rect.bottom <- height
        rect.left <- 0
        rect.right <- width
        let result = AdjustWindowRect(&&rect, uint32(GetWindowLong(hwnd, GWL.GWL_STYLE)), BOOL.FALSE)
        let rectWidth = rect.right - rect.left
        let rectHeight = rect.bottom - rect.top

        let _ = SetWindowPos(hwnd, HWND.NULL, 0, 0, rectWidth, rectHeight, uint32(SWP.SWP_NOMOVE | SWP.SWP_NOOWNERZORDER | SWP.SWP_NOZORDER))

    SetPosition(hwnd: HWND, x: int32, y: int32): () =
        let _ = SetWindowPos(hwnd, HWND.NULL, x, y, 0, 0, uint32(SWP.SWP_NOSIZE | SWP.SWP_NOOWNERZORDER | SWP.SWP_NOZORDER))

    GetPosition(hwnd: HWND): Vector2 =
        let mutable rect = default: RECT
        if (GetWindowRect(hwnd, &&rect) == BOOL.TRUE)
            let x = rect.left
            let y = rect.top
            Vector2(float32(x), float32(y))
        else
            Vector2.Zero

    GetFullscreen(hwnd: HWND): bool =
        (GetWindowLong(hwnd, GWL.GWL_STYLE) & WS.WS_OVERLAPPEDWINDOW) == 0

    SetFullscreen(hwnd: HWND, isFullscreen: bool, displayMode: DisplayMode): () =
        let mutable mode = default: DEVMODEA
        mode.dmSize <- uint16(sizeof<DEVMODEA>)
        mode.dmBitsPerPel <- 32
        mode.dmPelsWidth <- uint32(displayMode.Width)
        mode.dmPelsHeight <- uint32(displayMode.Height)
        mode.dmDisplayFrequency <- uint32(displayMode.RefreshRate)
        mode.dmFields <- uint32(DM.DM_BITSPERPEL | DM.DM_DISPLAYFREQUENCY | DM.DM_PELSWIDTH | DM.DM_PELSHEIGHT)

        let dwStyle = GetWindowLong(hwnd, GWL.GWL_STYLE)
        let wasWindowed = dwStyle & WS.WS_OVERLAPPEDWINDOW != 0

        if (dwStyle & WS.WS_OVERLAPPEDWINDOW != 0)                  
            let size = Vector2(float32(displayMode.Width), float32(displayMode.Height))
            let _ = SetWindowLong(hwnd, GWL.GWL_STYLE, dwStyle & ~WS.WS_OVERLAPPEDWINDOW)
            let _ =
                SetWindowPos(hwnd, HWND.HWND_TOP,
                    0, 0,
                    int32(size.X), int32(size.Y),
                    uint32(SWP.SWP_NOOWNERZORDER | SWP.SWP_FRAMECHANGED)
                )
        else                    
            let _ = SetWindowLong(hwnd, GWL.GWL_STYLE, dwStyle | WS.WS_OVERLAPPEDWINDOW)
            let _ =
                SetWindowPos(hwnd, HWND.NULL,
                    0, 0,
                    0, 0,
                    uint32(SWP.SWP_NOMOVE | SWP.SWP_NOSIZE | SWP.SWP_NOZORDER | SWP.SWP_NOOWNERZORDER | SWP.SWP_FRAMECHANGED)
                )

        let _ = ChangeDisplaySettingsA(&&mode, uint32(CDS.CDS_FULLSCREEN))

    #[blittable]
    #[UnmanagedCallersOnly(CallConvs = [typeof<CallConvCdecl>])]
    wndProc(hWnd: HWND, msg: uint32, wParam: WPARAM, lParam: LPARAM): LRESULT =
        if (Evergreen.ImGui.ImGuiContext.InputContext !== unchecked default &&
                Evergreen.ImGui.Win32ProcHandler(hWnd, msg, wParam, lParam))
            LRESULT(nint(1))
        else
            match (int32(msg))
            | WM_DESTROY =>
                let mutable window = unchecked default
                let result = Win32.WindowLookup.TryRemove(hWnd, &window)
                PostQuitMessage(0)
                default
            | _ =>
                DefWindowProc(hWnd, msg, wParam, lParam)

    CreateWindow(title: string): (HWND, HINSTANCE) =
        Win32.RegisterRawMouseInput()
        let m = typeof<Marker>().Module
        let hInstance = HINSTANCE.op_Explicit(Marshal.GetHINSTANCE(m))
        let mutable wc = default: WNDCLASSW

        let mutable example = "Win32Window"
        let mutable windowName = title
        let mutable gc = GCHandle.Alloc(example, GCHandleType.Pinned)
        let mutable gc2 = GCHandle.Alloc(windowName, GCHandleType.Pinned)
        let addr = Unsafe.AsPointer(gc.AddrOfPinnedObject())
        let addr2 = Unsafe.AsPointer(gc2.AddrOfPinnedObject())
        wc.hInstance <- hInstance
        wc.lpfnWndProc <- &&wndProc
        wc.lpszClassName <- addr

        let result = RegisterClass(&&wc)
        if (result == 0)
            (HWND.NULL, hInstance)
        else
            let hwnd =
                CreateWindowEx(
                    0, 
                    wc.lpszClassName, 
                    addr2,
                    uint32(WS_OVERLAPPEDWINDOW),
                    CW_USEDEFAULT, 
                    CW_USEDEFAULT, 
                    CW_USEDEFAULT, 
                    CW_USEDEFAULT, 
                    HWND.NULL, 
                    HMENU.NULL, 
                    hInstance, 
                    default
                )

            gc.Free()
            gc2.Free()
            (hwnd, hInstance)

    ShowWindow(hwnd: HWND): () =
        let result = ShowWindow(hwnd, SW_SHOWNORMAL)
        let result = UpdateWindow(hwnd)
        let result = SetFocus(hwnd)

    HideWindow(hwnd: HWND): () =
        let result = ShowWindow(hwnd, SW_HIDE)

    MinimizeWindow(hwnd: HWND): () =
        let result = CloseWindow(hwnd) 

    TranslateKey(c: char): Key =
        match (c)
        | 'A' => Key.A
        | 'B' => Key.B
        | 'C' => Key.C
        | 'D' => Key.D
        | 'E' => Key.E
        | 'F' => Key.F
        | 'G' => Key.G
        | 'H' => Key.H
        | 'I' => Key.I
        | 'J' => Key.J
        | 'K' => Key.K
        | 'L' => Key.L
        | 'M' => Key.M
        | 'N' => Key.N
        | 'O' => Key.O
        | 'P' => Key.P
        | 'Q' => Key.Q
        | 'R' => Key.R
        | 'S' => Key.S
        | 'T' => Key.T
        | 'U' => Key.U
        | 'V' => Key.V
        | 'W' => Key.W
        | 'X' => Key.X
        | 'Y' => Key.Y
        | 'Z' => Key.Z
        | x =>
            match (uint16(x))
            | 27 => Key.Esc
            | 192 => Key.Tilde
            | _ => Key.Unknown

internal class Win32Window =
    implements IWindow

    mutable field title: string
    mutable field hwnd: HWND
    mutable field hinstance: HINSTANCE
    mutable field isCursorHidden: bool
    mutable field mouseInfo: MouseInfo
    mutable field keyEvents: List<KeyEvent>
    mutable field keysDown: HashSet<Key>
    mutable field isDisposed: bool
    mutable field isClosed: bool
    mutable field currentDisplayMode: DisplayMode
    mutable field defaultDisplayMode: DisplayMode

    Title: string get() = this.title
    HWND: nint get() = nint(this.hwnd.Value)
    HINSTANCE: nint get() = nint(this.hinstance.Value)

    IsClosed: bool 
        get() = 
            if (this.isDisposed)
                true
            else if (this.isClosed)
                true
            else
                IsWindow(this.hwnd) == BOOL.FALSE

    IsHidden: bool 
        get() = 
            if (this.isDisposed)
                true
            else if (this.isClosed)
                true
            else
                IsWindowVisible(this.hwnd) == BOOL.FALSE

    Size: Vector2
        get() = Win32.GetSize(this.hwnd)     
        set(value) =
            let width = int32(value.X)
            let height = int32(value.Y)

            if (!this.IsFullscreen)
                Win32.SetSize(this.hwnd, width, height)

            let displayModes = this.GetDisplayModes()
            let currentRefreshRate = this.CurrentDisplayMode.RefreshRate
            let index = 
                OlyPrelude.Array.TryFindIndex(displayModes, 
                    x -> x.Width == width && x.Height == height && x.RefreshRate == currentRefreshRate
                )
            if (index != -1)
                let displayMode = displayModes[index]
                this.currentDisplayMode <- displayMode
                if (this.IsFullscreen)
                    Win32.SetDisplayMode(displayMode)

    Position: Vector2
        get() = Win32.GetPosition(this.hwnd)
        set(value) =
            Win32.SetPosition(this.hwnd, int32(value.X), int32(value.Y))

    new(title: string) =
        match (Win32.CreateWindow(title))
        | (hwnd, hinstance) when (hwnd == HWND.NULL) =>
            throw Exception("Failed to create window.")
        | (hwnd, hinstance) =>
            let displayMode = Win32.GetCurrentDisplayMode()
            Win32.WindowLookup[hwnd] <- this
            {
                title = title
                keyEvents = List(128)
                keysDown = HashSet(128)
                mouseInfo = MouseInfo()
                isCursorHidden = false
                hwnd = hwnd
                hinstance = hinstance
                isDisposed = false
                isClosed = true
                currentDisplayMode = displayMode
                defaultDisplayMode = displayMode
            }

    Show(): () =
        this.ThrowIfDisposed()
        Win32.ShowWindow(this.hwnd)
        this.isClosed <- false

    Hide(): () =
        this.ThrowIfDisposed()
        Win32.HideWindow(this.hwnd)

    Close(): () =
        this.ThrowIfDisposed()
        Win32.HideWindow(this.hwnd)
        this.isClosed <- true

    Minimize(): () =
        this.ThrowIfDisposed()
        if (!this.isClosed)
            let result = CloseWindow(this.hwnd)     
                
    GetDisplayModes(): DisplayMode[] = Win32.GetDisplayModes()

    CurrentDisplayMode: DisplayMode get() = this.currentDisplayMode

    ChangeDisplayMode(displayMode: DisplayMode): () =
        let displayModes = this.GetDisplayModes()
        let loop(i) =
            if (i == displayModes.Length)
                ()
            else
                let displayMode2 = displayModes[i]
                if (displayMode.Equals(displayMode2))
                    this.currentDisplayMode <- displayMode2
                    if (this.IsFullscreen)
                        Win32.SetDisplayMode(this.currentDisplayMode)
                    Win32.SetSize(this.hwnd, this.currentDisplayMode.Width, this.currentDisplayMode.Height)
                else
                    loop(i + 1)
        loop(0)

    IsFullscreen: bool
        get() = Win32.GetFullscreen(this.hwnd)
        set(value) =
            let displayMode =
                if (value)
                    this.currentDisplayMode
                else
                    this.defaultDisplayMode
            Win32.SetFullscreen(this.hwnd, value, displayMode)
            Win32.SetSize(this.hwnd, this.currentDisplayMode.Width, this.currentDisplayMode.Height)

    PumpEvents(): InputSnapshot =
        this.ThrowIfDisposed()

        #[inline]
        let getKeyEvents(): KeyEvent[] =
            let xs = this.keyEvents.ToArray()
            this.keyEvents.Clear()
            Unsafe.AsImmutable(xs)

        if (Evergreen.ImGui.ImGuiContext.InputContext !== unchecked default)
            Evergreen.ImGui.SetCurrentContext(Evergreen.ImGui.ImGuiContext.InputContext)


        this.mouseInfo.RelativeX <- 0
        this.mouseInfo.RelativeY <- 0

        let hwnd = this.hwnd
        let mutable msg = default: MSG
        while (PeekMessage(&&msg, hwnd, 0, 0, uint32(PM_REMOVE)) == BOOL.TRUE)
            let result = TranslateMessage(&&msg)
            let result = DispatchMessage(&&msg)

            match (int32(msg.message))
            | WM_INPUT =>
                let rawMouse = Win32.GetRawMouseInput(Unsafe.Cast(msg.lParam))
                let isRelative = Win32.IsMouseRelative(rawMouse)
                if (rawMouse.lLastX != 0 || rawMouse.lLastY != 0)
                    let mutable newMouseInfo = default: MouseInfo
                    newMouseInfo.X <- this.mouseInfo.X + rawMouse.lLastX
                    newMouseInfo.Y <- this.mouseInfo.Y + rawMouse.lLastY
                    newMouseInfo.RelativeX <- rawMouse.lLastX
                    newMouseInfo.RelativeY <- rawMouse.lLastY
                    if (this.isCursorHidden)
                        // center()
                        ()
                    else
                        this.mouseInfo <- newMouseInfo

            | WM_KEYDOWN
            | WM_SYSKEYDOWN =>
                let key = Win32.TranslateKey(char(msg.wParam.Value))
                if (key != Key.Unknown)
                    let flags =
                        if (this.keysDown.Add(key))
                            KeyEventFlags.Down
                        else
                            KeyEventFlags.Repeat
                    let keyEvent = KeyEvent(key, flags)
                    this.keyEvents.Add(keyEvent)

            | WM_KEYUP
            | WM_SYSKEYUP =>
                let key = Win32.TranslateKey(char(msg.wParam.Value))
                if (key != Key.Unknown)
                    let result = this.keysDown.Remove(key)
                    let flags = KeyEventFlags.Up
                    let keyEvent = KeyEvent(key, flags)
                    this.keyEvents.Add(keyEvent)

            | WM_LBUTTONDOWN =>
                () // left mouse button

            | WM_LBUTTONUP =>
                () // left mouse button up

            | WM_RBUTTONDOWN =>
                () // left mouse button

            | WM_RBUTTONUP =>
                () // left mouse button up

            | WM_MBUTTONDOWN =>
                ()

            | WM_MBUTTONUP =>
                ()

            | WM_QUIT =>
                ()

            | _ =>
                ()

        InputSnapshot(getKeyEvents(), this.mouseInfo)

    Dispose(): () =
        this.ThrowIfDisposed()
        let result = DestroyWindow(this.hwnd)
        this.isDisposed <- true
        this.isClosed <- true
        this.keyEvents.Clear()
        this.keysDown.Clear()

    #[DebuggerHidden()]
    private ThrowIfDisposed(): () =
        if (this.isDisposed)
            throw ObjectDisposedException("Win32Window")
