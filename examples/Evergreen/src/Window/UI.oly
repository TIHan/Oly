namespace Evergreen.Graphics.Rendering.UI

open System
open System.Text
open System.Numerics
open System.Collections.Generic
open System.Threading
open System.Runtime.InteropServices
open Evergreen
open Evergreen.Graphics.Rendering

private alias Array = OlyPrelude.Array

private module Span =

    TryFindIndex<T>(mutable span: Span<T>, predicate: T -> bool): int32 =
        let mutable isFound = false
        let mutable i = 0
        while (i < span.Length && !isFound)
            let item = span[i]
            if (predicate(item))
                isFound <- true
            else
                i <- i + 1
        if (isFound)
            i
        else
            -1

abstract class View =

    static field NextId: uint64 = 0
    field Tag: int32
    internal field Id: uint64

    IsEnabled: bool get, set
    Size: Vector2 get, set

    internal new(tag: int32) = 
        { 
            Tag = tag
            Id = Interlocked.Increment(&NextId)
            IsEnabled = true
            Size = Vector2.Zero

            OnSizeChanged = (x: Vector2, y: Vector2) -> ()
        }

    OnSizeChanged: (previousSize: Vector2, currentSize: Vector2) -> () get, set

    pattern Window(view: View): WindowView when (view.Tag == 0) =>
        Unsafe.Cast<WindowView>(view)

    pattern Button(view: View): ButtonView when (view.Tag == 1) =>
        Unsafe.Cast<ButtonView>(view)

    pattern TextInput(view: View): TextInputView when (view.Tag == 2) =>
        Unsafe.Cast<TextInputView>(view)

    pattern Label(view: View): LabelView when (view.Tag == 3) =>
        Unsafe.Cast<LabelView>(view)

    pattern Image(view: View): ImageView when (view.Tag == 4) =>
        Unsafe.Cast<ImageView>(view)

    pattern Checkbox(view: View): CheckboxView when (view.Tag == 5) =>
        Unsafe.Cast<CheckboxView>(view)

    pattern ComboBox(view: View): ComboBoxView when (view.Tag == 6) =>
        Unsafe.Cast<ComboBoxView>(view)

abstract class AbstractLabelView =
    inherits View

    internal new(tag: int32) =
        base(tag) with {
            labelBuffer = Array.ZeroCreate(256)
            labelBufferLength = 0
            label = ""
        }

    field labelBuffer: mutable byte[]
    mutable field labelBufferLength: int32
    mutable field label: string
    internal LabelSpan: ReadOnlySpan<byte> get() = ReadOnlySpan(this.labelBuffer, 0, this.labelBufferLength)
    Label: string
        get() = this.label
        set(mutable value) =
            // if (string.IsNullOrWhiteSpace(value))
            //     value <- "##"
            this.label <- value
            this.labelBufferLength <- System.Text.Encoding.UTF8.GetBytes(this.label, 0, this.label.Length, this.labelBuffer, 0)

class WindowView =
    inherits View

    new() = 
        base(0) with {
            Children = List()

            IsOpen = true
            CanMove = false
            CanResize = false
            CanAutoResize = true
            Position = Vector2.Zero

            OnPositionChanged = (x: Vector2, y: Vector2) -> ()

            titleBuffer = Array.ZeroCreate(256)
            titleBufferLength = 0
            title = ""

            isInit = false
        }

    internal mutable field isInit: bool

    Children: List<View> get

    IsOpen: bool get, set
    CanMove: bool get, set
    CanResize: bool get, set
    CanAutoResize: bool get, set
    Position: Vector2 get, set

    OnPositionChanged: (previousPosition: Vector2, position: Vector2) -> () get, set

    field titleBuffer: mutable byte[]
    mutable field titleBufferLength: int32
    mutable field title: string
    internal TitleSpan: ReadOnlySpan<byte> get() = ReadOnlySpan(this.titleBuffer, 0, this.titleBufferLength)
    Title: string
        get() = this.title
        set(mutable value) =
            // if (string.IsNullOrWhiteSpace(value))
            //     value <- "##"
            this.title <- value
            this.titleBufferLength <- System.Text.Encoding.UTF8.GetBytes(this.title, 0, this.title.Length, this.titleBuffer, 0)

class ButtonView =
    inherits AbstractLabelView

    new() =
        base(1) with {
            OnClicked = () -> ()
        }

    OnClicked: () -> () get, set

class TextInputView =
    inherits AbstractLabelView

    new() =
        base(2) with {
            textBuffer = Array.ZeroCreate(256)
            text = string.Empty

            OnTextChanged = (x, y) -> ()
        }

    field textBuffer: mutable byte[]
    mutable field text: string
    internal TextSpan: Span<byte> get() = Span(this.textBuffer, 0, this.textBuffer.Length)
    Text: string
        get() = this.text
        set(value) = 
            this.text <- value
            let byteCount = System.Text.Encoding.UTF8.GetBytes(this.text, 0, this.text.Length, this.textBuffer, 0)

    OnTextChanged: (previousText: string, text: string) -> () get, set

class LabelView =
    inherits AbstractLabelView

    new() =
        base(3) with {
            textBuffer = Array.ZeroCreate(256)
            text = string.Empty
        }

    field textBuffer: mutable byte[]
    mutable field text: string
    internal TextSpan: ReadOnlySpan<byte> get() = ReadOnlySpan(this.textBuffer, 0, this.textBuffer.Length)
    Text: string
        get() = this.text
        set(value) = 
            this.text <- value
            let byteCount = System.Text.Encoding.UTF8.GetBytes(this.text, 0, this.text.Length, this.textBuffer, 0)

class ImageView =
    inherits View

    new() =
        base(4) with {
            descriptorSet = Evergreen.Graphics.Backend.Vulkan.VkDescriptorSet.NULL
            gpuImage = unchecked default
            isDirty = false
        }

    internal mutable field isDirty: bool
    internal mutable field descriptorSet: Evergreen.Graphics.Backend.Vulkan.VkDescriptorSet
    internal mutable field gpuImage: GpuImage
    GpuImage: GpuImage 
        get() = this.gpuImage
        set(value) =
            this.gpuImage <- value 
            this.isDirty <- true

class CheckboxView =
    inherits AbstractLabelView

    new() =
        base(5) with {
            IsChecked = false
            OnChecked = (x: bool) -> ()
        }

    IsChecked: bool get, set
    OnChecked: bool -> () get, set

class ComboBoxView =
    inherits AbstractLabelView
    implements IDisposable

    new() =
        base(6) with {
            SelectedItemIndex = 0
            PopupMaxHeight = 8
            OnSelectedItemIndexChanged = (x: int32, y: int32) -> ()

            itemPtrs = mutable []
            items = mutable []
            isDisposed = false
        }

    mutable field isDisposed: bool

    SelectedItemIndex: int32 get, set
    PopupMaxHeight: int32 get, set
    OnSelectedItemIndexChanged: (previousSelectedItemIndex: int32, selectedItemIndex: int32) -> () get, set

    internal mutable field itemPtrs: mutable nint[]
    mutable field items: mutable string[]
    Items: mutable string[] 
        get() = 
            if (this.isDisposed)
                throw System.ObjectDisposedException("ComboBoxView")
            this.items
        set(value) =
            this.Free()

            this.itemPtrs <- 
                Array.Map(value,
                    str ->
                        let buffer = Array.ZeroCreate(256)
                        let byteCount = System.Text.Encoding.UTF8.GetBytes(str, 0, str.Length, buffer, 0)
                        let ptr = Marshal.AllocHGlobal(byteCount + 1)
                        let mutable span = Span<byte>(buffer, 0, byteCount)
                        let mutable outputSpan = Span<byte>(Unsafe.Cast<void*>(ptr), byteCount + 1)
                        span.CopyTo(outputSpan)
                        (outputSpan[outputSpan.Length - 1]) <- 0
                        ptr
                )

            this.items <- value

    private Free(): () =
        if (this.isDisposed)
            throw System.ObjectDisposedException("ComboBoxView")
        let mutable i = 0
        while (i < this.itemPtrs.Length)
            Marshal.FreeHGlobal(this.itemPtrs[i])
            this.itemPtrs[i] <- default
            i <- i + 1

    Dispose(): () =
        this.Free()
        this.isDisposed <- true

class UIContext =

    internal Gpu: Gpu get
    internal GpuProgramUI: GpuProgramUI get

    internal ImGuiContext: ImGui.ImGuiContext get() = this.GpuProgramUI.ImGuiContext

    internal new(gpu: Gpu, gpuProgramUI: GpuProgramUI) =
        {
            Gpu = gpu
            GpuProgramUI = gpuProgramUI
        }

module UI =

    private MakeNode(context: UIContext, view: View): () =
        ImGui.PushId(context.ImGuiContext, Unsafe.Cast(view.Id))
        ImGui.BeginDisabled(context.ImGuiContext, !view.IsEnabled)
        match (view)
        | View.Window(view) =>
            MakeWindow(context, view)
        
        | View.Button(view) =>
            MakeButton(context, view)

        | View.TextInput(view) =>
            MakeTextInput(context, view)

        | View.Label(view) =>
            MakeLabel(context, view)

        | View.Image(view) =>
            MakeImage(context, view)

        | View.Checkbox(view) =>
            MakeCheckbox(context, view)

        | View.ComboBox(view) =>
            MakeComboBox(context, view)

        | _ =>
            ()

        ImGui.EndDisabled(context.ImGuiContext)
        ImGui.PopId(context.ImGuiContext)

    private MakeWindow(context: UIContext, view: WindowView): () =
        let mutable isOpen = view.IsOpen
        if (isOpen)
            let mutable prevPos = view.Position
            let mutable prevSize = view.Size

            if (!view.isInit)
                view.isInit <- true
                ImGui.SetNextWindowPosition(context.ImGuiContext, view.Position)
                ImGui.SetNextWindowSize(context.ImGuiContext, view.Size)

            if (view.CanAutoResize)
                ImGui.SetNextWindowSize(context.ImGuiContext, Vector2.Zero)

            let mutable defaultFlags = ImGui.ImGuiWindowFlags.NoCollapse | ImGui.ImGuiWindowFlags.NoSavedSettings

            defaultFlags <-
                if (view.CanMove)
                    defaultFlags
                else
                    defaultFlags | ImGui.ImGuiWindowFlags.NoMove

            defaultFlags <-
                if (view.CanResize)
                    defaultFlags
                else
                    defaultFlags | ImGui.ImGuiWindowFlags.NoResize

            if (ImGui.Begin(context.ImGuiContext, &isOpen, true, view.TitleSpan, defaultFlags))
                view.IsOpen <- isOpen
                
                let mutable i = 0
                while (i < view.Children.Count)
                    MakeNode(context, view.Children[i])
                    i <- i + 1

                let pos = ImGui.GetWindowPosition(context.ImGuiContext)
                view.Position <- pos

                if (prevPos != pos)
                    ImGui.SetWindowPosition(context.ImGuiContext, view.Position)
                    view.OnPositionChanged(prevPos, pos)

                let size = ImGui.GetWindowSize(context.ImGuiContext)
                view.Size <- size

                if (prevSize != size)
                    if (!view.CanAutoResize)
                       ImGui.SetWindowSize(context.ImGuiContext, view.Size)
                    view.OnSizeChanged(prevSize, size)

                ImGui.End(context.ImGuiContext)

    private MakeButton(context: UIContext, view: ButtonView): () =
        if (ImGui.Button(context.ImGuiContext, view.LabelSpan, view.Size))
            view.OnClicked()

    private MakeTextInput(context: UIContext, view: TextInputView): () =
        if (ImGui.InputText(context.ImGuiContext, view.LabelSpan, view.TextSpan))
            let prevText = view.Text

            let mutable textSpan = view.TextSpan
            let indexZero = Span.TryFindIndex(textSpan, x -> x == 0)
            let textSpan = 
                if (indexZero == -1)
                    textSpan
                else
                    textSpan.Slice(0, indexZero)

            view.Text <- System.Text.Encoding.UTF8.GetString(Span<_>.op_Implicit(textSpan))
            view.OnTextChanged(prevText, view.Text)

    private MakeLabel(context: UIContext, view: LabelView): () =
        ImGui.LabelText(context.ImGuiContext, view.LabelSpan, view.TextSpan)

    private MakeImage(context: UIContext, view: ImageView): () =
        if (view.isDirty)
            view.isDirty <- false
            
            if (view.descriptorSet != Evergreen.Graphics.Backend.Vulkan.VkDescriptorSet.NULL)
                ImGui.DestroyTexture(context.ImGuiContext, view.descriptorSet)
            view.descriptorSet <-
                context.Gpu.Sync(view.gpuImage)
                ImGui.CreateTexture(context.ImGuiContext, view.gpuImage.VkSampler, view.gpuImage.VkImageView, Evergreen.Graphics.Backend.Vulkan.VkImageLayout.VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
                    () ->
                        view.descriptorSet <- Evergreen.Graphics.Backend.Vulkan.VkDescriptorSet.NULL
                        view.isDirty <- true
                )

        if (view.descriptorSet != Evergreen.Graphics.Backend.Vulkan.VkDescriptorSet.NULL)
            ImGui.Image(context.ImGuiContext, view.descriptorSet, view.Size, Vector2.Zero, Vector2.One)

    private MakeCheckbox(context: UIContext, view: CheckboxView): () =
        let mutable isChecked = view.IsChecked
        if (ImGui.Checkbox(context.ImGuiContext, view.LabelSpan, &isChecked))
            view.IsChecked <- isChecked
            view.OnChecked(isChecked)

    private MakeComboBox(context: UIContext, view: ComboBoxView): () =
        let mutable selectedItemIndex = view.SelectedItemIndex
        if (ImGui.Combo(context.ImGuiContext, view.LabelSpan, &selectedItemIndex, view.itemPtrs, view.PopupMaxHeight))
            let prevSelectedItemIndex = view.SelectedItemIndex

            view.SelectedItemIndex <- selectedItemIndex
            view.OnSelectedItemIndexChanged(prevSelectedItemIndex, selectedItemIndex)

    NewFrame(context: UIContext): () =
        ImGui.NewFrame(context.ImGuiContext)

    Show(context: UIContext, view: WindowView): () =
        MakeNode(context, view)

    Draw(context: UIContext, commandBuffer: TerraFX.Interop.Vulkan.VkCommandBuffer, pipeline: TerraFX.Interop.Vulkan.VkPipeline): () =
        ImGui.Draw(context.ImGuiContext, commandBuffer, pipeline)
