namespace Evergreen.UI

open System
open System.Numerics
open System.Collections.Generic
open Evergreen
open Evergreen.Graphics

private alias Array = OlyPrelude.Array

private module Span =

    TryFindIndex<T>(mutable span: Span<T>, predicate: T -> bool): int32 =
        let mutable isFound = false
        let mutable i = 0
        while (i < span.Length && !isFound)
            let item = span[i]
            if (predicate(item))
                isFound <- true
            else
                i <- i + 1
        if (isFound)
            i
        else
            -1

// abstract class UIModel =

//     IsEnabled: bool get, set = true
//     Size: Vector2 get, set = Vector2.Zero

// class CheckboxModel =
//     inherits UIModel

//     Label: string get, set = string.Empty
//     IsChecked: bool get, set = false

// class ComboBoxModel =
//     inherits UIModel

//     Label: string get, set = string.Empty
//     SelectedItemIndex: int32 get, set = 0
//     Items: mutable string[] get, set = mutable []
//     ItemCount: int32 get, set = 0

abstract class View =

    field Tag: int32

    IsEnabled: bool get, set
    Size: Vector2 get, set

    internal new(tag: int32) = 
        { 
            Tag = tag
            IsEnabled = true
            Size = Vector2.Zero
        }

    pattern Window(view: View): WindowView when (view.Tag == 0) =>
        Unsafe.Cast<WindowView>(view)

    pattern Button(view: View): ButtonView when (view.Tag == 1) =>
        Unsafe.Cast<ButtonView>(view)

    pattern TextInput(view: View): TextInputView when (view.Tag == 2) =>
        Unsafe.Cast<TextInputView>(view)

    pattern Label(view: View): LabelView when (view.Tag == 3) =>
        Unsafe.Cast<LabelView>(view)

    pattern Image(view: View): ImageView when (view.Tag == 4) =>
        Unsafe.Cast<ImageView>(view)

    // internal class Checkbox =
    //     inherits UINode

    //     State: CheckboxModel get
    //     OnChanged: () -> () get

    //     new(state: CheckboxModel, onChanged: () -> ()) =
    //         base (10) with {
    //             State = state
    //             OnChanged = onChanged
    //         }

    // pattern Checkbox(node: UINode): (state: CheckboxModel, onChanged: () -> ()) when (node.Tag == 10) =>
    //     let node = Unsafe.Cast<Checkbox>(node)
    //     (node.State, node.OnChanged)

    // internal class ComboBox =
    //     inherits UINode

    //     State: ComboBoxModel get
    //     OnChanged: () -> () get

    //     new(state: ComboBoxModel, onChanged: () -> ()) =
    //         base (11) with {
    //             State = state
    //             OnChanged = onChanged
    //         }

    // pattern ComboBox(node: UINode): (state: ComboBoxModel, onChanged: () -> ()) when (node.Tag == 11) =>
    //     let node = Unsafe.Cast<ComboBox>(node)
    //     (node.State, node.OnChanged)

    // internal class DemoWindow =
    //     inherits UINode

    //     new() = base(100)

    // pattern DemoWindow(node: UINode): () when (node.Tag == 100) =>
    //     ()

class WindowView =
    inherits View

    new() = 
        base(0) with {
            Children = List()

            IsOpen = true
            Position = Vector2.Zero

            titleBuffer = Array.ZeroCreate(256)
            titleBufferLength = 0
            title = string.Empty
        }

    Children: List<View> get

    IsOpen: bool get, set
    Position: Vector2 get, set

    field titleBuffer: mutable byte[]
    mutable field titleBufferLength: int32
    mutable field title: string
    internal TitleSpan: ReadOnlySpan<byte> get() = ReadOnlySpan(this.titleBuffer, 0, this.titleBufferLength)
    Title: string
        get() = this.title
        set(value) =
            this.title <- value
            this.titleBufferLength <- System.Text.Encoding.UTF8.GetBytes(this.title, 0, this.title.Length, this.titleBuffer, 0)

class ButtonView =
    inherits View

    new() =
        base(1) with {
            labelBuffer = Array.ZeroCreate(256)
            labelBufferLength = 0
            label = string.Empty

            OnClick = () -> ()
        }

    field labelBuffer: mutable byte[]
    mutable field labelBufferLength: int32
    mutable field label: string
    internal LabelSpan: ReadOnlySpan<byte> get() = ReadOnlySpan(this.labelBuffer, 0, this.labelBufferLength)
    Label: string
        get() = this.label
        set(value) =
            this.label <- value
            this.labelBufferLength <- System.Text.Encoding.UTF8.GetBytes(this.label, 0, this.label.Length, this.labelBuffer, 0)

    OnClick: () -> () get, set

class TextInputView =
    inherits View

    new() =
        base(2) with {
            labelBuffer = Array.ZeroCreate(256)
            labelBufferLength = 0
            label = string.Empty

            textBuffer = Array.ZeroCreate(256)
            text = string.Empty

            OnTextChanged = () -> ()
        }

    field labelBuffer: mutable byte[]
    mutable field labelBufferLength: int32
    mutable field label: string
    internal LabelSpan: ReadOnlySpan<byte> get() = ReadOnlySpan(this.labelBuffer, 0, this.labelBufferLength)
    Label: string
        get() = this.label
        set(value) =
            this.label <- value
            this.labelBufferLength <- System.Text.Encoding.UTF8.GetBytes(this.label, 0, this.label.Length, this.labelBuffer, 0)

    field textBuffer: mutable byte[]
    mutable field text: string
    internal TextSpan: Span<byte> get() = Span(this.textBuffer, 0, this.textBuffer.Length)
    Text: string
        get() = this.text
        set(value) = 
            this.text <- value
            let byteCount = System.Text.Encoding.UTF8.GetBytes(this.text, 0, this.text.Length, this.textBuffer, 0)

    OnTextChanged: () -> () get, set

class LabelView =
    inherits View

    new() =
        base(3) with {
            labelBuffer = Array.ZeroCreate(256)
            labelBufferLength = 0
            label = string.Empty

            textBuffer = Array.ZeroCreate(256)
            text = string.Empty
        }

    field labelBuffer: mutable byte[]
    mutable field labelBufferLength: int32
    mutable field label: string
    internal LabelSpan: ReadOnlySpan<byte> get() = ReadOnlySpan(this.labelBuffer, 0, this.labelBufferLength)
    Label: string
        get() = this.label
        set(value) =
            this.label <- value
            this.labelBufferLength <- System.Text.Encoding.UTF8.GetBytes(this.label, 0, this.label.Length, this.labelBuffer, 0)

    field textBuffer: mutable byte[]
    mutable field text: string
    internal TextSpan: ReadOnlySpan<byte> get() = ReadOnlySpan(this.textBuffer, 0, this.textBuffer.Length)
    Text: string
        get() = this.text
        set(value) = 
            this.text <- value
            let byteCount = System.Text.Encoding.UTF8.GetBytes(this.text, 0, this.text.Length, this.textBuffer, 0)

class ImageView =
    inherits View

    new(gpuImage: Evergreen.Game.Rendering.GpuImage) =
        base(4) with {
            descriptorSet = Evergreen.Graphics.Backend.Vulkan.VkDescriptorSet.NULL
            gpuImage = gpuImage
        }

    internal mutable field descriptorSet: Evergreen.Graphics.Backend.Vulkan.VkDescriptorSet
    internal mutable field gpuImage: Evergreen.Game.Rendering.GpuImage
    GpuImage: Evergreen.Game.Rendering.GpuImage get() = this.gpuImage

module UI =

    private MakeNode(context: ImGui.ImGuiContext, view: View): () =
        match (view)
        | View.Window(view) =>
            ImGui.SetWindowSize(context, view.Size)
            ImGui.SetWindowPosition(context, view.Position)
            ImGui.BeginDisabled(context, !view.IsEnabled)
            MakeWindow(context, view)
            ImGui.EndDisabled(context)
        
        | View.Button(view) =>
            ImGui.BeginDisabled(context, !view.IsEnabled)
            MakeButton(context, view)
            ImGui.EndDisabled(context)

        | View.TextInput(view) =>
            ImGui.BeginDisabled(context, !view.IsEnabled)
            MakeTextInput(context, view)
            ImGui.EndDisabled(context)

        | View.Label(view) =>
            ImGui.BeginDisabled(context, !view.IsEnabled)
            MakeLabel(context, view)
            ImGui.EndDisabled(context)

        | View.Image(view) =>
            ImGui.BeginDisabled(context, !view.IsEnabled)
            MakeImage(context, view)
            ImGui.EndDisabled(context)

        // | UINode.DemoWindow =>
        //     ImGui.ShowDemoWindow(context)

        // | UINode.Int32Input(state, onChanged) =>
        //     MakeInt32Input(state, onChanged)

        // | UINode.Checkbox(state, onChanged) =>
        //     MakeCheckbox(state, onChanged)

        // | UINode.ComboBox(state, onChanged) =>
        //     MakeComboBox(state, onChanged)

        | _ =>
            ()

    private MakeWindow(context: ImGui.ImGuiContext, view: WindowView): () =
        let mutable isOpen = view.IsOpen
        if (isOpen && ImGui.Begin(context, &isOpen, true, view.TitleSpan))
            let mutable i = 0
            while (i < view.Children.Count)
                MakeNode(context, view.Children[i])
                i <- i + 1
            ImGui.End(context)
        view.IsOpen <- isOpen

    private MakeButton(context: ImGui.ImGuiContext, view: ButtonView): () =
        if (ImGui.Button(context, view.LabelSpan, view.Size))
            context.Callbacks.Enqueue(view.OnClick)

    private MakeTextInput(context: ImGui.ImGuiContext, view: TextInputView): () =
        if (ImGui.InputText(context, view.LabelSpan, view.TextSpan))
            let mutable textSpan = view.TextSpan
            let indexZero = Span.TryFindIndex(textSpan, x -> x == 0)
            let textSpan = 
                if (indexZero == -1)
                    textSpan
                else
                    textSpan.Slice(0, indexZero)
            view.Text <- System.Text.Encoding.UTF8.GetString(Span<_>.op_Implicit(textSpan))
            context.Callbacks.Enqueue(view.OnTextChanged)

    private MakeLabel(context: ImGui.ImGuiContext, view: LabelView): () =
        ImGui.LabelText(context, view.LabelSpan, view.TextSpan)

    private MakeImage(context: ImGui.ImGuiContext, view: ImageView): () =
        if (view.descriptorSet == Evergreen.Graphics.Backend.Vulkan.VkDescriptorSet.NULL)
            view.descriptorSet <-
                ImGui.CreateTexture(context, view.gpuImage.VkSampler, view.gpuImage.VkImageView, Evergreen.Graphics.Backend.Vulkan.VkImageLayout.VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL,
                    () ->
                        view.descriptorSet <- Evergreen.Graphics.Backend.Vulkan.VkDescriptorSet.NULL
                )

        ImGui.Image(context, view.descriptorSet, view.Size, Vector2.Zero, Vector2.One)

    // private MakeInt32Input(state: Int32InputViewModel, onChanged: Int32InputViewModel -> ()): () =
    //     ImGui.BeginDisabled(!state.IsEnabled)
    //     if (ImGui.InputInt(state.Label, &state.Value))
    //         onChanged(state)
    //     ImGui.EndDisabled()

    // private MakeCheckbox(state: CheckboxViewModel, onChanged: CheckboxViewModel -> ()): () =
    //     ImGui.BeginDisabled(!state.IsEnabled)
    //     if (ImGui.Checkbox(state.Label, &state.IsChecked))
    //         onChanged(state)
    //     ImGui.EndDisabled()

    // private MakeComboBox(state: ComboBoxViewModel, onChanged: ComboBoxViewModel -> ()): () =
    //     ImGui.BeginDisabled(!state.IsEnabled)
    //     if (ImGui.Combo(state.Label, &state.SelectedItemIndex, state.Items, state.ItemCount))
    //         onChanged(state)
    //     ImGui.EndDisabled()

    NewFrame(context: ImGui.ImGuiContext): () =
        ImGui.NewFrame(context)

    Show(context: ImGui.ImGuiContext, view: View): () =
        MakeNode(context, view)
        let mutable callback = unchecked default
        while (context.Callbacks.TryDequeue(&callback))
            callback()

    Draw(context: ImGui.ImGuiContext, commandBuffer: TerraFX.Interop.Vulkan.VkCommandBuffer, pipeline: TerraFX.Interop.Vulkan.VkPipeline): () =
        ImGui.Draw(context, commandBuffer, pipeline)
