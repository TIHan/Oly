namespace Evergreen.Network

open System
open System.IO
open System.IO.Compression
open System.Net
open System.Net.Sockets
open System.Collections.Generic
open System.Collections.Concurrent
open System.Runtime.InteropServices
open System.Security.Cryptography

private alias Array = OlyPrelude.Array

#[open]
internal module Helpers =

    SequenceGreaterThan(s1: uint16, s2: uint16): bool =
        ((s1 > s2) && (s1 - s2 <= 32768)) || ((s1 < s2) && (s2 - s1  > 32768))

internal enum PacketKind =
    | Invalid

    | Heartbeat
    | ConnectionRequested
    | ConnectionAccepted
    | Disconnect

    | Unreliable
    | UnreliableSequenced
    | Reliable
    | ReliableSequenced
    | ReliableOrdered
    
internal struct PacketHeader =
    public mutable field Kind: PacketKind = PacketKind.Invalid
    public mutable field SequenceId: uint16 = 0
    public mutable field FragmentIndex: int32 = 0
    public mutable field FragmentCount: int32 = 0
    public mutable field TotalDataSize: int32 = 0
    public mutable field Ack: uint16 = 0
    public mutable field AckBits: uint64 = 0
        
internal struct Packet =
    public field Buffer: mutable byte[] = Array.ZeroCreate(NetworkPacket.MaxSize)
    public mutable field DataSize: int32 = 0

    ReceivingSpan: Span<byte> get() = Span(this.Buffer)
    SendingSpan: ReadOnlySpan<byte> get() = ReadOnlySpan(this.Buffer, 0, sizeof<PacketHeader> + this.DataSize)
    DataSpan: Span<byte> get() = Span(this.Buffer, sizeof<PacketHeader>, this.DataSize)

    Header: byref<PacketHeader> 
        get() =
            let headerSpan = MemoryMarshal.Cast(Span(this.Buffer, 0, sizeof<PacketHeader>))
            &headerSpan.get_Item(0) // TODO: language-bug, issue with using '&headerSpan[0]'

    DataString: string get() = System.Text.Encoding.Default.GetString(this.Buffer, sizeof<PacketHeader>, this.DataSize)

module NetworkPacket =
    public field MaxDataSize: int32 = 1024
    public field MaxSize: int32 = MaxDataSize + sizeof<PacketHeader>

#[null]
internal class PacketFactory =
    mutable field nextSequenceId: uint16 = 1

    CreatePackets(packetKind: PacketKind, mutable msgPayload: ReadOnlyMemory<byte>): Packet[] =
        let sequenceId = this.nextSequenceId
        this.nextSequenceId <- (this.nextSequenceId + 1) % uint16.MaxValue

        let msgPayloadSize = msgPayload.Length
        if (msgPayloadSize > NetworkPacket.MaxDataSize)
            let chunkCount = (msgPayloadSize / NetworkPacket.MaxDataSize) + 1
            Array.Initialize(chunkCount,
                i ->
                    let mutable packet = Packet()

                    let header: byref<PacketHeader> = &packet.get_Header() // TODO: language-bug, issue with using '&packet.Header'
                    header.Kind <- packetKind
                    header.SequenceId <- sequenceId
                    header.FragmentIndex <- i
                    header.FragmentCount <- chunkCount
                    header.TotalDataSize <- msgPayloadSize

                    if (i == (chunkCount - 1))
                        packet.DataSize <- msgPayloadSize - (i * NetworkPacket.MaxDataSize)
                    else
                        packet.DataSize <- NetworkPacket.MaxDataSize

                    msgPayload.Slice(i * NetworkPacket.MaxDataSize, packet.DataSize).Span.CopyTo(packet.DataSpan)                  
                    packet
            )
        else
            let mutable packet = Packet()

            let header: byref<PacketHeader> = &packet.get_Header() // TODO: language-bug, issue with using '&packet.Header'
            header.Kind <- packetKind
            header.SequenceId <- sequenceId
            header.FragmentIndex <- 0
            header.FragmentCount <- 1
            header.TotalDataSize <- msgPayloadSize

            packet.DataSize <- msgPayloadSize
            
            msgPayload.Slice(0, msgPayloadSize).Span.CopyTo(packet.DataSpan)
            [packet]

internal module DataCrypto =

    field crypt: DES = DESCryptoServiceProvider.Create()

    Encrypt(buffer: mutable byte[]): mutable byte[] =
        crypt.EncryptEcb(buffer, PaddingMode.ISO10126)

    Decrypt(mutable buffer: ReadOnlySpan<byte>): mutable byte[] =
        crypt.DecryptEcb(buffer, PaddingMode.ISO10126)


internal module DataCompression =

    Compress(buffer: mutable byte[], offset: int32, length: int32): mutable byte[] =
      //  Memory(buffer, offset, length).ToArray()
        let ms = MemoryStream()
        let compressedStream = ZLibStream(ms, CompressionLevel.Fastest)
        let stream = MemoryStream(buffer, offset, length)
        let s = System.Diagnostics.Stopwatch.StartNew()
        stream.CopyTo(compressedStream)
        s.Stop()
        compressedStream.Close()
        let bytes = ms.ToArray()
        compressedStream.Dispose()
        ms.Dispose()
        stream.Dispose()
        printLine(s.Elapsed.TotalMilliseconds)
        printLine("size: " + bytes.Length.ToString())
        bytes

    Decompress(buffer: mutable byte[], offset: int32, length: int32): mutable byte[] =
//        Memory(buffer, offset, length).ToArray()
        let ms = MemoryStream(buffer, offset, length)
        let decompressedStream = ZLibStream(ms, CompressionMode.Decompress)
        let stream = MemoryStream()
        decompressedStream.CopyTo(stream)
        let bytes = stream.ToArray()
        decompressedStream.Dispose()
        ms.Dispose()
        stream.Dispose()
        bytes

class NetworkInvalidSequenceException =
    inherits Exception

class NetworkInvalidFragmentException =
    inherits Exception

#[null]
internal class PacketEntry =
    public field Hash: HashSet<int32>
    public field Buffer: mutable byte[]

    new(buffer: mutable byte[]) =
        {
            Hash = HashSet()
            Buffer = buffer
        }

internal class SequenceBuffer =
    field lookup: mutable uint16[] = Array.ZeroCreate(256)
    field entries: mutable PacketEntry[] = Array.ZeroCreate(256)

    TryGetValue(key: uint16, value: byref<PacketEntry>): bool =
        let index = int32(key) % 256
        let entry = this.entries[index]
        if (entry === null)
            false
        else
            let currentKey = this.lookup[index]
            if (currentKey != key)
                throw NetworkInvalidSequenceException()
            value <- this.entries[index]
            true

    set_Item(key: uint16, value: PacketEntry): () =
        let index = int32(key) % 256
        this.lookup[index] <- key
        this.entries[index] <- value

    Remove(key: uint16): () =
        let index = int32(key) % 256
        this.entries[index] <- null

internal class Defragmenter =
    field seqBuf: SequenceBuffer = SequenceBuffer()

    HandlePacket(mutable packet: ReadOnlySpan<byte>, callback: (ByteStream, channel: byte) -> ()): () =
        let headerSpan = packet.Slice(0, sizeof<PacketHeader>)
        let mutable dataSpan = packet.Slice(sizeof<PacketHeader>)

        let mutable headerSpan: ReadOnlySpan<PacketHeader> = MemoryMarshal.Cast<_, PacketHeader>(headerSpan)
        let header = headerSpan[0]

        if (header.FragmentIndex < 0 || header.FragmentCount <= 0)
            throw NetworkInvalidFragmentException()
        else if (header.FragmentCount == 1)
            let callbackData = Array.ZeroCreate(dataSpan.Length)
            dataSpan.CopyTo(Span(callbackData))
            let callbackData = DataCompression.Decompress(callbackData, 0, header.TotalDataSize)
            callback(ByteStream(callbackData, 0, callbackData.Length), 0)
        else    
            let mutable result = unchecked default
            if (!this.seqBuf.TryGetValue(header.SequenceId, &result))
                let reassembledData = Array.ZeroCreate<byte>(header.TotalDataSize)
                result <- PacketEntry(reassembledData)
                this.seqBuf[header.SequenceId] <- result

            let hashSet = result.Hash
            let reassembledData = result.Buffer
            if (hashSet.Add(header.FragmentIndex))
                let mutable reassembledDataSpan = Span(reassembledData)
                let lastIndex = header.TotalDataSize / NetworkPacket.MaxDataSize
                if (header.FragmentIndex == lastIndex)
                    let position = lastIndex * NetworkPacket.MaxDataSize
                    let remaining = header.TotalDataSize - position
                    let mutable dst = reassembledDataSpan.Slice(position)
                    dataSpan.Slice(0, dst.Length).CopyTo(dst)
                else
                    dataSpan.CopyTo(reassembledDataSpan.Slice(header.FragmentIndex * NetworkPacket.MaxDataSize))

            if (hashSet.Count == header.FragmentCount)
                let callbackData = DataCompression.Decompress(reassembledData, 0, header.TotalDataSize)
                callback(ByteStream(callbackData, 0, callbackData.Length), 0)
                let _ = this.seqBuf.Remove(header.SequenceId)
            else if (hashSet.Count > header.FragmentCount)
                throw NetworkInvalidFragmentException()

internal class Connection =
    public mutable field Time: float32 = 0
    public mutable field PacketFactory: PacketFactory = null

class NetworkServer =

    field receivingPacket: Packet
    field socket: Socket
    field connections: ConcurrentDictionary<EndPoint, Connection>
    mutable field onConnectionRequested: EndPoint -> bool
    mutable field onConnectionRefused: EndPoint -> ()
    mutable field onClientConnected: EndPoint -> ()
    mutable field onClientDisconnected: EndPoint -> ()
    mutable field onMessageReceived: (EndPoint, ByteStream, channel: byte) -> ()
    mutable field connectionKey: string 
    mutable field port: int32
    mutable field isStarted: bool
    field clientTimeout: float32

    private new(socket: Socket) = 
        { 
            socket = socket
            connections = ConcurrentDictionary()
            receivingPacket = Packet()
            onConnectionRequested = unchecked default
            onConnectionRefused = unchecked default
            onClientConnected = unchecked default
            onClientDisconnected = unchecked default
            onMessageReceived = unchecked default
            connectionKey = ""
            port = 0
            isStarted = false
            clientTimeout = 5 // seconds
            task = null
        }

    private SendPacket(packet: Packet, endPoint: EndPoint): () =
        let _ = this.socket.SendTo(packet.SendingSpan, SocketFlags.None, endPoint)

    private SendConnectionAccepted(endPoint: EndPoint): () =
        let mutable packet = Packet()

        let header = &packet.get_Header()
        header.Kind <- PacketKind.ConnectionAccepted
        header.SequenceId <- 0
        header.FragmentIndex <- 0
        header.FragmentCount <- 1
        header.TotalDataSize <- 0

        packet.DataSize <- 0

        this.SendPacket(packet, endPoint)

    private SendHeartbeat(endPoint: EndPoint): () =
        let mutable packet = Packet()

        let header = &packet.get_Header()
        header.Kind <- PacketKind.Heartbeat
        header.SequenceId <- 0
        header.FragmentIndex <- 0
        header.FragmentCount <- 1
        header.TotalDataSize <- 0

        packet.DataSize <- 0

        this.SendPacket(packet, endPoint)

    private Disconnect(endPoint: EndPoint): () =
        let mutable connection = unchecked default
        if (this.connections.TryRemove(endPoint, &connection))
            if (connection.PacketFactory !== null)
                this.onClientDisconnected(endPoint)

    static Create(): NetworkServer =
        let socket = Socket(SocketType.Dgram, ProtocolType.Udp)
        socket.Blocking <- false
        socket.ReceiveBufferSize <- Int32.MaxValue
        NetworkServer(socket)

    Start(
            mutable port: int32, 
            connectionKey: string,
            onConnectionRequested: EndPoint -> bool,
            onConnectionRefused: EndPoint -> (),
            onClientConnected: EndPoint -> (),
            onClientDisconnected: EndPoint -> (),
            onMessageReceived: (EndPoint, ByteStream, channel: byte) -> ()
        ): bool =
        if (this.isStarted)
            throw InvalidOperationException("Server already started.")

        this.isStarted <- true
        this.onConnectionRequested <- onConnectionRequested
        this.onConnectionRefused <- onConnectionRefused
        this.onClientConnected <- onClientConnected
        this.onClientDisconnected <- onClientDisconnected
        this.onMessageReceived <- onMessageReceived
        this.connectionKey <- connectionKey
        this.port <- port

        try
            // This prevents the server from receiving a socket exception when a client disconnects.
            // This is windows specific.
            let _ = this.socket.IOControl(/* SIO_UDP_CONNRESET */ -1744830452, mutable [0: byte;0;0;0], unchecked default)
            this.socket.Bind(IPEndPoint(IPAddress.Parse("127.0.0.1"), port))
            true
        catch (ex: Exception) =>
            false

    Stop(): () =
        if (!this.isStarted)
            throw InvalidOperationException("Server not started.")

        // TODO: Send messages to clients saying the server stopped.
        this.isStarted <- false

    mutable field task: System.Threading.Tasks.Task 
    SendToAll(buffer: mutable byte[], offset: int32, length: int32): () =
        if (!this.isStarted)
            throw InvalidOperationException("Server not started.")

        if (this.task !== null)
            this.task.Wait()
            
        let msgPayload = ReadOnlyMemory(DataCompression.Compress(buffer, offset, length))
        ForEach(this.connections,
            (mutable pair) ->
                let connection = pair.Value
                let packetFactory = connection.PacketFactory
                if (packetFactory !== null)
                    let endPoint = pair.Key
                    let packets = packetFactory.CreatePackets(PacketKind.UnreliableSequenced, msgPayload)
                    let mutable i = 0
                    while (i < packets.Length)
                        let packet = packets[i]
                       // let packet = DataCrypto.Encrypt(packet)
                        let _ = this.socket.SendTo(packet.SendingSpan, SocketFlags.None, endPoint)
                        i <- i + 1
        )
        
    Heartbeat(deltaTime: float32): () =
        if (!this.isStarted)
            throw InvalidOperationException("Server not started.")

        ForEach(this.connections,
            (mutable pair) ->
                let endPoint = pair.Key
                let connection = pair.Value
                if (connection.Time >= this.clientTimeout)
                    this.Disconnect(endPoint)
                else
                    connection.Time <- connection.Time + deltaTime
                    if (connection.PacketFactory !== null)
                        this.SendHeartbeat(endPoint)
                    else
                        this.SendConnectionAccepted(endPoint)
        )

        let mutable packet = this.receivingPacket
        while (this.socket.Available > 0)
            let mutable endPoint = IPEndPoint(IPAddress.Any, 0): EndPoint
            let mutable connection = unchecked default
            try
                let packetLength = this.socket.ReceiveFrom(packet.ReceivingSpan, SocketFlags.None, &endPoint)
                packet.DataSize <- packetLength - sizeof<PacketHeader>

                let packetKind = this.receivingPacket.Header.Kind
                
                if (this.connections.TryGetValue(endPoint, &connection))
                    let packetFactory = connection.PacketFactory
                    if (packetFactory !== null)
                        match (packetKind)
                        | PacketKind.Heartbeat =>
                            connection.Time <- 0
                        | PacketKind.ConnectionRequested =>
                            ()
                        | _ =>
                            ()
                            // TODO: Client message
                    else
                        match (packetKind)
                        | PacketKind.Heartbeat =>
                            connection.PacketFactory <- PacketFactory()
                            connection.Time <- 0

                            this.SendHeartbeat(endPoint)
                            this.onClientConnected(endPoint)

                        | PacketKind.ConnectionRequested =>
                            ()
                        | _ =>
                            let _ = this.connections.TryRemove(endPoint, &connection)
                else
                    match (packetKind)
                    | PacketKind.ConnectionRequested =>
                        let connectionKey = packet.DataString
                        if (connectionKey == this.connectionKey && this.onConnectionRequested(endPoint))
                            this.connections[endPoint] <- Connection()
                            let bytes = System.Text.Encoding.Default.GetBytes(this.connectionKey)
                            let _ = this.socket.SendTo(bytes, 0, bytes.Length, SocketFlags.None, endPoint)
                            this.SendConnectionAccepted(endPoint)
                        else
                            this.onConnectionRefused(endPoint)
                    | _ =>
                        this.onConnectionRefused(endPoint)

            catch (ex: Exception) =>
                this.Disconnect(endPoint)

class NetworkClient =

    field receivingPacket: Packet
    field socket: Socket
    field defrag: Defragmenter
    mutable field onConnectionRequested: () -> ()
    mutable field onConnectionFailed: () -> ()
    mutable field onConnected: () -> ()
    mutable field onDisconnected: () -> ()
    mutable field onMessageReceived: (ByteStream, channel: byte) -> ()
    mutable field connectionKey: string 
    mutable field port: int32
    mutable field isConnected: bool
    mutable field isStarted: bool
    mutable field remoteEndPoint: EndPoint

    private new(socket: Socket) = 
        { 
            receivingPacket = Packet()
            socket = socket
            defrag = Defragmenter()
            onConnectionRequested = unchecked default
            onConnectionFailed = unchecked default
            onConnected = unchecked default
            onDisconnected = unchecked default
            onMessageReceived = unchecked default
            connectionKey = ""
            port = 0
            isConnected = false
            isStarted = false
            remoteEndPoint = null
        }

    private SendPacket(packet: Packet): () =
        let _ = this.socket.SendTo(packet.SendingSpan, SocketFlags.None, this.remoteEndPoint)

    private SendConnectionRequested(): () =
        let mutable msgPayload = ReadOnlySpan(System.Text.Encoding.Default.GetBytes(this.connectionKey))
        let msgPayloadLength = msgPayload.Length

        let mutable packet = Packet()

        let header = &packet.get_Header()
        header.Kind <- PacketKind.ConnectionRequested
        header.SequenceId <- 0
        header.FragmentIndex <- 0
        header.FragmentCount <- 1
        header.TotalDataSize <- msgPayloadLength

        packet.DataSize <- msgPayloadLength
        msgPayload.CopyTo(packet.DataSpan)

        this.SendPacket(packet)

    private SendHeartbeat(): () =
        let mutable packet = Packet()

        let header = &packet.get_Header()
        header.Kind <- PacketKind.Heartbeat
        header.SequenceId <- 0
        header.FragmentIndex <- 0
        header.FragmentCount <- 1
        header.TotalDataSize <- 0

        packet.DataSize <- 0

        this.SendPacket(packet)

    static Create(): NetworkClient =
        let socket = Socket(SocketType.Dgram, ProtocolType.Udp)
        socket.Blocking <- false
        socket.ReceiveBufferSize <- Int32.MaxValue
        NetworkClient(socket)

    Start(
            onConnectionRequested: () -> (),
            onConnectionFailed: () -> (),
            onConnected: () -> (),
            onDisconnected: () -> (),
            onMessageReceived: (ByteStream, channel: byte) -> ()
        ): () =
        if (this.isStarted)
            throw InvalidOperationException("Client already started.")

        this.onConnectionRequested <- onConnectionRequested
        this.onConnectionFailed <- onConnectionFailed
        this.onConnected <- onConnected
        this.onDisconnected <- onDisconnected
        this.onMessageReceived <- onMessageReceived
        this.isStarted <- true

    Connect(ipOrHostName: string, port: int32, connectionKey: string): () =
        if (!this.isStarted)
            throw InvalidOperationException("Client not started.")
        if (this.isConnected)
            throw InvalidOperationException("Client already connected.")

        this.connectionKey <- connectionKey
        this.port <- port

        let ipOrHostName =
            if (ipOrHostName == "localhost")
                "127.0.0.1"
            else
                ipOrHostName
        this.remoteEndPoint <- IPEndPoint(IPAddress.Parse(ipOrHostName), port)
        this.SendConnectionRequested()
        this.onConnectionRequested()

    Heartbeat(deltaTime: float32): () =
        if (!this.isStarted)
            throw InvalidOperationException("Client not started.")

        if (this.isConnected)
            this.SendHeartbeat()
        else
            this.SendConnectionRequested()

        let mutable packet = this.receivingPacket
        while (this.socket.Available > 0)
            let mutable endPoint = IPEndPoint(IPAddress.Any, this.port): EndPoint

            let packetLength = this.socket.ReceiveFrom(packet.ReceivingSpan, SocketFlags.None, &endPoint)
            packet.DataSize <- packetLength - sizeof<PacketHeader>

            let packetKind = this.receivingPacket.Header.Kind
            
            if (this.isConnected)
                match (packetKind)
                | PacketKind.Heartbeat =>
                    ()
                | PacketKind.UnreliableSequenced =>
                    this.defrag.HandlePacket(packet.SendingSpan, this.onMessageReceived)
                | PacketKind.ConnectionAccepted =>
                    ()
                | _ =>
                    ()
            else
                match (packetKind)
                | PacketKind.ConnectionAccepted =>
                    this.SendHeartbeat()
                    this.isConnected <- true
                    this.onConnected()
                | PacketKind.Heartbeat =>
                    ()
                | _ =>
                    ()

    Disconnect(): () =
        if (!this.isStarted)
            throw InvalidOperationException("Client not started.")
        if (!this.isConnected)
            throw InvalidOperationException("Client not connected.")

        // TODO: Send msg to server saying we are going to disconnect.
        this.isConnected <- false

    Stop(): () =
        if (!this.isStarted)
            throw InvalidOperationException("Client not started.")
        if (this.isConnected)
            this.Disconnect()

        this.isStarted <- false
    
