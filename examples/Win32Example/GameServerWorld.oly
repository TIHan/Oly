module Game.Server.World

open System
open System.Text
open System.Collections.Generic
open System.Collections.Concurrent
open Evergreen.Collections
open Evergreen.Graphics
open Evergreen.Physics
open System.Runtime.InteropServices
open static Game.Types
open static Game.Components
open static Game.World
open static Game.Server.Types
open static Game.Server.Components

private alias Array = OlyPrelude.Array
private alias Mesh = Game.Types.Mesh

module WorldEvent =

    PlayerInputUpdated(entId: EntityId, playerInput: PlayerInput, bstream: ByteStream): () =
        bstream.Write<byte>(1)
        bstream.Write<EntityId>(entId)
        bstream.Write<PlayerInput>(playerInput)

    pattern PlayerInputUpdated(bstream: ByteStream): (entId: EntityId, playerInput: PlayerInput) when (bstream.Peek<byte>() == 1) =>
        bstream.Seek(bstream.Position + 1)
        (bstream.Read(), bstream.Read())

class ServerWorld =
    inherits SharedWorld

    static SetupComponents(world: World): () =
        SharedWorld.SetupComponents(world)

        let db = world.Database

        db.Register<PlayerInput>()
        db.Register<PhysicsDynamic>()
        db.Register<StaticObjectId>()
        db.Register<DynamicObjectId>()

        db.RegisterAttachment<PhysicsDynamic, DynamicObjectId>()
        db.RegisterAttachment<PhysicsCharacter, DynamicObjectId>()
        db.RegisterAttachment<PhysicsStatic, StaticObjectId>()

    field DestroyEntityQueue: ConcurrentQueue<EntityId>
    field EventStream: ByteStream

    new() =
        {
            DestroyEntityQueue = ConcurrentQueue()
            EventStream = ByteStream()
        }

    private Flush(): () =
        let mutable entId = default
        while (this.DestroyEntityQueue.TryDequeue(&entId))
            this.Database.Delete(entId)

    GetReplicatingEvents(prevWorld: World): EntityDatabase.Events =
        this.Database.GetReplicatingEvents(prevWorld.Database)

    Update(Δ: float32): () =
        this.Flush()

        let physics = this.Physics

        physics.Update(Δ)

        this.Database.ParallelForEach<Transform, PhysicsDynamic, DynamicObjectId>(
            (entId, transform, phys, physObjId) ->
                let mutable position = vec3.Zero
                let mutable orientation = quat.Identity
                physics.GetPositionAndOrientationAndVelocity(physObjId, &position, &orientation, &phys.LinearVelocity, &phys.AngularVelocity)
                transform <- Transform.Create(position, orientation, transform.Scale)
        )

        this.Database.ParallelForEach<Transform, PhysicsCharacter, DynamicObjectId>(
            (entId, transform, phys, physObjId) ->
                let mutable position = vec3.Zero
                let mutable orientation = quat.Identity
                physics.GetPositionAndOrientation(physObjId, &position, &orientation)
                transform <- Transform.Create(position, orientation, transform.Scale)
        )

    SpawnPlayer(position: vec3): () =
      //  let character = this.Physics.AddCharacter(position, quat.Identity, 0.5, 1, 1)
        let transform = Transform.Create(position, quat.Identity, vec3.One)
        let mutable camera = Camera(70, 1280, 720, 0.1, 1000000)
        camera.Transform.Position <- position

        let entId = this.Database.Create(PlayerInput(), transform, camera)
        
    Destroy(entId: EntityId): () =
        this.DestroyEntityQueue.Enqueue(entId)

    ForEachPlayer(f: (EntityId, playerInput: byref<PlayerInput>, transform: byref<Transform>, camera: byref<Camera>) -> ()): () =
        this.Flush()

        this.Database.ForEach<PlayerInput, Transform, Camera>(
            (entId, playerInput, transform, camera) -> 
                f(entId, &playerInput, &transform, &camera)
        )

        this.Flush()

    AddPlayerInput(entId: EntityId, playerInput: PlayerInput): () =
        this.Database.AddOrUpdate<PlayerInput>(entId, playerInput)

    SpawnCube(position: vec3, rotation: quat, scale: vec3): () =
        if (this.CanSpawnEntity)
            let mutable mesh = Mesh()
            mesh.Kind <- MeshKind.Cube

            let transform = Transform.Create(position, rotation, scale)
            let material = Material(0)

            let _ = this.Database.Create(PhysicsDynamic(), mesh, transform, material)

    SpawnStaticCube(position: vec3, rotation: quat, scale: vec3): () =
        if (this.CanSpawnEntity)
            let mutable mesh = Mesh()
            mesh.Kind <- MeshKind.Cube

            let transform = Transform.Create(position, rotation, scale)
            let material = Material(0)

            let _ = this.Database.Create(PhysicsStatic(), mesh, transform, material)

    ForEachBox(f: (EntityId, transform: Transform, material: Material) -> ()): () =
        this.Flush()

        this.Database.ForEach<Mesh, Transform, Material>(
            (entId, mesh, transform, material) -> 
                if (mesh.Kind == MeshKind.Cube)
                    f(entId, transform, material)
        )

        this.Flush()

    protected overrides OnEntitySpawned(entId: EntityId): () =
        let physics = this.Physics
        let _ =
            this.Database.TryGet<PhysicsDynamic, DynamicObjectId, Transform, Mesh>(entId,
                (phys, physObjId, transform, mesh) ->
                    if (mesh.Kind == MeshKind.Cube)
                        physObjId <- physics.AddBox(transform.Position, transform.Rotation, transform.Scale)
                        physics.SetVelocity(physObjId, phys.LinearVelocity, phys.AngularVelocity)
                    else
                        throw NotSupportedException("mesh kind")
            )

        let _ =
            this.Database.TryGet<PhysicsCharacter, DynamicObjectId, Transform>(entId,
                (phys, physObjId, transform) ->
                    physObjId <- physics.AddCharacter(transform.Position, transform.Rotation, 1, 1, 1)
            )

        let _ =
            this.Database.TryGet<PhysicsStatic, StaticObjectId, Transform, Mesh>(entId,
                (phys, physObjId, transform, mesh) ->
                    if (mesh.Kind == MeshKind.Cube)
                        physObjId <- physics.AddStaticBox(transform.Position, transform.Rotation, transform.Scale)
                    else
                        throw NotSupportedException("mesh kind")
            )

    protected overrides OnEntityDestroying(entId: EntityId): () =
        let _ =
            this.Database.TryGet<DynamicObjectId>(entId,
                physObjId ->
                    this.Physics.RemoveBox(physObjId)
            )

        let _ =
            this.Database.TryGet<StaticObjectId>(entId,
                physObjId ->
                    this.Physics.RemoveStaticBox(physObjId)
            )
