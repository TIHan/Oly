module GameLoop

open System
open System.Diagnostics

private alias Array = OlyPrelude.Array

ConvertSecondsToTicks(seconds: float64): int64 = TimeSpan.FromSeconds(seconds).Ticks
ConvertTicksToSeconds(ticks: int64): float64 = TimeSpan.FromTicks(ticks).TotalSeconds
ConvertFramesPerSecondToSeconds(fps: float64): float64 = (1000 / fps) * 0.001
ConvertFramesPerSecondToTicks(fps: float64): int64 = ConvertSecondsToTicks(ConvertFramesPerSecondToSeconds(fps))

ConvertTicksToTickRate(ticks: int64): int64 =
    int64((float64(1000) / TimeSpan.FromTicks(ticks).TotalMilliseconds))

FixedUpdateDeltaTime: int64 get = ConvertFramesPerSecondToTicks(30)
FixedUpdateDeltaTimeInSeconds: float64 get = ConvertTicksToSeconds(FixedUpdateDeltaTime)

#[inline] 
Start(#[inline] preUpdate: float64 -> (), #[inline] fixedUpdate: () -> bool, #[inline] render: (frameTime: TimeSpan, float64) -> ()): () =
    let mutable quit = false
    let stopwatch = Stopwatch.StartNew()
    let getTicks() = stopwatch.Elapsed.Ticks

    let skip = ConvertFramesPerSecondToTicks(1)

    let mutable currentTime = getTicks()
    let mutable accumulator = FixedUpdateDeltaTime: int64

    while (!quit)
        let newTime = getTicks()
        let frameTime = newTime - currentTime
        currentTime <- newTime

        // pre-update
        preUpdate(ConvertTicksToSeconds(frameTime))

        // fixed-update
        accumulator <- 
            if (frameTime > (FixedUpdateDeltaTime * 2))
                FixedUpdateDeltaTime
            else
                accumulator + frameTime
        while (accumulator >= FixedUpdateDeltaTime)
            quit <- fixedUpdate()
            accumulator <- accumulator - FixedUpdateDeltaTime

        // render
        let alpha = System.Math.Clamp(float64(accumulator) / float64(FixedUpdateDeltaTime), 0, 1)
        render(TimeSpan.FromTicks(frameTime), alpha)