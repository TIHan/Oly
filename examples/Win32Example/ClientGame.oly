module ClientGame

open System
open System.Text
open System.Collections.Generic
open System.Collections.Concurrent
open Evergreen.Collections
open Evergreen.Graphics
open Evergreen.Physics
open System.Runtime.InteropServices
open Evergreen.Graphics.Rendering
open static Game.Core

private alias Array = OlyPrelude.Array

struct CameraLerp =
    public mutable field Camera: Camera = default

struct TransformLerp =
    public mutable field Transform: Transform = default

// Components

#[open]
extension CameraLerpComponent =
    inherits CameraLerp
    implements IComponent

    static overrides GetTypeId(): TypeId = 1 << 47

    static overrides GetSize(): int32 = sizeof<CameraLerp>

#[open]
extension TransformLerpComponent =
    inherits TransformLerp
    implements IComponent

    static overrides GetTypeId(): TypeId = 1 << 48

    static overrides GetSize(): int32 = sizeof<TransformLerp>

class ClientWorld =
    inherits SharedWorld
    
    Render_Box: GpuMutableArray<mat4> get

    new(renderBox: GpuMutableArray<mat4>) =
        {
            Render_Box = renderBox
        }

    overrides Initialize(): () =
        base.Initialize()

        this.Database.Register<CameraLerp>()
        this.Database.RegisterDependency<Camera, CameraLerp>()

        this.Database.Register<TransformLerp>()
        this.Database.RegisterDependency<Transform, TransformLerp>()
    
    Update(alpha: float32): () =
        let mutable boxCount = 0

        let mutable boxRenders = this.Render_Box.AsMemory()
        this.Database.ForEachSpan<BoxTag, TransformLerp, Transform>(
            (mutable entIds, tags, mutable transformLerps, mutable transforms) ->
                let length = entIds.Length
                let mutable boxRenders = boxRenders.Span
                let mutable i = 0
                while (i < length)
                    (boxRenders[i]) <- mat4.Lerp(transformLerps[i].Transform.Matrix, transforms[i].Matrix, alpha)
                    i <- i + 1
                boxCount <- boxCount + length
        )

        this.Render_Box.SyncOffset <- 0
        this.Render_Box.SyncLength <- boxCount

    ForEachBox(f: (Box, transformLerp: byref<Transform>, transform: inref<Transform>) -> ()): () =
        this.Database.ForEach<BoxTag, TransformLerp, Transform>(
            (entId, tag, transformLerp, transform) ->
                f(Box(entId), &transformLerp.Transform, &transform)
        )

    ForEachPlayer(f: (Player, transform: inref<Transform>, cameraLerp: byref<Camera>, camera: byref<Camera>) -> ()): () =
        this.Database.ForEach<PlayerTag, Transform, CameraLerp, Camera>(
            (entId, tag, transform, cameraLerp, camera) ->
                f(Player(entId), &transform, &cameraLerp.Camera, &camera)
        )

    protected overrides OnEntitySpawned(mutable entId: EntityId): () =
        if (this.Database.HasComponent<Transform>(entId))
            let transform = &this.Database.GetComponent<Transform>(entId)
            let transformLerp = &this.Database.GetComponent<TransformLerp>(entId)
            transformLerp.Transform <- transform

        if (this.Database.HasComponent<Camera>(entId))
            let camera = &this.Database.GetComponent<Camera>(entId)
            let cameraLerp = &this.Database.GetComponent<CameraLerp>(entId)
            cameraLerp.Camera <- camera

    protected overrides OnEntityDestroying(entId: EntityId): () =
        ()
