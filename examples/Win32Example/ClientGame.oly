module ClientGame

open System
open System.Text
open System.Collections.Generic
open System.Collections.Concurrent
open Evergreen.Collections
open Evergreen.Graphics
open Evergreen.Physics
open System.Runtime.InteropServices
open Evergreen.Graphics.Rendering
open static Game.Core

private alias Array = OlyPrelude.Array

struct CameraLerp =
    public mutable field Camera: Camera = default

// Components

#[open]
extension CameraLerpComponent =
    inherits CameraLerp
    implements IComponent

    static overrides GetTypeId(): TypeId = 1 << 47

    static overrides GetSize(): int32 = sizeof<CameraLerp>

class ClientWorld =
    inherits SharedWorld
    
    Render_Box: GpuMutableArray<mat4> get

    BoxCount: int32 get, set

    new(renderBox: GpuMutableArray<mat4>) =
        {
            Render_Box = renderBox
            BoxCount = 0
        }

    overrides Initialize(): () =
        base.Initialize()
        this.Database.Register<CameraLerp>()
        this.Database.RegisterDependency<Camera, CameraLerp>()
    
    Update(alpha: float32): () =
        ()
        // let boxCount = this.BoxCount
        // let mutable transforms = Span(this.Shared_Box.Buffer0, 0, boxCount)
        // let mutable transformLerps = Span(this.Client_Box_TransformLerp, 0, boxCount)

        // let mutable transformRenders = this.Render_Box.AsSpan()

        // let mutable i = 0
        // while (i < boxCount)
        //     (transformRenders[i]) <- mat4.Lerp(transformLerps[i].Matrix, transforms[i].Matrix, alpha)
        //     i <- i + 1

        // this.Render_Box.SyncOffset <- 0
        // this.Render_Box.SyncLength <- boxCount

    ForEachBox(f: (Box, transformLerp: byref<Transform>, transform: inref<Transform>, material: Material, renderId: int32) -> ()): () =
        ()
        // let count = this.Shared_Box.Count
        // let entIds = this.Shared_Box.EntityIds

        // let transforms = this.Shared_Box.Buffer0
        // let materials = this.Shared_Box.Buffer1
        // let renderIds = this.Client_Box_RenderId
        // let transformLerps = this.Client_Box_TransformLerp

        // let mutable i = 0
        // while (i < count)
        //     f(Box(entIds[i]), &transformLerps[i], &transforms[i], materials[i], renderIds[i])
        //     i <- i + 1

    ForEachPlayer(f: (Player, transform: inref<Transform>, cameraLerp: byref<Camera>, camera: byref<Camera>) -> ()): () =
        this.Database.ForEach<PlayerTag, Transform, CameraLerp, Camera>(
            (entId, tag, transform, cameraLerp, camera) ->
                f(Player(entId), &transform, &cameraLerp.Camera, &camera)
        )
        ()
        // let count = this.Shared_Player.Count
        // let entIds = this.Shared_Player.EntityIds
            
        // let transforms = this.Shared_Player.Buffer0
        // let cameras = this.Shared_Player.Buffer1
        // let cameraLerps = this.Client_Player_CameraLerp

        // let mutable i = 0
        // while (i < count)
        //     f(Player(entIds[i]), &transforms[i], &cameraLerps[i], &cameras[i])
        //     i <- i + 1

    protected overrides OnEntitySpawned(entId: EntityId): () =
        if (this.Database.HasComponent<Camera>(entId))
            let camera = &this.Database.GetComponent<Camera>(entId)
            let cameraLerp = &this.Database.GetComponent<CameraLerp>(entId)
            cameraLerp.Camera <- camera
            printLine(camera.Transform.Matrix)
            printLine(cameraLerp.Camera.Transform.Matrix)

    protected overrides OnEntityDestroying(entId: EntityId): () =
        ()

    // protected overrides OnBoxAdding(index: int32, entId: EntityId, transform: Transform, material: Material): () =
    //     this.Client_Box_RenderId[index] <- material.Id
    //     this.Client_Box_TransformLerp[index] <- transform

    // protected overrides OnBoxRemoving(index: int32, swapIndex: int32): () =
    //     this.Client_Box_RenderId[index] <- this.Client_Box_RenderId[swapIndex]
    //     this.Client_Box_TransformLerp[index] <- this.Client_Box_TransformLerp[swapIndex]

    // protected overrides OnPlayerAdding(index: int32, entId: EntityId, transform: Transform, camera: Camera): () =
    //     this.Client_Player_CameraLerp[index] <- camera

    // protected overrides OnPlayerRemoving(index: int32, swapIndex: int32): () =
    //     this.Client_Player_CameraLerp[index] <- this.Client_Player_CameraLerp[swapIndex]