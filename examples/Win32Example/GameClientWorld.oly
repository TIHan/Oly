module Game.Client.World

open System
open System.Text
open System.Collections.Generic
open System.Collections.Concurrent
open Evergreen.Collections
open Evergreen.Graphics
open Evergreen.Physics
open System.Runtime.InteropServices
open Evergreen.Graphics.Rendering
open static Game.Types
open static Game.Components
open static Game.World
open static Game.Client.Types
open static Game.Client.Components

private alias Array = OlyPrelude.Array
private alias Mesh = Game.Types.Mesh

class ClientWorld =
    inherits SharedWorld
    
    Render_Box: GpuMutableArray<mat4> get

    new(renderBox: GpuMutableArray<mat4>) =
        {
            Render_Box = renderBox
        }

    static SetupComponents(world: World): () =
        SharedWorld.SetupComponents(world)

        let db = world.Database

        db.Register<PlayerInput>()

        db.Register<CameraLerp>()
        db.RegisterAttachment<Camera, CameraLerp>()

        db.Register<TransformLerp>()
        db.RegisterAttachment<Transform, TransformLerp>()

    FixedUpdate(deltaTime: float32): () =
        this.Database.ForEach<TransformLerp, Transform>(
            (entId, transformLerp, transform) ->
                transformLerp <- TransformLerp(transform)
        )

        this.Database.ForEach<CameraLerp, Camera>(
            (entId, cameraLerp, camera) ->
                cameraLerp <- CameraLerp(camera)
        )

    LateFixedUpdate(deltaTime: float32): () =
        ()

    Update(deltaTime: float32): () =
        ()
    
    LateUpdate(deltaTime: float32, alpha: float32): () =
        let mutable boxRenders = this.Render_Box.AsMemory()
        let mutable boxCount = 0

        this.Database.ForEachSpan<Mesh, TransformLerp, Transform>(
            (mutable entIds, mutable meshes, mutable transformLerps, mutable transforms) ->
                let length = entIds.Length
                let mutable boxRenders = boxRenders.Span
                let mutable i = 0
                while (i < length)
                    let mesh = meshes[i]
                    if (mesh.Kind == MeshKind.Cube)
                        (boxRenders[boxCount + i]) <- mat4.Lerp(transformLerps[i].Value.Matrix, transforms[i].Matrix, alpha)
                    i <- i + 1
                boxCount <- boxCount + length
        )

        this.Render_Box.SyncOffset <- 0
        this.Render_Box.SyncLength <- boxCount

    ForEachPlayer(f: (EntityId, playerInput: byref<PlayerInput>, transformLerp: byref<Transform>, transform: byref<Transform>, cameraLerp: byref<Camera>, camera: byref<Camera>) -> ()): () =
        this.Database.ForEach<PlayerInput, TransformLerp, Transform, CameraLerp, Camera>(
            (entId, playerInput, transformLerp, transform, cameraLerp, camera) ->
                f(entId, &playerInput, &Unsafe.AsByRef(&transformLerp), &transform, &Unsafe.AsByRef(&cameraLerp), &camera)
        )

    protected overrides OnEntitySpawned(mutable entId: EntityId): () =
        let _ =
            this.Database.TryGet<Transform, TransformLerp>(entId,
                (transform, transformLerp) ->
                    transformLerp <- TransformLerp(transform)
            )

        let _ =
            this.Database.TryGet<Camera, CameraLerp>(entId,
                (camera, cameraLerp) ->
                    cameraLerp <- CameraLerp(camera)
            )

    protected overrides OnEntityDestroying(entId: EntityId): () =
        ()
