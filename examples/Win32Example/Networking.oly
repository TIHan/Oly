namespace Evergreen.Networking

open LiteNetLib
open LiteNetLib.Layers
open LiteNetLib.Utils

internal class OnConnectionRequestDelegate =

    field f: ConnectionRequest -> ()
    new(f: ConnectionRequest -> ()) =
        {
            f = f
        }

    Invoke(request: ConnectionRequest): () =
        this.f(request)


// module Helpers =

//     class Delegate<TArg0, TReturn> =
//         field f: TArg0 -> TReturn
//         new(f: TArg0 -> TReturn) = { f = f }

//         Invoke(arg0: TArg0): TReturn =
//             this.f(arg0)

//     CreateDelegate<T, TArg0, TReturn>(f: TArg0 -> TReturn): T where T: { new(object, nint); Invoke(TArg0): TReturn } =
//         let del = Delegate(f)
//         let result: T = Unsafe.Cast(T(del, nint(&&del.Invoke)))
//         result

        

class Server =

    field listener: EventBasedNetListener
    field server: NetManager

    private new(listener: EventBasedNetListener, server: NetManager) =
        {
            listener = listener
            server = server
        }

    static Create(): Server =
        let listener = EventBasedNetListener()
        let server = NetManager(listener, null)
        Server(listener, server)

    Start(mutable port: int32, connectionKey: string): () =
        if (!this.server.Start(port))
            fail("Unable to start server at port: " + port.ToString())

        let onConnectionRequest = 
            OnConnectionRequestDelegate(
                (request: ConnectionRequest) ->
                    printLine("connection requested")
                    if (this.server.ConnectedPeersCount < 10)
                        let _ = request.AcceptIfKey(connectionKey)
                    else
                        request.Reject()
            )
        let onConnectionRequest = EventBasedNetListener.OnConnectionRequest(onConnectionRequest, nint(&&onConnectionRequest.Invoke))
        this.listener.add_ConnectionRequestEvent(onConnectionRequest)

    PollEvents(): () =
        this.server.PollEvents()

    Stop(): () =
        this.server.Stop()

class Client =

    field listener: EventBasedNetListener
    field client: NetManager

    mutable field currentConnection: NetPeer

    private new(listener: EventBasedNetListener, client: NetManager) =
        {
            listener = listener
            client = client
            currentConnection = null
        }

    static Create(): Client =
        let listener = EventBasedNetListener()
        let client = NetManager(listener, null)
        Client(listener, client)

    Start(): () =
        if (!this.client.Start())
            fail("Unable to start client.")

    Connect(ipOrHostName: string, port: int32, connectionKey: string): () =
        this.currentConnection <- this.client.Connect(ipOrHostName, port, connectionKey)
        let x = this.currentConnection.ConnectionState
        printLine(x)

    PollEvents(): () =
        this.client.PollEvents()

    Disconnect(): () =
        this.client.DisconnectAll()

    Stop(): () =
        this.client.Stop()
        
        

    // EventBasedNetListener listener = new EventBasedNetListener();
    //     NetManager client = new NetManager(listener);
    //     client.Start();
    //     client.Connect("localhost" /* host ip or name */, 9050 /* port */, "SomeConnectionKey" /* text key or NetDataWriter */);
    //     listener.NetworkReceiveEvent += (fromPeer, dataReader, deliveryMethod, channel) =>
    //     {
    //         Console.WriteLine("We got: {0}", dataReader.GetString(100 /* max length of string */));
    //         dataReader.Recycle();
    //     };
        
    //     while (!Console.KeyAvailable)
    //     {
    //         client.PollEvents();
    //         Thread.Sleep(15);
    //     }
        
    //     client.Stop();

// EventBasedNetListener listener = new EventBasedNetListener();
//     NetManager server = new NetManager(listener);
//     server.Start(9050 /* port */);
    
//     listener.ConnectionRequestEvent += request =>
//     {
//         if(server.ConnectedPeersCount < 10 /* max connections */)
//             request.AcceptIfKey("SomeConnectionKey");
//         else
//             request.Reject();
//     };
    
//     listener.PeerConnectedEvent += peer =>
//     {
//         Console.WriteLine("We got connection: {0}", peer.EndPoint); // Show peer ip
//         NetDataWriter writer = new NetDataWriter();                 // Create writer class
//         writer.Put("Hello client!");                                // Put some string
//         peer.Send(writer, DeliveryMethod.ReliableOrdered);             // Send with reliability
//     };
    
//     while (!Console.KeyAvailable)
//     {
//         server.PollEvents();
//         Thread.Sleep(15);
//     }
//     server.Stop();