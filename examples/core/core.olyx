#target "dotnet: netstandard2.1"
#library

#reference "prelude.olyx"

#[open]
module OlyCore

open System
open System.Numerics
open System.Diagnostics
open System.Runtime.InteropServices
open System.Runtime.CompilerServices
open System.Collections.Generic

// Math

alias vec2 = Vector2
alias vec3 = Vector3
alias vec4 = Vector4

#[open]
extension Vector3Extensions =
    inherits Vector3

    static Forward: vec3 get() = -vec3.UnitZ
    static Back: vec3 get() = vec3.UnitZ
    static Left: vec3 get() = -vec3.UnitX
    static Right: vec3 get() = vec3.UnitX

(*)(v1: vec3, v2: vec3): vec3 = vec3.Multiply(v1, v2)
(*)(v: vec3, s: float32): vec3 = vec3.Multiply(v, s)

alias quat = Quaternion

alias mat4 = Matrix4x4

// Collections

#[open]
extension MutableArrayExtensions<T> =
    inherits mutable T[]

    AsSpan(): Span<T> = Span(this)
    AsSpan(start: int32): Span<T> = Span(this, start, this.Length)
    AsSpan(start: int32, length: int32): Span<T> = Span(this, start, length)
    AsReadOnlySpan(): ReadOnlySpan<T> = ReadOnlySpan(this)
    AsReadOnlySpan(start: int32): ReadOnlySpan<T> = ReadOnlySpan(this, start, this.Length)
    AsReadOnlySpan(start: int32, length: int32): ReadOnlySpan<T> = ReadOnlySpan(this, start, length)

#[open]
extension MutableArrayCastExtensions<T> where T: struct, ValueType =
    inherits mutable T[]

    AsSpan<TCast>(): Span<TCast> where TCast: struct, ValueType = MemoryMarshal.Cast(Span(this))
    AsSpan<TCast>(start: int32): Span<TCast> where TCast: struct, ValueType = MemoryMarshal.Cast(Span(this))
    AsSpan<TCast>(start: int32, length: int32): Span<TCast> where TCast: struct, ValueType = MemoryMarshal.Cast(Span(this))
    AsReadOnlySpan<TCast>(): ReadOnlySpan<TCast> where TCast: struct, ValueType = MemoryMarshal.Cast(ReadOnlySpan(this))
    AsReadOnlySpan<TCast>(start: int32): ReadOnlySpan<TCast> where TCast: struct, ValueType = MemoryMarshal.Cast(ReadOnlySpan(this, start, this.Length))
    AsReadOnlySpan<TCast>(start: int32, length: int32): ReadOnlySpan<TCast> where TCast: struct, ValueType = MemoryMarshal.Cast(ReadOnlySpan(this, start, length))

#[open]
extension ArrayExtensions<T> =
    inherits T[]

    AsSpan(): ReadOnlySpan<T> = Unsafe.AsMutable(this).AsReadOnlySpan()
    AsSpan(start: int32): ReadOnlySpan<T> = Unsafe.AsMutable(this).AsReadOnlySpan(start)
    AsSpan(start: int32, length: int32): ReadOnlySpan<T> = Unsafe.AsMutable(this).AsReadOnlySpan(start, length)

#[open]
extension ArrayCastExtensions<T> where T: struct, ValueType =
    inherits T[]

    AsSpan<TCast>(): ReadOnlySpan<TCast> where TCast: struct, ValueType = Unsafe.AsMutable(this).AsReadOnlySpan<TCast>()
    AsSpan<TCast>(start: int32): ReadOnlySpan<TCast> where TCast: struct, ValueType = Unsafe.AsMutable(this).AsReadOnlySpan<TCast>(start)
    AsSpan<TCast>(start: int32, length: int32): ReadOnlySpan<TCast> where TCast: struct, ValueType = Unsafe.AsMutable(this).AsReadOnlySpan<TCast>(start, length)

#[inline]
For(count: int32, #[inline] f: int32 -> ()): () =
    let mutable i = 0
    while (i < count)
        f(i)
        i <- i + 1

#[inline]
ParallelFor(count: int32, #[inline] f: int32 -> ()): () =
    let options = System.Threading.Tasks.ParallelOptions()
    options.MaxDegreeOfParallelism <- Environment.ProcessorCount
    let _ =
        System.Threading.Tasks.Parallel.For(0, count, 
            (i, state) ->
                f(i)
        )

struct BitSet512 =
    mutable field value0: uint64
    mutable field value1: uint64 // 128
    mutable field value2: uint64
    mutable field value3: uint64 // 256
    mutable field value4: uint64
    mutable field value5: uint64
    mutable field value6: uint64
    mutable field value7: uint64 // 512
    new(value: uint64) =
        {
            value0 = value
            value1 = 0
            value2 = 0
            value3 = 0
            value4 = 0
            value5 = 0
            value6 = 0
            value7 = 0
        }

    new(value0: uint64, value1: uint64, value2: uint64, value3: uint64, value4: uint64, value5: uint64, value6: uint64, value7: uint64) =
        {
            value0 = value0
            value1 = value1
            value2 = value2
            value3 = value3
            value4 = value4
            value5 = value5
            value6 = value6
            value7 = value7
        }

    #[inline(always)]
    private mutable Get(index: int32): byref<uint64> =
        match (index / 64)
        | 0 => &this.value0
        | 1 => &this.value1
        | 2 => &this.value2
        | 3 => &this.value3
        | 4 => &this.value4
        | 5 => &this.value5
        | 6 => &this.value6
        | 7 => &this.value7
        | _ => 
            fail("should not happen")
            &this.value0

    static field CachedIndices: BitSet512[] =
        OlyPrelude.Array.Initialize(512,
            i -> FromIndexCore(i)
        )

    private static FromIndexCore(index: int32): BitSet512 =
        if (index < 0 || index >= 512)
            throw IndexOutOfRangeException()
        
        let mutable bitSet = default: BitSet512
        let value = &bitSet.Get(index)

        let bitIndex = index % 64
        value <- ((1: uint64) << bitIndex)
        bitSet

    #[inline(always)]
    static FromIndex(index: int32): BitSet512 = CachedIndices[index]

    #[inline(always)]
    IsSupersetOf(bitSet: BitSet512): bool =
        let bits0 = bitSet.value0
        let bits1 = bitSet.value1
        let bits2 = bitSet.value2
        let bits3 = bitSet.value3
        let bits4 = bitSet.value4
        let bits5 = bitSet.value5
        let bits6 = bitSet.value6
        let bits7 = bitSet.value7
        (this.value0 & bits0 == bits0) && 
            (this.value1 & bits1 == bits1) && 
                (this.value2 & bits2 == bits2) && 
                    (this.value3 & bits3 == bits3) && 
                        (this.value4 & bits4 == bits4) && 
                            (this.value5 & bits5 == bits5) && 
                                (this.value6 & bits6 == bits6) && 
                                    (this.value7 & bits7 == bits7)

    IsZero: bool 
        #[inline(always)]
        get() = this.value0 == 0 && this.value1 == 0 && this.value2 == 0 && this.value3 == 0 && this.value4 == 0 && this.value5 == 0 && this.value6 == 0 && this.value7 == 0

    #[inline(always)]
    GetHash(): int32 =
        0

    #[inline(always)]
    static op_Equality(bitSet1: BitSet512, bitSet2: BitSet512): bool =
        bitSet1.value0 == bitSet2.value0 &&
         bitSet1.value1 == bitSet2.value1 &&
          bitSet1.value2 == bitSet2.value2 &&
           bitSet1.value3 == bitSet2.value3 &&
            bitSet1.value4 == bitSet2.value4 &&
             bitSet1.value5 == bitSet2.value5 &&
              bitSet1.value6 == bitSet2.value6 &&
               bitSet1.value7 == bitSet2.value7

    #[inline(always)]
    static op_Inequality(bitSet1: BitSet512, bitSet2: BitSet512): bool =
        bitSet1.value0 != bitSet2.value0 ||
         bitSet1.value1 != bitSet2.value1 ||
          bitSet1.value2 != bitSet2.value2 ||
           bitSet1.value3 != bitSet2.value3 ||
            bitSet1.value4 != bitSet2.value4 ||
             bitSet1.value5 != bitSet2.value5 ||
              bitSet1.value6 != bitSet2.value6 ||
               bitSet1.value7 != bitSet2.value7

    #[inline(always)]
    static op_BitwiseOr(bitSet1: BitSet512, bitSet2: BitSet512): BitSet512 =
        BitSet512(
            bitSet1.value0 | bitSet2.value0,
            bitSet1.value1 | bitSet2.value1,
            bitSet1.value2 | bitSet2.value2,
            bitSet1.value3 | bitSet2.value3,
            bitSet1.value4 | bitSet2.value4,
            bitSet1.value5 | bitSet2.value5,
            bitSet1.value6 | bitSet2.value6,
            bitSet1.value7 | bitSet2.value7
        )

    #[inline(always)]
    static op_BitwiseAnd(bitSet1: BitSet512, bitSet2: BitSet512): BitSet512 =
        BitSet512(
            bitSet1.value0 & bitSet2.value0,
            bitSet1.value1 & bitSet2.value1,
            bitSet1.value2 & bitSet2.value2,
            bitSet1.value3 & bitSet2.value3,
            bitSet1.value4 & bitSet2.value4,
            bitSet1.value5 & bitSet2.value5,
            bitSet1.value6 & bitSet2.value6,
            bitSet1.value7 & bitSet2.value7
        )

class BitSet512EqualityComparer =
    implements IEqualityComparer<BitSet512>

    GetHashCode(x: BitSet512): int32 = x.GetHash()

    Equals(x: BitSet512, y: BitSet512): bool = x == y

class ByteStream =
    mutable field buffer: mutable byte[]
    mutable field position: int32
    mutable field count: int32

    new() =
        {
            buffer = OlyPrelude.Array.ZeroCreate(65536)
            position = 0
            count = 0
        }

    new(buffer: mutable byte[]) =
        {
            buffer = buffer
            position = 0
            count = 0
        }

    new(buffer: mutable byte[], position: int32, count: int32) =
        {
            buffer = buffer
            position = position
            count = count
        }

    Raw: mutable byte[] get() = this.buffer
    Count: int32 get() = this.count
    Position: int32 get() = this.position

    ResetPosition(): () =
        this.position <- 0

    Reset(): () =
        this.ResetPosition()
        this.count <- 0

    Read<T>(): T where T: unmanaged, ValueType =
        let size = sizeof<T>
        let currentPosition = this.position
        let nextPosition = currentPosition + size

        if (nextPosition > this.count)
            throw ArgumentOutOfRangeException()

        let mutable span = MemoryMarshal.Cast<_, T>(Span(this.buffer, currentPosition, size))
        let result = span[0]
        let value = result

        this.position <- nextPosition

        value

    Peek<T>(): T where T: unmanaged, ValueType =
        let oldPosition = this.Position
        let value = this.Read<T>()
        this.position <- oldPosition
        value

    Write<T>(value: T): () where T: unmanaged, ValueType =
        this.Write(&value)
    Write<T>(value: inref<T>): () where T: unmanaged, ValueType =
        let size = sizeof<T>
        let currentPosition = this.position
        let nextPosition = currentPosition + size
        let buffer = this.buffer

        if (nextPosition >= buffer.Length)
            let newBuffer = OlyPrelude.Array.ZeroCreate<byte>(buffer.Length * 2)
            System.Array.Copy(Unsafe.Cast(buffer), Unsafe.Cast(newBuffer), buffer.Length)
            this.buffer <- buffer
            this.Write(&value)
        else
            (MemoryMarshal.Cast(Span(buffer, currentPosition, size))[0]) <- value
            this.position <- nextPosition
            if (nextPosition > this.count)
                this.count <- this.count + size

    CopyExactTo(bstream: ByteStream): () =
        bstream.position <- this.position
        bstream.count <- this.count

        if (bstream.buffer.Length < this.buffer.Length)
            bstream.buffer <- OlyPrelude.Array.ZeroCreate(this.buffer.Length)

        Span(this.buffer, 0, this.count).CopyTo(Span(bstream.buffer))

    Write(mutable value: ReadOnlySpan<byte>): () =
        let currentPosition = this.position
        let totalByteLength = value.Length
        let nextPosition = currentPosition + totalByteLength

        let buffer = this.buffer

        if (nextPosition >= buffer.Length)
            let newBuffer = OlyPrelude.Array.ZeroCreate<byte>(buffer.Length * 2)
            System.Array.Copy(Unsafe.Cast(buffer), Unsafe.Cast(newBuffer), buffer.Length)
            this.buffer <- newBuffer
            this.Write(value)
        else
            value.CopyTo(Span(this.buffer, currentPosition, totalByteLength))
            this.position <- nextPosition
            this.count <- this.count + totalByteLength

    Write<T>(mutable value: ReadOnlySpan<T>): () where T: unmanaged, ValueType =
        let size = sizeof<T>
        let totalByteLength = size * value.Length           
        let currentPosition = this.position
        let nextPosition = currentPosition + totalByteLength

        let buffer = this.buffer

        if (nextPosition >= buffer.Length)
            let newBuffer = OlyPrelude.Array.ZeroCreate<byte>(buffer.Length * 2)
            System.Array.Copy(Unsafe.Cast(buffer), Unsafe.Cast(newBuffer), buffer.Length)
            this.buffer <- newBuffer
            this.Write(value)
        else
            MemoryMarshal.Cast(value).CopyTo(Span(this.buffer, currentPosition, totalByteLength))
            this.position <- nextPosition
            this.count <- this.count + totalByteLength

    Read(mutable dst: Span<byte>): () =
        let currentPosition = this.position
        let nextPosition = currentPosition + dst.Length

        if (nextPosition > this.count)
            throw ArgumentOutOfRangeException("dst")

        Span(this.buffer, currentPosition, dst.Length).CopyTo(dst)

        this.position <- nextPosition

    Read<T>(mutable dst: Span<T>): () where T: unmanaged, ValueType =
        let size = sizeof<T>
        let totalByteLength = size * dst.Length  
        let currentPosition = this.position
        let nextPosition = currentPosition + totalByteLength

        if (nextPosition > this.count)
            throw ArgumentOutOfRangeException("dst")

        Span(this.buffer, currentPosition, totalByteLength).CopyTo(MemoryMarshal.Cast(dst))

        this.position <- nextPosition

    Seek(position: int32): () =
        if (position > this.count)
            throw ArgumentOutOfRangeException("position")
        this.position <- position

    AsReadOnlySpan(): ReadOnlySpan<byte> =
        ReadOnlySpan(this.buffer, 0, this.count)

// IO

class ExternalProcess =
    implements IDisposable

    field p: Process

    new(filePath: string, args: string) =
        ExternalProcess(filePath, args, Environment.CurrentDirectory)

    new(filePath: string, args: string, workingDirectory: string) =
        let startInfo = ProcessStartInfo()
        startInfo.FileName <- filePath
        startInfo.Arguments <- args
        startInfo.RedirectStandardError <- true
        startInfo.RedirectStandardOutput <- true
        startInfo.WorkingDirectory <- workingDirectory
        startInfo.UseShellExecute <- false
        startInfo.CreateNoWindow <- true

        {
            p =
                let p = Process()
                p.StartInfo <- startInfo
                p
        }

    RunAsync(ct: System.Threading.CancellationToken): System.Threading.Tasks.Task<(output: string, errors: string)> =
        class DataReceived =

            field f: DataReceivedEventArgs -> ()
            new(f: DataReceivedEventArgs -> ()) =
                {
                    f  = f
                }

            Invoke(sender: object, e: DataReceivedEventArgs): () =
                this.f(e)

        let work =
            () ->
                let output = System.Text.StringBuilder()
                let error = System.Text.StringBuilder()
                let outputWaitHandle = System.Threading.AutoResetEvent(false)
                let errorWaitHandle = System.Threading.AutoResetEvent(false)

                let outputDataReceived = 
                    DataReceived(
                        e ->
                            if (e.Data === unchecked default)
                                let result = outputWaitHandle.Set()
                            else
                                let result = output.AppendLine(e.Data)

                    )
                this.p.add_OutputDataReceived(
                    DataReceivedEventHandler(outputDataReceived, nint(&&outputDataReceived.Invoke))
                )

                let errorDataReceived = 
                    DataReceived(
                        e ->
                            if (e.Data === unchecked default)
                                let result = errorWaitHandle.Set()
                            else
                                let result = error.AppendLine(e.Data)

                    )
                this.p.add_ErrorDataReceived(
                    DataReceivedEventHandler(errorDataReceived, nint(&&errorDataReceived.Invoke))
                )

                let result = this.p.Start()

                this.p.BeginOutputReadLine()
                this.p.BeginErrorReadLine()

                this.p.WaitForExit() // TODO: We should use the async version
                let result = outputWaitHandle.WaitOne()
                let result = errorWaitHandle.WaitOne()
                let output = output.ToString()
                let errors = error.ToString()
                if (this.p.ExitCode != 0)
                    throw Exception(output)

                (output, errors)

        System.Threading.Tasks.Task.Run(work)

    Dispose(): () =
        this.p.Dispose()

// **********************************************************************************************************************************