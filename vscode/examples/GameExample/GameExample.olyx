#target "dotnet: net7"

#reference "../Evergreen/src/Client/Evergreen.Client.Graphics.olyx"
#package "Veldrid,4.9.0" // TODO: Remove this when we fix transitive packages.
#package "Veldrid.StartupUtilities,4.9.0" // TODO: Remove this when we fix transitive packages.
#package "Veldrid.SPIRV,1.0.15" // TODO: Remove this when we fix transitive packages.

open System.Text
open System.Numerics
open Evergreen.Client.Graphics

DefaultVertexCode: string = "#version 450

layout(location = 0) in vec3 Position;
layout(location = 1) in mat4 Transform;

layout(location = 0) out vec4 fsin_Color;

void main()
{
    gl_Position = Transform * vec4(Position, 1);
    fsin_Color = vec4(Position.x, Position.y, 1, 1);
}"

DefaultFragmentCode: string = "#version 450

layout(location = 0) in vec4 fsin_Color;
layout(location = 0) out vec4 fsout_Color;

void main()
{
    fsout_Color = fsin_Color;
}"

main(): () =
    let window = Graphics.CreateWindow(100, 100, 512, 512, "Evergreen Game Example")

    print("Graphics Device: " + Graphics.DeviceName + "\n")

    let meshDesc   = MeshDescription.CreateHexagon(0.1)
    let shaderDesc = 
        ShaderDescription.Create(
            Encoding.UTF8.GetBytes(DefaultVertexCode), 
            Encoding.UTF8.GetBytes(DefaultFragmentCode)
        )

    let mesh   = Graphics.CreateMesh(meshDesc)
    let shader = Graphics.CreateShader(shaderDesc)

    let hexagons = System.Collections.Generic.List<Matrix4x4>()

    let mutable i = 1
    while (i <= 3)
        hexagons.Add(Matrix4x4.CreateTranslation(Vector3(-0.2 * float32(i), 0, 0)))
        i <- i + 1
    let hexagons1 = hexagons.ToArray()

    hexagons.Clear()
    let mutable i = 1
    while (i <= 3)
        hexagons.Add(Matrix4x4.CreateTranslation(Vector3(0.2 * float32(i), 0, 0)))
        i <- i + 1
    let hexagons2 = hexagons.ToArray()

    let instances1 = Graphics.CreateInstances(hexagons1)
    let drawCmd1   = DrawCommand(mesh, shader, instances1)

    let instances2 = Graphics.CreateInstances(hexagons2)
    let drawCmd2   = DrawCommand(mesh, shader, instances2)

    let drawCmds = [drawCmd1;drawCmd2]

    while (window.Exists)
        let inputState = window.GetInputState()

        if (window.Exists)
            Graphics.Draw(drawCmds)

    let mutable i = 0
    let length = getLength(drawCmds)
    while (i < length)
        let cmd = drawCmds[i]
        i <- i + 1

    Graphics.DestroyWindow()
