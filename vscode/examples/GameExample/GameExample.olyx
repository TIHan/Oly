#target "dotnet: net7"

#load "*.oly"

#reference "../Evergreen/src/Graphics/Evergreen.Graphics.olyx"
#reference "../Evergreen/src/Physics/Evergreen.Physics.olyx"

open System
open System.Text
open System.Numerics
open Evergreen.Graphics
open Evergreen.Graphics.UI
open Evergreen.Physics
open System.Runtime.InteropServices
open static Game.Core

main(): () =
    let world = World()
    let physics = Physics.Init()
    let window = Graphics.CreateWindow(100, 100, 1280, 720, "Evergreen Engine")
    window.HideCursor()
    print("Graphics Device: " + Graphics.DeviceName + "\n")

    // -------------------------------------

    // ----

    // Lights

    let pointLightBuffer = Graphics.CreateBuffer<PointLight>(world.Archetype_Light.Buffer2)
    let pointLightBufferSet = Graphics.CreateBufferSet(pointLightBuffer)

    // ----

    let updateWorldPhysics(dt) =
        physics.Update(dt)

        let updatePhysicsBoxes(physicsBoxCount: int32, physicsBoxTransforms: Transform[||], physicsBoxDynamicObjectIds: DynamicObjectId[||]) =
            let mutable i = 0
            while (i < physicsBoxCount)
                let mutable m = physicsBoxTransforms[i]
                let mutable position = Vector3.Zero
                let mutable orientation = Quaternion.Identity
                physics.GetPositionAndOrientation(physicsBoxDynamicObjectIds[i], &position, &orientation)
                let mutable scale = Matrix4x4.CreateScale(m.Scale)
                let mutable m = Matrix4x4.CreateFromQuaternion(orientation)
                scale.Translation <- position
                physicsBoxTransforms[i] <- Transform(m * scale)
                i <- i + 1

        updatePhysicsBoxes(world.Archetype_Box.Count, world.Archetype_Box.Buffer0, world.Archetype_Box.Buffer1)
        updatePhysicsBoxes(world.Archetype_Light.Count, world.Archetype_Light.Buffer0, world.Archetype_Light.Buffer1)

    let defaultShaderDesc = 
        ShaderDescription.CreateMeshShader(
            Encoding.UTF8.GetBytes(DefaultVertexCode), 
            Encoding.UTF8.GetBytes(DefaultFragmentCode)
        )

    let boxMesh = Graphics.CreateMesh(MeshDescription.CreateCube())

    let addStaticBoxRenderCommands() =
        let staticInstances = Graphics.CreateInstances(world.Archetype_StaticBox.Buffer0)
        staticInstances.Count <- world.Archetype_StaticBox.Count

        let texture = Graphics.CreateTexture2D("GameExample/Textures/flats/floor7_2.png")
        let staticShader = Graphics.CreateShader(defaultShaderDesc, false)

        let instancesSet = Graphics.CreateShaderInstancesSet(staticInstances)
        let textureSet = Graphics.CreateShaderTextureSet(texture)

        [
            DrawCommand.CreateBindInstancesSet(instancesSet, BindResourceSetKind.Graphics);
            DrawCommand.CreateBindTextureSet(textureSet, BindResourceSetKind.Graphics);
            DrawCommand.CreateBindBufferSet(pointLightBufferSet, BindResourceSetKind.Graphics, 3);
            DrawCommand.CreateDrawMesh(boxMesh, staticShader, staticInstances)
        ]

    let mutable physicsBoxInstances = unchecked default
    let addPhysicsBoxRenderCommands() =
        physicsBoxInstances <- Graphics.CreateInstances(world.Archetype_Box.Buffer0)
        physicsBoxInstances.Count <- world.Archetype_Box.Count

        let texture = Graphics.CreateTexture2D("GameExample/Textures/flats/aqf068.png")
        let shader = Graphics.CreateShader(defaultShaderDesc, false)

        let instancesSet = Graphics.CreateShaderInstancesSet(physicsBoxInstances)
        let textureSet = Graphics.CreateShaderTextureSet(texture)

        [
            DrawCommand.CreateBindInstancesSet(instancesSet, BindResourceSetKind.Graphics);
            DrawCommand.CreateBindTextureSet(textureSet, BindResourceSetKind.Graphics);
            DrawCommand.CreateBindBufferSet(pointLightBufferSet, BindResourceSetKind.Graphics, 3);
            DrawCommand.CreateDrawMesh(boxMesh, shader, physicsBoxInstances)
        ]
    let physicsBoxRenderCmds = addPhysicsBoxRenderCommands()

    let mutable physicsBoxLightInstances = unchecked default
    let addPhysicsBoxLightRenderCommands() =
        physicsBoxLightInstances <- Graphics.CreateInstances(world.Archetype_Light.Buffer0)
        physicsBoxLightInstances.Count <- world.Archetype_Light.Count

        let texture = Graphics.CreateTexture2D("GameExample/Textures/flats/aqf068.png")
        let shader = Graphics.CreateShader(defaultShaderDesc, false)

        let instancesSet = Graphics.CreateShaderInstancesSet(physicsBoxLightInstances)
        let textureSet = Graphics.CreateShaderTextureSet(texture)

        [
            DrawCommand.CreateBindInstancesSet(instancesSet, BindResourceSetKind.Graphics);
            DrawCommand.CreateBindTextureSet(textureSet, BindResourceSetKind.Graphics);
            DrawCommand.CreateBindBufferSet(pointLightBufferSet, BindResourceSetKind.Graphics, 3);
            DrawCommand.CreateDrawMesh(boxMesh, shader, physicsBoxLightInstances)
        ]
    let physicsBoxLightRenderCmds = addPhysicsBoxLightRenderCommands()

    let spawnStaticBox(position, rotation, scale) =
        // server
        let objId = physics.AddStaticBox(position, rotation, scale)
        let transform = Transform.Create(position, rotation, scale)
        let staticBoxEntId = world.CreateStaticBox(transform, objId)

        // client
        // TODO: ...

    let spawnPhysicsBox(position, rotation, scale) =
        // server
        let objId = physics.AddBox(position, rotation, scale)
        let transform = Transform.Create(position, rotation, scale)
        let physicsBox = world.CreateBox(transform, objId)

        // client
        physicsBoxInstances.Count <- physicsBoxInstances.Count + 1

    let spawnPhysicsBoxLight(position, rotation, scale) =
        // server
        let objId = physics.AddBox(position, rotation, scale)
        let transform = Transform.Create(position, rotation, scale)
        let physicsBox = world.CreateLight(transform, objId, default)

        // client
        physicsBoxLightInstances.Count <- physicsBoxLightInstances.Count + 1

    spawnStaticBox(Vector3(0, 0, -5), Quaternion.Identity, Vector3(50, 100, 1))
    spawnPhysicsBoxLight(Vector3.Zero, Quaternion.Identity, Vector3.One)
    let staticDrawCmds = addStaticBoxRenderCommands()

    let addCube(position) =
        let result = spawnPhysicsBox(position, Quaternion.Identity, Vector3.One)

    let mutable i = 1
    while (i <= 10)
        addCube(Vector3(-float32(i * 2), 0, 0))
        let mutable j = 1
        while (j <= 10)
            addCube(Vector3(-float32(i * 2), -float32(j * 2), 0))
            addCube(Vector3(-float32(i * 2), float32(j * 2), 0))
            j <- j + 1
        i <- i + 1

    let mutable i = 1
    while (i <= 10)
        addCube(Vector3(float32(i * 2), 0, 0))
        let mutable j = 1
        while (j <= 10)
            addCube(Vector3(float32(i * 2), -float32(j * 2), 0))
            addCube(Vector3(float32(i * 2), float32(j * 2), 0))
            j <- j + 1
        i <- i + 1

    // ----


    // ----

    let quadMesh = 
        let desc = MeshDescription.CreateQuad(1)
        Graphics.CreateMesh(desc)

    let quadInstances = 
        let transform = Transform.Create(Vector3(0, 0, 0), Quaternion.Identity, Vector3.One)
        Graphics.CreateInstances([|Matrix4x4.Identity|])

    let renderTarget = Graphics.CreateRenderTarget(1280, 720)
    let renderTargetTextureSet = Graphics.CreateShaderTextureSet(renderTarget)

    let renderQuadCmds =
        let desc = 
            ShaderDescription.CreateMeshShader(
                Encoding.UTF8.GetBytes(System.IO.File.ReadAllText("GameExample/motion_blur.vert")), 
                Encoding.UTF8.GetBytes(System.IO.File.ReadAllText("GameExample/motion_blur.frag"))
            )
        let shader = Graphics.CreateShader(desc, true)

        let instancesSet = Graphics.CreateShaderInstancesSet(quadInstances)

        [
            DrawCommand.CreateBindInstancesSet(instancesSet, BindResourceSetKind.Graphics);
            DrawCommand.CreateBindTextureSet(renderTargetTextureSet, BindResourceSetKind.Graphics);
            DrawCommand.CreateDrawMesh(quadMesh, shader, quadInstances)
        ]

    let drawCmds =
        match (physicsBoxRenderCmds[3])
        | DrawCommand.DrawMesh(mesh, shader, instances) =>
            let computeShaderDesc =
                ComputeShaderDescription.CreateMeshLayout(Encoding.UTF8.GetBytes(DefaultComputeCode))
            let computeShader = 
                Graphics.CreateComputeShader(computeShaderDesc)

            let instancesSet = Graphics.CreateShaderInstancesSet(instances)

            let spinHexagonsCmd = DrawCommand.CreateRunComputeShader(computeShader, instances)

            let allCmds = System.Collections.Generic.List<DrawCommand>()

            allCmds.Add(DrawCommand.CreateBindInstancesSet(instancesSet, BindResourceSetKind.Compute))
          //  allCmds.Add(DrawCommand.CreateRunComputeShader(computeShader, instances))
            allCmds.Add(DrawCommand.CreateSetRenderTarget(renderTarget))

            let mutable i = 0
            while (i < physicsBoxLightRenderCmds.Length)
                allCmds.Add(physicsBoxLightRenderCmds[i])
                i <- i + 1

            let mutable i = 0
            while (i < physicsBoxRenderCmds.Length)
                allCmds.Add(physicsBoxRenderCmds[i])
                i <- i + 1

            let mutable i = 0
            while (i < staticDrawCmds.Length)
                allCmds.Add(staticDrawCmds[i])
                i <- i + 1

            allCmds.Add(DrawCommand.CreateSetWindowTarget())
            
            let mutable i = 0
            while (i < renderQuadCmds.Length)
                allCmds.Add(renderQuadCmds[i])
                i <- i + 1
            
            UnsafeCast<_[]>(allCmds.ToArray())
        | _ =>
            fail("Unexpected")

    let mutable camera = Camera(70, 1, 1, 0.1, 1000000)
    Graphics.SetNormalMatrix(Matrix4x4.Identity)
    Graphics.SetDeltaTime(0)

    let setResolution(width: int32, height: int32) =
        let oldCamera = camera
        camera <- Camera(70, width, height, 0.1, 1000000)
        camera.Transform.Position <- oldCamera.Transform.Position
        camera.SetYawPitch(oldCamera.Yaw, oldCamera.Pitch)

        Graphics.SetView(camera.Transform.WorldToLocalMatrix)
        Graphics.SetProjection(camera.Projection)
        Graphics.SetPreviousView(camera.Transform.WorldToLocalMatrix)
        Graphics.SetProjection(camera.Projection)

        Graphics.UpdateRenderTarget(uint32(width), uint32(height), renderTarget)
        Graphics.UpdateTextureSet(renderTarget, renderTargetTextureSet)

    setResolution(1280, 720)
    
    let uiNode =

        let quitButtonVM = UI.ButtonModel("Quit")
        let quitButton =
            UI.Button(
                quitButtonVM,
                vm -> window.Close()
            )

        let spawnBoxButtonVM = UI.ButtonModel("Spawn Box")
        let spawnBoxButton =
            UI.Button(
                spawnBoxButtonVM,
                vm ->
                    let position = camera.Transform.Position + (camera.Transform.Forward * 2)
                    spawnPhysicsBox(position, camera.Transform.Rotation, Vector3.One)
            )

        let spawnBoxLightButtonVM = UI.ButtonModel("Spawn Box Light")
        let spawnBoxLightButton =
            UI.Button(
                spawnBoxLightButtonVM,
                vm ->
                    let position = camera.Transform.Position + (camera.Transform.Forward * 2)
                    spawnPhysicsBoxLight(position, camera.Transform.Rotation, Vector3.One)
            )

        let toggleFullscreenCheckboxVM = UI.CheckboxModel("Fullscreen", false)
        let toggleFullscreenCheckbox =
            UI.Checkbox(
                toggleFullscreenCheckboxVM,
                vm ->
                    window.SetFullscreen(vm.IsChecked)
            )

        let toggleVerticalSyncCheckboxVM = UI.CheckboxModel("Vertical Sync", false)
        let toggleVerticalSyncCheckbox =
            UI.Checkbox(
                toggleVerticalSyncCheckboxVM,
                vm ->
                    Graphics.SetVSync(vm.IsChecked)
            )

        let exampleTextInputVM = UI.TextInputModel("Example Text", "lorem ipsum")
        let exampleTextInput =
            UI.TextInput(
                exampleTextInputVM,
                vm -> ()
            )

        let resolutions = Graphics.GetDisplayModes()
        let resolutionItems =
            Array.MapAsMutable(resolutions, 
                x ->
                    let strb = StringBuilder()
                    let strb = strb.Append(x.Width)
                    let strb = strb.Append(" × ")
                    let strb = strb.Append(x.Height)
                    let strb = strb.Append(" - ")
                    let strb = strb.Append(x.RefreshRate)
                    let strb = strb.Append("hz")
                    strb.ToString()
            )
        let resolutionItemIndex = Graphics.GetCurrentDisplayModeIndex()
        let resolutionsComboBoxVM = UI.ComboBoxModel("Resolutions", resolutionItemIndex, resolutionItems, resolutionItems.Length)
        let resolutionsComboBox =
            UI.ComboBox(
                resolutionsComboBoxVM,
                vm ->
                    let item = resolutions[vm.SelectedItemIndex]
                    Graphics.SetDisplayMode(item)
                    setResolution(int32(item.Width), int32(item.Height))
            )

        let mainMenuWindowVM = UI.WindowModel("Main Menu", Vector2(512, 512), Vector2(100, 100))
        UI.Window(
            mainMenuWindowVM,
            [
                spawnBoxButton;
                spawnBoxLightButton;
                resolutionsComboBox;
                toggleFullscreenCheckbox;
                toggleVerticalSyncCheckbox;
                quitButton;
                exampleTextInput
            ]
        )

    let keyEventQueue = System.Collections.Concurrent.ConcurrentQueue<InputState>()
    let updateInput(dt: float64) =
        let inputState = window.GetInputState()

        keyEventQueue.Enqueue(inputState)

        if (!window.IsCursorVisible)
            let mousePosition = inputState.MouseDelta

            let yawAcc =
                mousePosition.X * 0.0025

            let pitchAcc =
                mousePosition.Y * 0.0025

            camera.SetYawPitch(camera.Yaw + yawAcc, camera.Pitch + pitchAcc)
        else
            UI.Update(dt, inputState, uiNode)

    let mutable is_w_pressed = false
    let mutable is_a_pressed = false
    let mutable is_s_pressed = false
    let mutable is_d_pressed = false

    let processKeyEventQueue() =
        let mutable esc_toggle = false

        let mutable inputState = unchecked default
        while (keyEventQueue.TryDequeue(&inputState))
            let keyEvents = inputState.KeyEvents
            let mutable i = 0
            while (i < keyEvents.Length)
                let mutable keyEvent = keyEvents[i]

                match (keyEvent.Key)
                | Key.W =>
                    is_w_pressed <- keyEvent.Down
                | Key.A =>
                    is_a_pressed <- keyEvent.Down
                | Key.S =>
                    is_s_pressed <- keyEvent.Down
                | Key.D =>
                    is_d_pressed <- keyEvent.Down
                | Key.Escape when (keyEvent.Down) =>
                    esc_toggle <- true
                | _ =>
                    ()

                i <- i + 1

            if (esc_toggle)
                esc_toggle <- false
                if (window.IsCursorVisible)
                    window.HideCursor()
                else
                    window.ShowCursor()

    let updateWorldCamera(dt: float32) =
        let mutable acc = Vector3.Zero
                       
        if (!window.IsCursorVisible)
            if (is_w_pressed)
                let v = camera.Transform.Forward
                acc <- Vector3(v.X, v.Y, v.Z)

            if (is_s_pressed)
                let v = camera.Transform.Back
                acc <- acc + Vector3(v.X, v.Y, v.Z)

            if (is_a_pressed)
                let v = camera.Transform.Left
                acc <- acc + Vector3(v.X, v.Y, v.Z)

            if (is_d_pressed)
                let v = camera.Transform.Right
                acc <- acc + Vector3(v.X, v.Y, v.Z)
        else
            ()

        acc <-
            if (acc != Vector3.Zero)
                Vector3.Normalize(acc) * (dt * 6)
            else
                acc

        camera.Transform.Position <- camera.Transform.Position + acc

        let mutable obj = default
        let mutable dir = camera.Transform.Forward
        if (physics.TryRayCast(camera.Transform.Position, dir, 500, &obj))
            match (obj)
            | DynamicObject(objId) =>
                physics.ApplyImpulse(objId, dir * dt * 10)
            | _ =>
                ()

    let mutable viewLerp = Matrix4x4.Identity
    let fixedUpdate(dt: float64) =
        viewLerp <- camera.Transform.WorldToLocalMatrix

        let dt = float32(dt)
        processKeyEventQueue()
        updateWorldCamera(dt)

        let mutable i = 0
        while (i < 1)
            updateWorldPhysics(dt)
            i <- i + 1

        // Client
        Graphics.UpdateInstances(physicsBoxInstances, world.Archetype_Box.Buffer0)
        Graphics.UpdateInstances(physicsBoxLightInstances, world.Archetype_Light.Buffer0)
        Graphics.UpdateBuffer(pointLightBuffer, world.Archetype_Light.Buffer2, uint32(world.Archetype_Light.Count))

        let mutable i = 0
        while (i < world.Archetype_Light.Count)
            world.Archetype_Light.Buffer2[i].Position <- world.Archetype_Light.Buffer0[i].Position
            i <- i + 1
        Graphics.UpdateBuffer(pointLightBuffer, world.Archetype_Light.Buffer2, uint32(world.Archetype_Light.Count))

        //GC.Collect(2, GCCollectionMode.Forced, true)

    let update(dt: float64) =
        ()

    let mutable previousView = Matrix4x4.Identity   
    let render(deltaTime, alpha: float32) =
        if (alpha < 0 || alpha > 1)
            fail("Invalid alpha value.")

        let view = camera.Transform.WorldToLocalMatrix
        let view = Matrix4x4.Lerp(viewLerp, view, alpha)

        Graphics.SetView(view)
        Graphics.SetPreviousView(previousView)
        Graphics.SetPreviousViewProjection(previousView * camera.Projection)

        let mutable inverseViewProjection = default
        let result = Matrix4x4.Invert(viewLerp * camera.Projection, &inverseViewProjection)

        Graphics.SetInverseViewProjection(inverseViewProjection)
        Graphics.SetDeltaTime(deltaTime)

        previousView <- view

        let windowExists = window.Exists
        if (windowExists)
            Graphics.Draw(drawCmds)

    window.ShowCursor()

   // Graphics.UpdateInstances(physicsBoxInstances, world.PhysicsBoxes.Transforms)
    GameLoop.Start(
        dt ->
            updateInput(dt),
        dt ->
            fixedUpdate(dt)
            !window.Exists,
        dt ->
            update(dt)
            !window.Exists,
        (dt, alpha) ->
            render(float32(dt), float32(alpha))
    )

    Graphics.DestroyWindow()