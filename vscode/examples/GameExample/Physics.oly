namespace Evergreen.Physics

open System
open System.Numerics
open BepuPhysics
open BepuPhysics.Collidables
open BepuPhysics.CollisionDetection
open BepuPhysics.Constraints
open BepuPhysics.Trees
open BepuUtilities
open BepuUtilities.Memory

//The simulation has a variety of extension points that must be defined. 
//The demos tend to reuse a few types like the DemoNarrowPhaseCallbacks, but this demo will provide its own (super simple) versions.
//If you're wondering why the callbacks are interface implementing structs rather than classes or events, it's because 
//the compiler can specialize the implementation using the compile time type information. That avoids dispatch overhead associated
//with delegates or virtual dispatch and allows inlining, which is valuable for extremely high frequency logic like contact callbacks.
private struct NarrowPhaseCallbacks =
    implements INarrowPhaseCallbacks

    /// <summary>
    /// Performs any required initialization logic after the Simulation instance has been constructed.
    /// </summary>
    /// <param name="simulation">Simulation that owns these callbacks.</param>
    mutable Initialize(sim: Simulation): () = 
        //Often, the callbacks type is created before the simulation instance is fully constructed, so the simulation will call this function when it's ready.
        //Any logic which depends on the simulation existing can be put here.
        ()

    /// <summary>
    /// Chooses whether to allow contact generation to proceed for two overlapping collidables.
    /// </summary>
    /// <param name="workerIndex">Index of the worker that identified the overlap.</param>
    /// <param name="a">Reference to the first collidable in the pair.</param>
    /// <param name="b">Reference to the second collidable in the pair.</param>
    /// <param name="speculativeMargin">Reference to the speculative margin used by the pair.
    /// The value was already initialized by the narrowphase by examining the speculative margins of the involved collidables, but it can be modified.</param>
    /// <returns>True if collision detection should proceed, false otherwise.</returns>
    mutable AllowContactGeneration(workerIndex: int32, mutable a: CollidableReference, mutable b: CollidableReference, speculativeMargin: byref<float32>): bool =
        //Before creating a narrow phase pair, the broad phase asks this callback whether to bother with a given pair of objects.
        //This can be used to implement arbitrary forms of collision filtering. See the RagdollDemo or NewtDemo for examples.
        //Here, we'll make sure at least one of the two bodies is dynamic.
        //The engine won't generate static-static pairs, but it will generate kinematic-kinematic pairs.
        //That's useful if you're trying to make some sort of sensor/trigger object, but since kinematic-kinematic pairs
        //can't generate constraints (both bodies have infinite inertia), simple simulations can just ignore such pairs.

        //This function also exposes the speculative margin. It can be validly written to, but that is a very rare use case.
        //Most of the time, you can ignore this function's speculativeMargin parameter entirely.
        fromEnum(a.Mobility) == fromEnum(CollidableMobility.Dynamic) || fromEnum(b.Mobility) == fromEnum(CollidableMobility.Dynamic)

    /// <summary>
    /// Chooses whether to allow contact generation to proceed for the children of two overlapping collidables in a compound-including pair.
    /// </summary>
    /// <param name="workerIndex">Index of the worker thread processing this pair.</param>
    /// <param name="pair">Parent pair of the two child collidables.</param>
    /// <param name="childIndexA">Index of the child of collidable A in the pair. If collidable A is not compound, then this is always 0.</param>
    /// <param name="childIndexB">Index of the child of collidable B in the pair. If collidable B is not compound, then this is always 0.</param>
    /// <returns>True if collision detection should proceed, false otherwise.</returns>
    /// <remarks>This is called for each sub-overlap in a collidable pair involving compound collidables. If neither collidable in a pair is compound, this will not be called.
    /// For compound-including pairs, if the earlier call to AllowContactGeneration returns false for owning pair, this will not be called. Note that it is possible
    /// for this function to be called twice for the same subpair if the pair has continuous collision detection enabled; 
    /// the CCD sweep test that runs before the contact generation test also asks before performing child pair tests.</remarks>
    mutable AllowContactGeneration(workerIndex: int32, pair: CollidablePair, childIndexA: int32, childIndexB: int32): bool =
        //This is similar to the top level broad phase callback above. It's called by the narrow phase before generating subpairs between children in parent shapes. 
        //This only gets called in pairs that involve at least one shape type that can contain multiple children, like a Compound.
        true

    /// <summary>
    /// Provides a notification that a manifold has been created between the children of two collidables in a compound-including pair.
    /// Offers an opportunity to change the manifold's details. 
    /// </summary>
    /// <param name="workerIndex">Index of the worker thread that created this manifold.</param>
    /// <param name="pair">Pair of collidables that the manifold was detected between.</param>
    /// <param name="childIndexA">Index of the child of collidable A in the pair. If collidable A is not compound, then this is always 0.</param>
    /// <param name="childIndexB">Index of the child of collidable B in the pair. If collidable B is not compound, then this is always 0.</param>
    /// <param name="manifold">Set of contacts detected between the collidables.</param>
    /// <returns>True if this manifold should be considered for constraint generation, false otherwise.</returns>
    mutable ConfigureContactManifold(workerIndex: int32, pair: CollidablePair, childIndexA: int32, childIndexB: int32, manifold: byref<ConvexContactManifold>): bool =
        true

    /// <summary>
    /// Provides a notification that a manifold has been created for a pair. Offers an opportunity to change the manifold's details. 
    /// </summary>
    /// <param name="workerIndex">Index of the worker thread that created this manifold.</param>
    /// <param name="pair">Pair of collidables that the manifold was detected between.</param>
    /// <param name="manifold">Set of contacts detected between the collidables.</param>
    /// <param name="pairMaterial">Material properties of the manifold.</param>
    /// <returns>True if a constraint should be created for the manifold, false otherwise.</returns>
    mutable ConfigureContactManifold<TManifold>(workerIndex: int32, pair: CollidablePair, manifold: byref<TManifold>, pairMaterial: byref<PairMaterialProperties>): bool where TManifold: IContactManifold<TManifold> =
        //The IContactManifold parameter includes functions for accessing contact data regardless of what the underlying type of the manifold is.
        //If you want to have direct access to the underlying type, you can use the manifold.Convex property and a cast like Unsafe.As<TManifold, ConvexContactManifold or NonconvexContactManifold>(ref manifold).

        //The engine does not define any per-body material properties. Instead, all material lookup and blending operations are handled by the callbacks.
        //For the purposes of this demo, we'll use the same settings for all pairs.
        //(Note that there's no 'bounciness' or 'coefficient of restitution' property!
        //Bounciness is handled through the contact spring settings instead. Setting See here for more details: https://github.com/bepu/bepuphysics2/issues/3 and check out the BouncinessDemo for some options.)
        pairMaterial.FrictionCoefficient <- 1
        pairMaterial.MaximumRecoveryVelocity <- 2
        pairMaterial.SpringSettings <- SpringSettings(30, 1)
        //For the purposes of the demo, contact constraints are always generated.
        true

    /// <summary>
    /// Releases any resources held by the callbacks. Called by the owning narrow phase when it is being disposed.
    /// </summary>
    mutable Dispose(): () =       
        ()

//Note that the engine does not require any particular form of gravity- it, like all the contact callbacks, is managed by a callback.
private struct PoseIntegratorCallbacks =
    implements IPoseIntegratorCallbacks

    // Performs any required initialization logic after the Simulation instance has been constructed.
    mutable Initialize(sim: Simulation): () =
        //If you had a simulation with per body gravity stored in a CollidableProperty<T> or something similar, having the simulation provided in a callback can be helpful.
        ()

    //Gets how the pose integrator should handle angular velocity integration.
    AngularIntegrationMode: AngularIntegrationMode get() = AngularIntegrationMode.Nonconserving

    /// <summary>
    /// Gets whether the integrator should use substepping for unconstrained bodies when using a substepping solver.
    /// If true, unconstrained bodies will be integrated with the same number of substeps as the constrained bodies in the solver.
    /// If false, unconstrained bodies use a single step of length equal to the dt provided to Simulation.Timestep. 
    /// </summary>
    AllowSubstepsForUnconstrainedBodies: bool get() = false

    /// Gets whether the velocity integration callback should be called for kinematic bodies.
    /// If true, IntegrateVelocity will be called for bundles including kinematic bodies.
    /// If false, kinematic bodies will just continue using whatever velocity they have set.
    /// Most use cases should set this to false.
    IntegrateVelocityForKinematics: bool get() = false

    mutable Gravity: Vector3

    new(gravity: Vector3) =
        {
            Gravity = gravity
            gravityWideDt = default
        }

    //Note that velocity integration uses "wide" types. These are array-of-struct-of-arrays types that use SIMD accelerated types underneath.
    //Rather than handling a single body at a time, the callback handles up to Vector<float>.Count bodies simultaneously.
    private mutable gravityWideDt: Vector3Wide

    /// <summary>
    /// Callback invoked ahead of dispatches that may call into <see cref="IntegrateVelocity"/>.
    /// It may be called more than once with different values over a frame. For example, when performing bounding box prediction, velocity is integrated with a full frame time step duration.
    /// During substepped solves, integration is split into substepCount steps, each with fullFrameDuration / substepCount duration.
    /// The final integration pass for unconstrained bodies may be either fullFrameDuration or fullFrameDuration / substepCount, depending on the value of AllowSubstepsForUnconstrainedBodies. 
    /// </summary>
    /// <param name="dt">Current integration time step duration.</param>
    /// <remarks>This is typically used for precomputing anything expensive that will be used across velocity integration.</remarks>
    mutable PrepareForIntegration(dt: float32): () =
        //No reason to recalculate gravity * dt for every body; just cache it ahead of time.
        this.gravityWideDt <- Vector3Wide.Broadcast(this.Gravity * dt)

    /// <summary>
    /// Callback for a bundle of bodies being integrated.
    /// </summary>
    /// <param name="bodyIndices">Indices of the bodies being integrated in this bundle.</param>
    /// <param name="position">Current body positions.</param>
    /// <param name="orientation">Current body orientations.</param>
    /// <param name="localInertia">Body's current local inertia.</param>
    /// <param name="integrationMask">Mask indicating which lanes are active in the bundle. Active lanes will contain 0xFFFFFFFF, inactive lanes will contain 0.</param>
    /// <param name="workerIndex">Index of the worker thread processing this bundle.</param>
    /// <param name="dt">Durations to integrate the velocity over. Can vary over lanes.</param>
    /// <param name="velocity">Velocity of bodies in the bundle. Any changes to lanes which are not active by the integrationMask will be discarded.</param>
    mutable IntegrateVelocity(bodyIndices: Vector<int32>, position: Vector3Wide, orientation: QuaternionWide, localInertia: BodyInertiaWide, integrationMask: Vector<int32>, workerIndex: int32, dt: Vector<float32>, velocity: byref<BodyVelocityWide>): () =
        //No reason to recalculate gravity * dt for every body; just cache it ahead of time.
        velocity.Linear <- velocity.Linear + this.gravityWideDt

newtype StaticObjectId =
    Value: int32

newtype DynamicObjectId =
    Value: int32
    
#[open]
struct PhysicsObject =
    private mutable tag: int32
    private mutable objId: int32

    internal HasInvalidTag: bool get() = this.tag == -1

    internal new (tag: int32, objId: int32) =
        {
            tag = tag
            objId = objId
        }

    pattern DynamicObject(obj: PhysicsObject): DynamicObjectId when (obj.tag == 0) =>
        DynamicObjectId(obj.objId)

    pattern StaticObject(obj: PhysicsObject): StaticObjectId when (obj.tag == 1) =>
        StaticObjectId(obj.objId)

sealed class Physics =

    private ThreadDispatcher: ThreadDispatcher
    private Simulation: Simulation

    internal new(sim: Simulation) =
        //Any IThreadDispatcher implementation can be used for multithreading. Here, we use the BepuUtilities.ThreadDispatcher implementation.
        let threadDispatcher = ThreadDispatcher(Environment.ProcessorCount, 16384)
        {
            ThreadDispatcher = threadDispatcher
            Simulation = sim
        }

    private GetBodyReference(objId: DynamicObjectId): BodyReference =
        this.Simulation.Bodies.get_Item(BodyHandle(objId.Value))

    AddDynamicBox(width: float32, height: float32, length: float32, position: Vector3): DynamicObjectId =
        let mutable box = Box(width, height, length)

        let typedIndex = this.Simulation.Shapes.Add(&box)

        let pose = RigidPose(position)
        let inertia = box.ComputeInertia(1)
        let collidableDesc = CollidableDescription.op_Implicit(typedIndex)
        let bodyActivityDesc = BodyActivityDescription.op_Implicit(0.01)
        let mutable desc = BodyDescription.CreateDynamic(pose, inertia, collidableDesc, bodyActivityDesc)

        let handle = this.Simulation.Bodies.Add(&desc)
        DynamicObjectId(handle.Value)

    AddStaticBox(width: float32, height: float32, length: float32, position: Vector3): StaticObjectId =
        let mutable box = Box(width, height, length)

        let typedIndex = this.Simulation.Shapes.Add(&box)

        let pose = RigidPose(position)
        let mutable desc = StaticDescription(pose, typedIndex)

        let handle = this.Simulation.Statics.Add(&desc)
        StaticObjectId(handle.Value)

    SetPosition(objId: DynamicObjectId, position: Vector3): () =
        let mutable bodyRef = this.Simulation.Bodies.get_Item(BodyHandle(objId.Value))
        let poseRef = bodyRef.Pose
        poseRef <- RigidPose(position)

    SetPosition(objId: StaticObjectId, position: Vector3): () =
        let mutable bodyRef = this.Simulation.Statics.get_Item(StaticHandle(objId.Value))
        let poseRef = bodyRef.Pose
        poseRef <- RigidPose(position)

    GetPositionAndOrientation(objId: DynamicObjectId, position: byref<Vector3>, orientation: byref<Quaternion>): () =
        let mutable bodyRef = this.Simulation.Bodies.get_Item(BodyHandle(objId.Value))
        let poseRef = bodyRef.Pose
        let pose = poseRef

        position <- pose.Position
        orientation <- pose.Orientation

    static CreatePhysicsObjectFromCollidableReference(mutable collidable: CollidableReference): PhysicsObject =
        if (collidable.StaticHandle.Value >= 0 && (fromEnum(collidable.Mobility)) == (fromEnum(CollidableMobility.Static)))
            PhysicsObject(1, collidable.StaticHandle.Value)
        else if (collidable.BodyHandle.Value >= 0 && (fromEnum(collidable.Mobility)) == (fromEnum(CollidableMobility.Dynamic)))
            PhysicsObject(0, collidable.BodyHandle.Value)
        else
            PhysicsObject(-1, -1)

    private struct RayHitHandler =
        implements IRayHitHandler

        mutable obj: PhysicsObject = PhysicsObject(-1, -1)
        mutable closestDistance: float32 = float32.MaxValue

        AllowTest(mutable collidable: CollidableReference): bool = collidable.BodyHandle.Value >= 0 || collidable.StaticHandle.Value > 0

        AllowTest(mutable collidable: CollidableReference, childIndex: int32): bool = collidable.BodyHandle.Value >= 0 || collidable.StaticHandle.Value > 0

        mutable OnRayHit(ray: inref<RayData>, maximumT: byref<float32>, t: float32, normal: inref<Vector3>, mutable collidable: CollidableReference, childIndex: int32): () =
            if (t < this.closestDistance)
                this.closestDistance <- t
                this.obj <- Physics.CreatePhysicsObjectFromCollidableReference(collidable)

    TryRayCast(mutable origin: Vector3, mutable direction: Vector3, distance: float32, hitObj: byref<PhysicsObject>): bool =
        let mutable hitHandler = Physics.RayHitHandler()
        this.Simulation.RayCast(&origin, &direction, distance, &hitHandler, 0)
        if (hitHandler.obj.HasInvalidTag)
            false
        else
            hitObj <- hitHandler.obj
            true

    ApplyImpulse(objId: DynamicObjectId, mutable impulse: Vector3): () =
        let mutable bodyRef = this.GetBodyReference(objId)
        bodyRef.Awake <- true
        bodyRef.ApplyLinearImpulse(&impulse)

    Update(deltaTime: float32): () =
        this.Simulation.Timestep(deltaTime, this.ThreadDispatcher)

    static Init(): Physics =
        //The buffer pool is a source of raw memory blobs for the engine to use.
        let bufferPool = BufferPool(131072, 16)

        //The following sets up a simulation with the callbacks defined above, and tells it to use 8 velocity iterations per substep and only one substep per solve.
        //It uses the default SubsteppingTimestepper. You could use a custom ITimestepper implementation to customize when stages run relative to each other, or to insert more callbacks.     
        let solveDesc = SolveDescription(8, 1, SolveDescription.DefaultFallbackBatchThreshold)
        let sim = Simulation.Create(bufferPool, NarrowPhaseCallbacks(), PoseIntegratorCallbacks(Vector3(0, 0, 10)), solveDesc, null, default)

        Physics(sim)
