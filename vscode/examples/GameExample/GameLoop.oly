// http://gafferongames.com/game-physics/fix-your-timestep/
module GameLoop

open System
open System.Diagnostics

#[inline] 
Start(fixedUpdateIntervalInFramesPerSecond: float64, #[inline] update: () -> (), #[inline] fixedUpdate: (t: float64, dt: float64) -> bool, #[inline] render: float64 -> ()): () =
    let mutable quit = false
    let stopwatch = Stopwatch.StartNew()

    let mutable t = 0.0
    let dt = (1000 / fixedUpdateIntervalInFramesPerSecond) * 0.001

   // let dtRender = (1000 / maxRenderFramesPerSecond) * 0.001

    let mutable currentTime = stopwatch.Elapsed.TotalSeconds
    let mutable accumulator = 0.0

    while (!quit)
        let mutable frameCount = 0
        let mutable frameMaxCount = 120
        let mutable frames = OlyArray.ZeroCreate<float64>(frameMaxCount)

        let newTime = stopwatch.Elapsed.TotalSeconds
        let mutable frameTime = newTime - currentTime
        if (frameTime > 0.25)
            frameTime <- 0.25
        currentTime <- newTime
        accumulator <- accumulator + frameTime

        update()

        let mutable fixedUpdateCount = 0
        while (accumulator >= dt)
            quit <- fixedUpdate(t, dt)
            t <- t + dt
            accumulator <- accumulator - dt
            fixedUpdateCount <- fixedUpdateCount + 1

        // ---------------------------
        frameCount <- frameCount + 1
        frames[frameCount % frameMaxCount] <- accumulator

        let smoothedAccumulator =
            let count = Math.Min(frameCount, frameMaxCount)
            let mutable smoothedAccumulator = 0.0
            let mutable i = 0
            while (i < count)
                smoothedAccumulator <- smoothedAccumulator + frames[i % frameMaxCount]
                i <- i + 1  
            frames[frameCount % frameCount] <- smoothedAccumulator             
            smoothedAccumulator
        // ---------------------------

        if (fixedUpdateCount > 0)
            let alpha = smoothedAccumulator / dt          
            render(alpha)