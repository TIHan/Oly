// http://gafferongames.com/game-physics/fix-your-timestep/
module GameLoop

open System
open System.Diagnostics

#[inline] 
Start(fixedUpdateInterval: float64, #[inline] update: () -> (), #[inline] fixedUpdate: (t: float64, dt: float64) -> bool, #[inline] render: float64 -> ()): () =
    // while ( !quit )
    // {
    //     double newTime = time();
    //     double frameTime = newTime - currentTime;
    //     if ( frameTime > 0.25 )
    //         frameTime = 0.25;
    //     currentTime = newTime;

    //     accumulator += frameTime;

    //     while ( accumulator >= dt )
    //     {
    //         previousState = currentState;
    //         integrate( currentState, t, dt );
    //         t += dt;
    //         accumulator -= dt;
    //     }

    //     const double alpha = accumulator / dt;

    //     State state = currentState * alpha + 
    //         previousState * ( 1.0 - alpha );

    //     render( state );
    // }

    let mutable quit = false
    let stopwatch = Stopwatch.StartNew()

    let mutable t = 0.0
    let dt = 0.016666666666666666666666666666666666666666666666666666666 //0.01

    let mutable currentTime = stopwatch.Elapsed.TotalSeconds
    let mutable accumulator = 0.0

    while (!quit)
        let mutable frameCount = 0
        let mutable frameMaxCount = 120
        let mutable frames = OlyArray.ZeroCreate<float64>(frameMaxCount)

        let newTime = stopwatch.Elapsed.TotalSeconds
        let mutable frameTime = newTime - currentTime
        if (frameTime > 0.25)
            frameTime <- 0.25
        currentTime <- newTime

        accumulator <- accumulator + frameTime

        update()

        while (accumulator >= dt)
            quit <- fixedUpdate(t, dt)
            t <- t + dt
            accumulator <- accumulator - dt

        frameCount <- frameCount + 1
        frames[frameCount % frameMaxCount] <- accumulator

        let smoothedAccumulator =
            let count = Math.Min(frameCount, frameMaxCount)
            let mutable accumulator = 0.0
            let mutable i = 0
            while (i < count)
                accumulator <- accumulator + frames[i % frameMaxCount]
                i <- i + 1               
            accumulator

        let alpha = smoothedAccumulator / dt

        render(alpha)