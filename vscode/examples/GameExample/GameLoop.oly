// http://gafferongames.com/game-physics/fix-your-timestep/
module GameLoop

open System
open System.Diagnostics

private ConvertSecondsToTicks(seconds: float64): int64 = TimeSpan.FromSeconds(seconds).Ticks
private ConvertTicksToSeconds(ticks: int64): float64 = TimeSpan.FromTicks(ticks).TotalSeconds
private ConvertFramesPerSecondToSeconds(fps: float64): float64 = (1000 / fps) * 0.001
private ConvertFramesPerSecondToTicks(fps: float64): int64 = ConvertSecondsToTicks(ConvertFramesPerSecondToSeconds(fps))

#[inline] 
Start(#[inline] preUpdate: float64 -> (), #[inline] fixedUpdate: float64 -> bool, #[inline] update: float64 -> bool, #[inline] render: (float64, float64) -> ()): () =
    let tickRate: uint8 = 60
    let mutable quit = false
    let stopwatch = Stopwatch.StartNew()
    let getTicks() = stopwatch.Elapsed.Ticks

    let skip = ConvertFramesPerSecondToTicks(1)

    let dtFixed = ConvertFramesPerSecondToTicks(float64(tickRate))

    let mutable currentTime = getTicks()
    let mutable accumulator = 0: int64
    let mutable renderAccumulator = 0: int64

    let mutable updateDtRender = false

    while (!quit)
        let newTime = getTicks()
        let frameTime = newTime - currentTime
        currentTime <- newTime
        renderAccumulator <- renderAccumulator + frameTime

        accumulator <- 
            if (frameTime > skip)
                accumulator + skip
            else
                accumulator + frameTime

        preUpdate(ConvertTicksToSeconds(frameTime))

        let mutable fixedUpdateCount = 0
        while (accumulator >= dtFixed)
            quit <- fixedUpdate(ConvertTicksToSeconds(dtFixed))
            accumulator <- accumulator - dtFixed
            fixedUpdateCount <- fixedUpdateCount + 1

        quit <- update(ConvertTicksToSeconds(frameTime))

        if (fixedUpdateCount > 0)
            let alpha = float64(1)
            render(ConvertTicksToSeconds(dtFixed * int64(fixedUpdateCount)), alpha)