// http://gafferongames.com/game-physics/fix-your-timestep/
module GameLoop

open System
open System.Diagnostics

private ConvertSecondsToTicks(seconds: float64): int64 = TimeSpan.FromSeconds(seconds).Ticks
private ConvertTicksToSeconds(ticks: int64): float64 = TimeSpan.FromTicks(ticks).TotalSeconds
private ConvertFramesPerSecondToSeconds(fps: float64): float64 = (1000 / fps) * 0.001
private ConvertFramesPerSecondToTicks(fps: float64): int64 = ConvertSecondsToTicks(ConvertFramesPerSecondToSeconds(fps))

#[inline] 
Start(tickRate: uint8, maxFps: uint16, #[inline] update: () -> (), #[inline] fixedUpdate: float64 -> bool, #[inline] render: (float64, float64) -> ()): () =
    let mutable quit = false
    let stopwatch = Stopwatch.StartNew()
    let getTicks() = stopwatch.Elapsed.Ticks

    let tickError: int64 = int64(float64(Stopwatch.Frequency) * 0.0002)

    let skip = ConvertFramesPerSecondToTicks(1)

    let mutable t = 0: int64
    let fixedDeltaTime = ConvertFramesPerSecondToTicks(float64(tickRate))
    let dtRenderMax = ConvertFramesPerSecondToTicks(float64(maxFps))
    let mutable dtRender = dtRenderMax
    let mutable dt = fixedDeltaTime

    let mutable currentTime = getTicks()
    let mutable accumulator = 0: int64
    let mutable renderAccumulator = 0: int64

    let mutable updateDtRender = false

    while (!quit)
        let newTime = getTicks()
        let mutable frameTime = newTime - currentTime
        currentTime <- newTime

        if (updateDtRender)
            updateDtRender <- false
            dtRender <- System.Math.Max(frameTime, dtRenderMax)
        renderAccumulator <- renderAccumulator + frameTime

        if (frameTime > skip)
            frameTime <- skip
        accumulator <- accumulator + frameTime

        update()

        while (accumulator >= dt)
            quit <- fixedUpdate(ConvertTicksToSeconds(dt))
            t <- t + dt
            accumulator <- accumulator - dt
            updateDtRender <- true

        // If we over-accumulated, then snap back.
        if (renderAccumulator > (dtRender * 2))
            renderAccumulator <- dtRender

        if (renderAccumulator >= dtRender)
            let alpha = float64(accumulator) / float64(dt)          
            render(ConvertTicksToSeconds(frameTime), alpha)
            if (dtRender == dtRenderMax)
                renderAccumulator <- tickError
            else
                renderAccumulator <- renderAccumulator - dtRender