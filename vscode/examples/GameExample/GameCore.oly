module Game.Core

open System
open System.Text
open System.Numerics
open System.Collections.Generic
open Evergreen.Graphics
open Evergreen.Graphics.UI
open Evergreen.Physics
open System.Runtime.InteropServices

DefaultVertexCode: string = System.IO.File.ReadAllText("GameExample/default.vert")

DefaultFragmentCode: string = System.IO.File.ReadAllText("GameExample/default.frag")

DefaultComputeCode: string = System.IO.File.ReadAllText("GameExample/transform_rotation.comp")

radians(degrees: float64): float64 = degrees * System.Math.PI / 180
radians(degrees: float32): float32 = float32(radians(float64(degrees)))

clamp(min: float32, max: float32, value: float32): float32 =
    if (max <= min)
        throw (System.ArgumentException("Invalid Min Max"))

    if (value < min)
        min
    else if (value > max)
        max
    else
        value

#[StructLayout(LayoutKind.Sequential)]
struct PointLight =
    mutable Position: Vector3 = Vector3.Zero
    Padding: float32 = 0

struct Camera =
    mutable Transform: Transform
    mutable Projection: Matrix4x4

    private mutable yaw: float32
    private mutable pitch: float32

    private static get DefaultRotation: Quaternion = Quaternion.CreateFromAxisAngle(Vector3.UnitX, radians(90))

    new(fov: float32, width: int32, height: int32, nearPlaneDistance: float32, farPlaneDistance: float32) =
        {
            Transform = Transform(Matrix4x4.CreateFromQuaternion(Camera.DefaultRotation))
            Projection = Matrix4x4.CreatePerspectiveFieldOfView(radians(fov), float32(width) / float32(height), nearPlaneDistance, farPlaneDistance)
            yaw = 0
            pitch = 0
        }

    Yaw: float32
        get() = this.yaw
        
    Pitch: float32
        get() = this.pitch

    mutable SetYawPitch(yaw: float32, pitch: float32): () =
        this.yaw <- yaw
        this.pitch <- pitch
        let position = this.Transform.Position
        let rotation = Camera.DefaultRotation * Quaternion.CreateFromYawPitchRoll(-yaw, -pitch, 0)
        this.Transform <- Transform.Create(position, rotation, Vector3.One)

#[open]
extension Vector3Extensions =
    inherits Vector3

    static Forward: Vector3 get() = -Vector3.UnitZ
    static Back: Vector3 get() = Vector3.UnitZ
    static Left: Vector3 get() = -Vector3.UnitX
    static Right: Vector3 get() = Vector3.UnitX

(*)(v: Vector3, s: float32): Vector3 = Vector3.Multiply(v, s)

#[StructLayout(LayoutKind.Sequential)]
struct Transform =
    mutable Matrix: Matrix4x4

    new(matrix: Matrix4x4) = { Matrix = matrix }

    Position: Vector3
        get() = this.Matrix.Translation
        set(value) = this.Matrix.Translation <- value

    Rotation: Quaternion
        get() = Quaternion.CreateFromRotationMatrix(this.Matrix)

    Scale: Vector3
        get() = 
            let mutable scale = Vector3.Zero
            let mutable rotation = Quaternion.Identity
            let mutable position = Vector3.Zero
            if (Matrix4x4.Decompose(this.Matrix, &scale, &rotation, &position))
                scale
            else
                Vector3.Zero

    Forward: Vector3
        get() = Vector3.Transform(Vector3.Forward, this.Rotation)

    Back: Vector3
        get() = Vector3.Transform(Vector3.Back, this.Rotation)

    Left: Vector3
        get() = Vector3.Transform(Vector3.Left, this.Rotation)

    Right: Vector3
        get() = Vector3.Transform(Vector3.Right, this.Rotation)

    WorldToLocalMatrix: Matrix4x4
        get() =
            let mutable inverted = Matrix4x4.Identity
            let didSucceed = Matrix4x4.Invert(this.Matrix, &inverted)
            inverted

    static Create(position: Vector3, rotation: Quaternion, scale: Vector3): Transform =
        let rotationMatrix = Matrix4x4.CreateFromQuaternion(rotation)
        let mutable scaleMatrix = Matrix4x4.CreateScale(scale)
        scaleMatrix.Translation <- position
        Transform(rotationMatrix * scaleMatrix)

#[StructLayout(LayoutKind.Sequential)]
struct EntityId =
    mutable Index: int32 = 0
    mutable Version: uint32 = 0

    IsNil: bool get() = this.Version == 0

sealed class Archetype<T0> where T0: unmanaged =
    get set Count: int32

    EntityIds: EntityId[||]
    Buffer0: T0[||]

    new(size: int32) =
        {
            Count = 0
            EntityIds = Array.ZeroCreate(size)
            Buffer0 = Array.ZeroCreate(size)
        }

sealed class Archetype<T0, T1> where T0: unmanaged 
                               where T1: unmanaged =
    get set Count: int32

    Lookup: int32[||]
    EntityIds: EntityId[||]
    Buffer0: T0[||]
    Buffer1: T1[||]

    new(size: int32) =
        {
            Count = 0
            Lookup  = Array.ZeroCreate(size)
            EntityIds = Array.ZeroCreate(size)
            Buffer0 = Array.ZeroCreate(size)
            Buffer1 = Array.ZeroCreate(size)
        }

    Add(entId: EntityId, item0: T0, item1: T1): () =
        let index = this.Count
        this.Count <- this.Count + 1

        this.Lookup[entId.Index] <- index
        this.EntityIds[index] <- entId
        this.Buffer0[index] <- item0
        this.Buffer1[index] <- item1

sealed class Archetype<T0, T1, T2> where T0: unmanaged 
                                   where T1: unmanaged 
                                   where T2: unmanaged =
    get set Count: int32

    EntityIds: EntityId[||]
    Lookup: int32[||]
    Buffer0: T0[||]
    Buffer1: T1[||]
    Buffer2: T2[||]

    new(size: int32) =
        {
            Count = 0
            Lookup  = Array.ZeroCreate(size)
            EntityIds = Array.ZeroCreate(size)
            Buffer0 = Array.ZeroCreate(size)
            Buffer1 = Array.ZeroCreate(size)
            Buffer2 = Array.ZeroCreate(size)
        }

    Add(entId: EntityId, item0: T0, item1: T1, item2: T2): () =
        let index = this.Count
        this.Count <- this.Count + 1

        this.Lookup[entId.Index] <- index
        this.EntityIds[index] <- entId
        this.Buffer0[index] <- item0
        this.Buffer1[index] <- item1
        this.Buffer2[index] <- item2

sealed class Archetype<T0, T1, T2, T3> where T0: unmanaged 
                                       where T1: unmanaged 
                                       where T2: unmanaged 
                                       where T3: unmanaged =
    get set Count: int32

    EntityIds: EntityId[||]
    Buffer0: T0[||]
    Buffer1: T1[||]
    Buffer2: T2[||]
    Buffer3: T3[||]

    new(size: int32) =
        {
            Count = 0
            EntityIds = Array.ZeroCreate(size)
            Buffer0 = Array.ZeroCreate(size)
            Buffer1 = Array.ZeroCreate(size)
            Buffer2 = Array.ZeroCreate(size)
            Buffer3 = Array.ZeroCreate(size)
        }

sealed class World =

    private mutable nextIndex: int32 = 0
    private mutable indexQueue: Queue<int32> = Queue()
    private mutable entityCount: int32 = 0
    private entityVersions: uint32[||] = Array.ZeroCreate<uint32>(1024)

    Archetype_StaticBox:  Archetype<Transform, StaticObjectId>              = Archetype(1024)
    Archetype_Box:        Archetype<Transform, DynamicObjectId>             = Archetype(1024)
    Archetype_Light:      Archetype<Transform, DynamicObjectId, PointLight> = Archetype(1024)

    private NewEntityId(): EntityId =
        let index =
            if (this.indexQueue.Count == 0)
                let index = this.nextIndex
                this.nextIndex <- this.nextIndex + 1
                index
            else
                this.indexQueue.Dequeue()

        let version = this.entityVersions[index] + 1
        this.entityVersions[index] <- version

        let mutable entId = EntityId()
        entId.Index <- index
        entId.Version <- version
        entId

    CreateStaticBox(transform: Transform, staticObjId: StaticObjectId): EntityId =
        let entId = this.NewEntityId()
        this.Archetype_StaticBox.Add(entId, transform, staticObjId)
        entId

    CreateBox(transform: Transform, dynamicObjId: DynamicObjectId): EntityId =
        let entId = this.NewEntityId()
        this.Archetype_Box.Add(entId, transform, dynamicObjId)
        entId

    CreateLight(transform: Transform, dynamicObjId: DynamicObjectId, pointLight: PointLight): EntityId =
        let entId = this.NewEntityId()
        this.Archetype_Light.Add(entId, transform, dynamicObjId, pointLight)
        entId

