namespace AudioManager

open System
open System.IO
open System.IO.MemoryMappedFiles
open System.Collections.Generic
open SharpDX.Multimedia
open SharpDX.XAudio2

enum AudioKind =
    | XAudio2

class Audio =

    Kind: AudioKind

    new(kind: AudioKind) =
        {
            Kind = kind
        }

    abstract default Play(): () = ()

    abstract default Close(): () = ()

sealed class XAudio2Impl =
    inherits Audio

    SourceVoice: SourceVoice
    Buffer: AudioBuffer

    new(kind: AudioKind, sourceVoice: SourceVoice, buffer: AudioBuffer) =
        base(kind) with { SourceVoice = sourceVoice; Buffer = buffer }

    overrides Play(): () =
        this.SourceVoice.Start()

    overrides Close(): () =
        this.SourceVoice.DestroyVoice()
        this.SourceVoice.Dispose()
        this.Buffer.Stream.Dispose()

sealed class AudioManager =
    implements IDisposable

    private audio2: XAudio2
    private masteringVoice: MasteringVoice
    private instances: List<Audio>

    new() =
        let audio2 = XAudio2()
        {
            audio2 = audio2
            masteringVoice = MasteringVoice(audio2, 2, 44100)
            instances = List<Audio>()
        }

    CreateFromStream(kind: AudioKind, stream: Stream): Audio =
        match (kind)
        | AudioKind.XAudio2 =>
            let stream = SoundStream(stream)
            let format = stream.Format
            let buffer = AudioBuffer()
            buffer.Stream <- stream.ToDataStream()
            buffer.AudioBytes <- int32(stream.Length)
            buffer.Flags <- BufferFlags.EndOfStream
            stream.Close()
        
            let sourceVoice = SourceVoice(this.audio2, format, false)
            sourceVoice.SubmitSourceBuffer(buffer, stream.DecodedPacketsInfo)

            let audio = XAudio2Impl(AudioKind.XAudio2, sourceVoice, buffer)
            this.instances.Add(audio)
            audio
        | _ =>
            fail("Invalid audio kind.")

    Clear(): () =
        let mutable i = 0
        while (i < this.instances.Count)
            let audio = this.instances[i]
            audio.Close()
            i <- i + 1
        this.instances.Clear()

    Dispose(): () =
        this.masteringVoice.Dispose()
        this.audio2.Dispose()