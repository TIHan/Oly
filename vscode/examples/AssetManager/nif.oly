module AssetManager.FileExtensions.Nif

open System
open System.IO
open System.IO.MemoryMappedFiles
open System.Collections.Generic

private alias hfloat = uint16

private cntlz(x: uint32): uint32 =
    let x0  : uint32 = x >> 1
    let x1  : uint32 = x | x0
    let x2  : uint32 = x1 >> 2
    let x3  : uint32 = x1 | x2
    let x4  : uint32 = x3 >> 4
    let x5  : uint32 = x3 | x4
    let x6  : uint32 = x5 >> 8
    let x7  : uint32 = x5 | x6
    let x8  : uint32 = x7 >> 16
    let x9  : uint32 = x7 | x8
    let xA  : uint32 = ~x9
    let xB  : uint32 = xA >> 1
    let xC  : uint32 = xB & 0x55555555
    let xD  : uint32 = xA - xC
    let xE  : uint32 = xD & 0x33333333
    let xF  : uint32 = xD >> 2
    let x10 : uint32 = xF & 0x33333333
    let x11 : uint32 = xE + x10
    let x12 : uint32 = x11 >> 4
    let x13 : uint32 = x11 + x12
    let x14 : uint32 = x13 & 0x0f0f0f0f
    let x15 : uint32 = x14 >> 8
    let x16 : uint32 = x14 + x15
    let x17 : uint32 = x16 >> 16
    let x18 : uint32 = x16 + x17
    let x19 : uint32 = x18 & 0x0000003f
    x19

private Ext(a: uint32): uint32 =
    uint32(int32(a) >> 31)

private SelectOnSignBit(testn: uint32, a: uint32, b: uint32): uint32 =
    let mask = Ext(testn)
    let sel_a = a & mask
    let sel_b = b & ~mask
    let result = sel_a | sel_b
    result

private HalfToFloat(h: hfloat): float32 =
    let h = uint32(h)

    let h_e_mask              : uint32 = 0x00007c00
    let h_m_mask              : uint32 = 0x000003ff
    let h_s_mask              : uint32 = 0x00008000
    let h_f_s_pos_offset      : uint32 = 0x00000010
    let h_f_e_pos_offset      : uint32 = 0x0000000d
    let h_f_bias_offset       : uint32 = 0x0001c000
    let f_e_mask              : uint32 = 0x7f800000
    let f_m_mask              : uint32 = 0x007fffff
    let h_f_e_denorm_bias     : uint32 = 0x0000007e
    let h_f_m_denorm_sa_bias  : uint32 = 0x00000008
    let f_e_pos               : uint32 = 0x00000017
    let h_e_mask_minus_one    : uint32 = 31743 //0x00007bff // TODO: This fails with invalid literal.

    let h_e                   = h & h_e_mask
    let h_m                   = h & h_m_mask
    let h_s                   = h & h_s_mask
    let h_e_f_bias            = h_e + h_f_bias_offset
    let h_m_nlz               = cntlz(h_m)
    let f_s                   = h_s << (int32(h_f_s_pos_offset))
    let f_e                   = h_e_f_bias << (int32(h_f_e_pos_offset))
    let f_m                   = h_m << (int32(h_f_e_pos_offset))
    let f_em                  = f_e | f_m
    let h_f_m_sa              = h_m_nlz - h_f_m_denorm_sa_bias
    let f_e_denorm_unpacked   = h_f_e_denorm_bias - h_f_m_sa
    let h_f_m                 = h_m << (int32(h_f_m_sa))
    let f_m_denorm            = h_f_m & f_m_mask
    let f_e_denorm            = f_e_denorm_unpacked << (int32(f_e_pos))
    let f_em_denorm           = f_e_denorm | f_m_denorm
    let f_em_nan              = f_e_mask | f_m
    let is_e_eqz_msb          = h_e - 1
    let is_m_nez_msb          = uint32(-int64(h_m))
    let is_e_flagged_msb      = h_e_mask_minus_one - h_e
    let is_zero_msb           = is_e_eqz_msb & ~is_m_nez_msb
    let is_inf_msb            = is_e_flagged_msb & ~is_m_nez_msb
    let is_denorm_msb         = is_m_nez_msb & is_e_eqz_msb
    let is_nan_msb            = is_e_flagged_msb & is_m_nez_msb
    let is_zero               = Ext(is_zero_msb)
    let f_zero_result         = f_em & ~is_zero
    let f_denorm_result       = SelectOnSignBit(is_denorm_msb, f_em_denorm, f_zero_result)
    let f_inf_result          = SelectOnSignBit(is_inf_msb, f_e_mask, f_denorm_result)
    let f_nan_result          = SelectOnSignBit(is_nan_msb, f_em_nan, f_inf_result)
    let mutable f_result      = f_s | f_nan_result

    let result: float32* = ToPtr(&&f_result)
    *result
    // TODO: There a way we can fix the language to not have to be explicit with type arguments?
    //*ToPtr<_, float32>(&&f_result) // TODO: Fix this, produces invalid IL.

private ReadHFloat(reader: BinaryReader, endianType: EndianType): hfloat =
    ReadUInt16(reader, endianType)

// A float in the range -1.0:1.0
private alias normbyte = byte

private ReadNormByte(reader: BinaryReader, endianType: EndianType): normbyte =
    reader.ReadByte()

struct Vector3 =
    mutable X: float32 = 0
    mutable Y: float32 = 0
    mutable Z: float32 = 0

private ReadVector3(reader: BinaryReader, endianType: EndianType): Vector3 =
    let mutable v = Vector3()

    v.X <- ReadFloat32(reader, endianType)
    v.Y <- ReadFloat32(reader, endianType)
    v.Z <- ReadFloat32(reader, endianType)

    v

struct ByteVector3 =
    mutable X: normbyte = 0
    mutable Y: normbyte = 0
    mutable Z: normbyte = 0

private ReadByteVector3(reader: BinaryReader, endianType: EndianType): ByteVector3 =
    let mutable v = ByteVector3()

    v.X <- ReadNormByte(reader, endianType)
    v.Y <- ReadNormByte(reader, endianType)
    v.Z <- ReadNormByte(reader, endianType)

    v

private struct HalfVector3 =
    mutable X: hfloat = 0
    mutable Y: hfloat = 0
    mutable Z: hfloat = 0

private ReadHalfVector3(reader: BinaryReader, endianType: EndianType): HalfVector3 =
    let mutable v = HalfVector3()

    v.X <- ReadHFloat(reader, endianType)
    v.Y <- ReadHFloat(reader, endianType)
    v.Z <- ReadHFloat(reader, endianType)

    v

private struct Color3 =
    mutable R: float32 = default
    mutable G: float32 = default
    mutable B: float32 = default

private ReadColor3(reader: BinaryReader, endianType: EndianType): Color3 =
    let mutable color = Color3()

    color.R <- ReadFloat32(reader, endianType)
    color.G <- ReadFloat32(reader, endianType)
    color.B <- ReadFloat32(reader, endianType)

    color

private struct ByteColor4 =
    mutable R: byte = default
    mutable G: byte = default
    mutable B: byte = default
    mutable A: byte = default

private ReadByteColor4(reader: BinaryReader): ByteColor4 =
    let mutable color = ByteColor4()

    color.R <- reader.ReadByte()
    color.G <- reader.ReadByte()
    color.B <- reader.ReadByte()
    color.A <- reader.ReadByte()

    color

private struct Matrix33 =
    mutable M11: float32 = 1 // top left
    mutable M21: float32 = 0
    mutable M31: float32 = 0 // bottom left

    mutable M12: float32 = 0
    mutable M22: float32 = 1
    mutable M32: float32 = 0

    mutable M13: float32 = 0 // top right
    mutable M23: float32 = 0
    mutable M33: float32 = 1 // bottom right

private ReadMatrix33(reader: BinaryReader, endianType: EndianType): Matrix33 =
    let mutable m = Matrix33()

    m.M11 <- ReadFloat32(reader, endianType)
    m.M21 <- ReadFloat32(reader, endianType)
    m.M31 <- ReadFloat32(reader, endianType)

    m.M12 <- ReadFloat32(reader, endianType)
    m.M22 <- ReadFloat32(reader, endianType)
    m.M32 <- ReadFloat32(reader, endianType)

    m.M13 <- ReadFloat32(reader, endianType)
    m.M23 <- ReadFloat32(reader, endianType)
    m.M33 <- ReadFloat32(reader, endianType)

    m

struct Triangle =
    mutable V1: uint16 = 0
    mutable V2: uint16 = 0
    mutable V3: uint16 = 0

private ReadTriangle(reader: BinaryReader, endianType: EndianType): Triangle =
    let mutable tri = Triangle()

    tri.V1 <- ReadUInt16(reader, endianType)
    tri.V2 <- ReadUInt16(reader, endianType)
    tri.V3 <- ReadUInt16(reader, endianType)

    tri

private struct NiBound =
    mutable Center: Vector3 = Vector3()
    mutable Radius: float32 = 0

ReadNiBound(reader: BinaryReader, endianType: EndianType): NiBound =
    let mutable ni = NiBound()

    ni.Center <- ReadVector3(reader, endianType)
    ni.Radius <- ReadFloat32(reader, endianType)

    ni

struct TexCoord =
    mutable U: float32 = 0
    mutable V: float32 = 0

ReadTexCoord(reader: BinaryReader, endianType: EndianType): TexCoord =
    let mutable texCoord = TexCoord()

    texCoord.U <- ReadFloat32(reader, endianType)
    texCoord.V <- ReadFloat32(reader, endianType)

    texCoord

private struct HalfTexCoord =
    mutable U: hfloat = 0
    mutable V: hfloat = 0

ReadHalfTexCoord(reader: BinaryReader, endianType: EndianType): HalfTexCoord =
    let mutable texCoord = HalfTexCoord()

    texCoord.U <- ReadHFloat(reader, endianType)
    texCoord.V <- ReadHFloat(reader, endianType)

    texCoord

private struct BSStreamHeader =
    mutable BSVersion: uint32 = 0
    mutable Author: string = ""
    mutable ProcessScript: string = ""
    mutable ExportScript: string = ""

private enum EndianType =
    | Little
    | Big

private enum NifVertexAttribute =
    inherits uint16

    | Vertex        = 0b0000000000
    | UVs           = 0b0000000001
    | UVs2          = 0b0000000010
    | Normals       = 0b0000000100
    | Tangents      = 0b0000001000
    | VertexColors  = 0b0000010000
    | Skinned       = 0b0000100000
    | LandData      = 0b0001000000
    | EyeData       = 0b0010000000
    | Instance      = 0b0100000000
    | FullPrecision = 0b1000000000

private enum BSVertexDesc =
    inherits uint64

    | VertexDataSize            = 0xF
    | DynamicVertexSize         = 0xF0
    | UV1Offset                 = 0xF00
    | UV2Offset                 = 0xF000
    | NormalOffset              = 0xF0000
    | TangentOffset             = 0xF00000
    | ColorOffset               = 0xF000000
    | SkinningDataOffset        = 0xF0000000
    | LandscapeDataOffset       = 0xF00000000
    | EyeDataOffset             = 0xF000000000
    | Unused01                  = 0xF0000000000
    | VertexAttributes          = 0xFFF00000000000 // 12 width

private ReadBSVertexDesc(reader: BinaryReader, endianType: EndianType): BSVertexDesc =
    toEnum(ReadUInt64(reader, endianType))

// Only for Skyrim SE - 20.2.0.7 version
private sealed class Header =
    mutable HeaderString: string = ""
    mutable Version: uint32 = 0
    mutable EndianType: EndianType = EndianType.Little
    mutable UserVersion: uint32 = 0
    mutable BlockCount: uint32 = 0
    mutable BSStreamHeader: BSStreamHeader = BSStreamHeader()
    mutable BlockTypeCount: uint16 = 0
    mutable BlockTypes: List<string> = List<string>()
    mutable BlockTypeIndices: List<uint16> = List<uint16>()
    mutable BlockSizes: List<uint32> = List<uint32>()
    mutable StringCount: uint32 = 0
    mutable MaxStringLength: uint32 = 0
    mutable Strings: List<string> = List<string>()
    mutable GroupCount: uint32 = 0
    mutable Groups: List<uint32> = List<uint32>()

private class NiObjectNET =
    mutable ShaderType: uint32 = 0 // Only exists for Skyrim SE/FO4 20.2.0.7, only for BSLightingShaderProperty
    mutable Name: string = ""
    mutable ExtraDataListCount: uint32 = 0
    mutable ExtraDataList: List<int32> = List<int32>()
    mutable Controller: int32 = -1

private ReadNiObjectNET(reader: BinaryReader, header: Header, ni: NiObjectNET): () =
    let endianType = header.EndianType
    let strings = header.Strings

    ni.Name <- ReadNiFixedString(reader, endianType, strings)
    ni.ExtraDataListCount <- ReadUInt32(reader, endianType)
    ni.ExtraDataList <- ReadList(reader, int32(ni.ExtraDataListCount), reader -> ReadInt32(reader, endianType))
    ni.Controller <- ReadInt32(reader, endianType)

private ReadNiObjectNET_BSLightingShaderProperty(reader: BinaryReader, header: Header, ni: NiObjectNET): () =
    let endianType = header.EndianType
    
    ni.ShaderType <- ReadUInt32(reader, endianType)
    ReadNiObjectNET(reader, header, ni)

private class NiAVObject =
    inherits NiObjectNET

    mutable Flags: uint32 = 0
    mutable Translation: Vector3 = Vector3()
    mutable Rotation: Matrix33 = Matrix33()
    mutable Scale: float32 = 1
    mutable CollisionObject: int32 = -1

private ReadNiAVObject(reader: BinaryReader, header: Header, ni: NiAVObject): () =
    let endianType = header.EndianType

    ReadNiObjectNET(reader, header, ni)
    
    ni.Flags <- ReadUInt32(reader, endianType)
    ni.Translation <- ReadVector3(reader, endianType)
    ni.Rotation <- ReadMatrix33(reader, endianType)
    ni.Scale <- ReadFloat32(reader, endianType)
    ni.CollisionObject <- ReadInt32(reader, endianType)

private class BSFadeNode =
    inherits NiAVObject

    mutable ChildrenCount: uint32 = 0
    mutable Children: List<int32> = List<int32>()
    mutable EffectCount: uint32 = 0 // only exists before FO4
    mutable Effects: List<int32> = List<int32>() // only exists before FO4

private ReadBSFadeNode(reader: BinaryReader, header: Header, node: BSFadeNode): () =
    let endianType = header.EndianType

    ReadNiAVObject(reader, header, node)

    node.ChildrenCount <- ReadUInt32(reader, endianType)
    node.Children <- ReadList(reader, int32(node.ChildrenCount), reader -> ReadInt32(reader, endianType))
    node.EffectCount <- ReadUInt32(reader, endianType)
    node.Effects <- ReadList(reader, int32(node.EffectCount), reader -> ReadInt32(reader, endianType))

private struct BSVertexDataSSE =
    mutable Vertex: Vector3 = default
    mutable BitangentX: float32 = default
    mutable UnusedW: uint32 = default
    mutable UV: HalfTexCoord = default
    mutable Normal: ByteVector3 = default
    mutable BitangentY: normbyte = default
    mutable Tangent: ByteVector3 = default
    mutable BitangentZ: normbyte = default
    mutable VertexColors: ByteColor4 = default
    mutable BoneWeights: hfloat[||] = unchecked default
    mutable BoneIndices: byte[||] = unchecked default
    mutable EyeData: float32 = default

private ReadBSVertexDataSSE(reader: BinaryReader, endianType: EndianType, vertexDesc: uint64): BSVertexDataSSE =
    let mutable vertexData = BSVertexDataSSE()

    if (vertexDesc & 0x1 != 0)
        vertexData.Vertex <- ReadVector3(reader, endianType)

    if (vertexDesc & 0x11 == 0x11)
        vertexData.BitangentX <- ReadFloat32(reader, endianType)

    if (vertexDesc & 0x11 == 0x1)
        vertexData.UnusedW <- ReadUInt32(reader, endianType)

    if (vertexDesc & 0x2 != 0)
        vertexData.UV <- ReadHalfTexCoord(reader, endianType)

    if (vertexDesc & 0x8 != 0)
        vertexData.Normal <- ReadByteVector3(reader, endianType)

    if (vertexDesc & 0x8 != 0)
        vertexData.BitangentY <- ReadNormByte(reader, endianType)

    if (vertexDesc & 0x18 == 0x18)
        vertexData.Tangent <- ReadByteVector3(reader, endianType)

    if (vertexDesc & 0x18 == 0x18)
        vertexData.BitangentZ <- ReadNormByte(reader, endianType)

    if (vertexDesc & 0x20 != 0)
        vertexData.VertexColors <- ReadByteColor4(reader)

    if (vertexDesc & 0x40 != 0)
        vertexData.BoneWeights <- ReadArray(reader, 4, reader -> ReadHFloat(reader, endianType))
        vertexData.BoneIndices <- ReadArray(reader, 4, reader -> reader.ReadByte())

    if (vertexDesc & 0x100 != 0)
        vertexData.EyeData <- ReadFloat32(reader, endianType)

    vertexData

private class BSTriShape =
    inherits NiAVObject

    mutable BoundingSphere: NiBound = NiBound()
    mutable Skin: int32 = -1
    mutable ShaderProperty: int32 = -1
    mutable AlphaProperty: int32 = -1
    mutable VertexDesc: uint64 = default //BSVertexDesc = default
    mutable TriangleCount: uint16 = 0 // FO4 uses uint32
    mutable VertexCount: uint16 = 0
    mutable DataSize: uint32 = 0

    mutable VertexData: BSVertexDataSSE[||] = unchecked default

    mutable Triangles: Triangle[||] = unchecked default

    // Skyrim SSE only
    mutable ParticleDataSize: uint32 = 0
    mutable ParticleVertices: HalfVector3[||] = unchecked default
    mutable ParticleNormals: HalfVector3[||] = unchecked default
    mutable ParticleTriangles: Triangle[||] = unchecked default

private ReadBSTriShape(reader: BinaryReader, header: Header, node: BSTriShape): () =
    let endianType = header.EndianType

    ReadNiAVObject(reader, header, node)

    node.BoundingSphere <- ReadNiBound(reader, endianType)
    node.Skin <- ReadInt32(reader, endianType)
    node.ShaderProperty <- ReadInt32(reader, endianType)
    node.AlphaProperty <- ReadInt32(reader, endianType)
    node.VertexDesc <- fromEnum(ReadBSVertexDesc(reader, endianType))
    node.TriangleCount <- ReadUInt16(reader, endianType)
    node.VertexCount <- ReadUInt16(reader, endianType)

    let expectedDataSize =
        (uint32(node.VertexDesc & (0xF: uint64)) * uint32(node.VertexCount) * 4) + 
            (uint32(node.TriangleCount) * 6)

    node.DataSize <- reader.ReadUInt32()

    if (expectedDataSize != node.DataSize)
        fail("Bad data size")

    if (node.DataSize > 0)
        let arg: uint64 = node.VertexDesc >> 44
        node.VertexData <- ReadArray(reader, int32(node.VertexCount), reader -> ReadBSVertexDataSSE(reader, endianType, arg))
        node.Triangles <- ReadArray(reader, int32(node.TriangleCount), reader -> ReadTriangle(reader, endianType))

    // TODO: Fix this.
    node.ParticleDataSize <- 0//(uint32(node.VertexCount) * 6) + (uint32(node.TriangleCount) * 3)

    if (node.ParticleDataSize > 0)
        node.ParticleVertices <- ReadArray(reader, int32(node.VertexCount), reader -> ReadHalfVector3(reader, endianType))
        node.ParticleNormals <- ReadArray(reader, int32(node.VertexCount), reader -> ReadHalfVector3(reader, endianType))
        node.ParticleTriangles <- ReadArray(reader, int32(node.TriangleCount), reader -> ReadTriangle(reader, endianType))

private class NiProperty =
    inherits NiObjectNET

private ReadNiProperty_BSLightingShaderProperty(reader: BinaryReader, header: Header, node: NiProperty): () =
    ReadNiObjectNET_BSLightingShaderProperty(reader, header, node)

private class NiShadeProperty =
    inherits NiProperty

private ReadNiShadeProperty_BSLightingShaderProperty(reader: BinaryReader, header: Header, node: NiShadeProperty): () =
    ReadNiProperty_BSLightingShaderProperty(reader, header, node)

private class BSShaderProperty =
    inherits NiShadeProperty

private ReadBSShaderProperty_BSLightingShaderProperty(reader: BinaryReader, header: Header, node: BSShaderProperty): () =
    ReadNiShadeProperty_BSLightingShaderProperty(reader, header, node)

// <niobject name="BSLightingShaderProperty" inherit="BSShaderProperty" stopcond="#BSVER# #GTE# 155 #AND# Name" module="BSMain" versions="#SKY_AND_LATER#">
// Bethesda shader property for Skyrim and later.
// <field name="Shader Flags 1" suffix="SK" type="SkyrimShaderPropertyFlags1" vercond="#NI_BS_LT_FO4#" default="0x82400301">Skyrim Shader Flags for setting render/shader options.</field>
// <field name="Shader Flags 2" suffix="SK" type="SkyrimShaderPropertyFlags2" vercond="#NI_BS_LT_FO4#" default="0x8021">Skyrim Shader Flags for setting render/shader options.</field>
// <field name="UV Offset" type="TexCoord">Offset UVs</field>
// <field name="UV Scale" type="TexCoord" default="#VEC2_ONE#">Offset UV Scale to repeat tiling textures, see above.</field>
// <field name="Texture Set" type="Ref" template="BSShaderTextureSet">Texture Set, can have override in an esm/esp</field>
// <field name="Emissive Color" type="Color3" default="#VEC3_ZERO#">Glow color and alpha</field>
// <field name="Emissive Multiple" type="float" default="1.0" range="#F0_10#">Multiplied emissive colors</field>
// <field name="Texture Clamp Mode" type="TexClampMode" default="WRAP_S_WRAP_T">How to handle texture borders.</field>
// <field name="Alpha" type="float" default="1.0" range="0.0:128.0">The material opacity (1=opaque). Greater than 1.0 is used to affect alpha falloff i.e. staying opaque longer based on vertex alpha and alpha mask.</field>
// <field name="Refraction Strength" type="float" range="#F0_1#">The amount of distortion. **Not based on physically accurate refractive index** (0=none)</field>
// <field name="Glossiness" type="float" default="80.0" range="#F0_999#" vercond="#NI_BS_LT_FO4#">The material specular power, or glossiness.</field>
// <field name="Specular Color" type="Color3" default="#VEC3_ONE#">Adds a colored highlight.</field>
// <field name="Specular Strength" type="float" default="1.0" range="#F0_10#">Brightness of specular highlight. (0=not visible)</field>
// <field name="Lighting Effect 1" type="float" default="0.3" range="#F0_10#" vercond="#NI_BS_LT_FO4#">Controls strength for envmap/backlight/rim/softlight lighting effect?</field>
// <field name="Lighting Effect 2" type="float" default="2.0" range="#F0_1000#" vercond="#NI_BS_LT_FO4#">Controls strength for envmap/backlight/rim/softlight lighting effect?</field>

// </niobject>
private class BSLightingShaderProperty =
    inherits BSShaderProperty

    mutable ShaderFlags1: uint32 = 0x82400301 // skyrim only
    mutable ShaderFlags2: uint32 = 0x8021 // skyrim only
    mutable UVOffset: TexCoord = default
    mutable UVScale: TexCoord = default
        // let mutable texCoord = TexCoord()
        // texCoord.U <- 1
        // texCoord.V <- 1
        // texCoord
    mutable TextureSet: int32 = -1

    // TODO: Add more fields

private ReadBSLightingShaderProperty(reader: BinaryReader, header: Header, node: BSLightingShaderProperty): () =
    let endianType = header.EndianType

    ReadBSShaderProperty_BSLightingShaderProperty(reader, header, node)

    node.ShaderFlags1 <- ReadUInt32(reader, endianType)
    node.ShaderFlags2 <- ReadUInt32(reader, endianType)
    node.UVOffset <- ReadTexCoord(reader, endianType)
    node.UVScale <- ReadTexCoord(reader, endianType)
    node.TextureSet <- ReadInt32(reader, endianType)

    // TODO: Handle rest of the fields

struct NifModelInfo =
    mutable DataSize: uint32 = 0
    mutable Vertices: Vector3[||] = unchecked default
    mutable UV: TexCoord[||] = unchecked default
    mutable Normals: ByteVector3[||] = unchecked default
    mutable Tangents: Vector3[||] = unchecked default
    mutable Triangles: Triangle[||] = unchecked default

sealed class Nif =

    private mmf: MemoryMappedFile
    private stream: Stream
    private reader: BinaryReader
    private header: Header
    private startPos: int64

    new(mmf: MemoryMappedFile, stream: Stream, reader: BinaryReader, header: Header) =
        {
            mmf = mmf
            stream = stream
            reader = reader
            header = header
            startPos = reader.BaseStream.Position
        }

    TryGetTriangles(outInfo: byref<NifModelInfo>): bool =
        let header = this.header
        this.stream.Position <- this.startPos

        let mutable result = false
        let mutable i = 0
        while (!result && i < int32(header.BlockCount))
            let index = int32(header.BlockTypeIndices[i])
            let size = int64(header.BlockSizes[i])
            if (header.BlockTypes[index] == "BSTriShape")
                let node = BSTriShape()
                ReadBSTriShape(this.reader, header, node)
                result <- true
                outInfo.DataSize <- node.DataSize
                outInfo.Vertices <- map(node.VertexData, x -> x.Vertex)
                outInfo.UV <- map(node.VertexData, x ->
                                                       let mutable texCoord = TexCoord()
                                                       texCoord.U <- HalfToFloat(x.UV.U)
                                                       texCoord.V <- HalfToFloat(x.UV.V)
                                                       texCoord)
                outInfo.Normals <- map(node.VertexData, x -> x.Normal)
                outInfo.Tangents <- map(node.VertexData, x ->
                                                             let mutable v = Vector3()
                                                             // idx = ((value + 1.0) / 2.0) * 255.0)
                                                             // idx / 255 = (value + 1.0) / 2.0
                                                             // idx * 2.0 / 255 = value + 1.0
                                                             // (idx * 2.0 / 255) - 1.0 = value
                                                             v.X <- (float32(x.Tangent.X) * 2 / 255) - 1
                                                             v.Y <- (float32(x.Tangent.Y) * 2 / 255) - 1
                                                             v.Z <- (float32(x.Tangent.Z) * 2 / 255) - 1
                                                             v)
                outInfo.Triangles <- node.Triangles
            else
                this.stream.Position <- this.stream.Position + size
            i <- i + 1

        result

private ReadLineString(reader: BinaryReader): string =
    let bytes = List<byte>()
    let mutable cont = true
    while (cont)
        let b = reader.ReadByte()
        if (b == 0x0A)
            cont <- false
        else
            bytes.Add(b)
    System.Text.Encoding.Default.GetString(bytes.ToArray())

private ReadLineString(reader: BinaryReader, length: int32): string =
    let mutable count = 0
    let bytes = List<byte>()
    let mutable cont = true
    while (cont)
        let b = reader.ReadByte()
        count <- count + 1
        if (b == 0x0A)
            cont <- false
        else
            bytes.Add(b)
        if (count >= length)
            cont <- false
    System.Text.Encoding.Default.GetString(bytes.ToArray())

private ReadString(reader: BinaryReader): string =
    let length = int32(reader.ReadByte())
    let mutable count = 0
    let bytes = List<byte>()
    let mutable cont = true
    while (cont)
        let b = reader.ReadByte()
        count <- count + 1
        if (b == 0)
            cont <- false
        else
            bytes.Add(b)
        if (count >= length)
            cont <- false
    System.Text.Encoding.Default.GetString(bytes.ToArray())

private ReadSizedString(reader: BinaryReader, endianType: EndianType): string =
    let length = int32(ReadUInt32(reader, endianType))
    let mutable count = 0
    let bytes = List<byte>()
    let mutable cont = true
    while (cont)
        let b = reader.ReadByte()
        count <- count + 1
        bytes.Add(b)
        if (count >= length)
            cont <- false
    System.Text.Encoding.Default.GetString(bytes.ToArray())

private ReadNiFixedString(reader: BinaryReader, endianType: EndianType, strings: List<string>): string =
    let index = int32(ReadUInt32(reader, endianType))
    if (index == -1)
        ""
    else
        strings[index]

private ReadEndianType(reader: BinaryReader): EndianType =
    match (reader.ReadByte())
    | 0 => EndianType.Big
    | 1 => EndianType.Little
    | _ => fail("Invalid endian type")

private ReadUInt64(reader: BinaryReader, endianType: EndianType): uint64 =
    match (endianType)
    | EndianType.Little => reader.ReadUInt64()
    | _ => fail("Big endian not supported")

private ReadInt32(reader: BinaryReader, endianType: EndianType): int32 =
    match (endianType)
    | EndianType.Little => reader.ReadInt32()
    | _ => fail("Big endian not supported")

private ReadUInt32(reader: BinaryReader, endianType: EndianType): uint32 =
    match (endianType)
    | EndianType.Little => reader.ReadUInt32()
    | _ => fail("Big endian not supported")

private ReadUInt16(reader: BinaryReader, endianType: EndianType): uint16 =
    match (endianType)
    | EndianType.Little => reader.ReadUInt16()
    | _ => fail("Big endian not supported")

private ReadFloat32(reader: BinaryReader, endianType: EndianType): float32 =
    match (endianType)
    | EndianType.Little => reader.ReadSingle()
    | _ => fail("Big endian not supported")

private ReadBSStreamHeader(reader: BinaryReader): BSStreamHeader =
    let mutable header = BSStreamHeader()

    header.BSVersion <- reader.ReadUInt32()
    header.Author <- ReadString(reader)
    header.ProcessScript <- ReadString(reader)
    header.ExportScript <- ReadString(reader)

    header

private ReadArray<T>(reader: BinaryReader, count: int32, read: BinaryReader -> T): T[||] =
    let arr = OlyPrelude.Array.ZeroCreate<T>(count)

    let mutable i = 0
    while (i < count)
        arr[i] <- read(reader)
        i <- i + 1

    arr

private ReadList<T>(reader: BinaryReader, count: int32, read: BinaryReader -> T): List<T> =
    let list = List<T>()

    let mutable i = 0
    while (i < count)
        list.Add(read(reader))
        i <- i + 1

    list

private ReadBlockNode(reader: BinaryReader, header: Header, blockType: string): NiObjectNET =
    match (blockType)
    | "BSFadeNode" =>
        let node = BSFadeNode()
        ReadBSFadeNode(reader, header, node)
        node
    | "BSTriShape" =>
        let node = BSTriShape()
        ReadBSTriShape(reader, header, node)
        node
    | "BSLightingShaderProperty" =>
        let node = BSLightingShaderProperty()
        ReadBSLightingShaderProperty(reader, header, node)
        node
    | _ =>
        fail("Invalid block type: " + blockType)

private ReadBlockNodes(reader: BinaryReader, header: Header): List<NiObjectNET> =
    let nodes = List<NiObjectNET>()

    let mutable i = 0
    while (i < header.BlockTypeIndices.Count)
        nodes.Add(ReadBlockNode(reader, header, header.BlockTypes[int32(header.BlockTypeIndices[i])]))
        i <- i + 1

    nodes

private ReadHeader(reader: BinaryReader): Header =
    let mutable header = Header()

    header.HeaderString <- ReadLineString(reader)
    header.Version <- reader.ReadUInt32()

    if (header.Version != 0x14020007) // 20.2.0.7 version - Skyrim SE
        fail("Invalid version")

    let endianType = ReadEndianType(reader)
    header.EndianType <- endianType
    header.UserVersion <- reader.ReadUInt32()

    if (header.UserVersion != 12) // Skyrim SE
        fail("Invalid user version")

    header.BlockCount <- reader.ReadUInt32()

    header.BSStreamHeader <- ReadBSStreamHeader(reader)
    header.BlockTypeCount <- ReadUInt16(reader, endianType)
    header.BlockTypes <- ReadList(reader, int32(header.BlockTypeCount), reader -> ReadSizedString(reader, endianType))
    header.BlockTypeIndices <- ReadList(reader, int32(header.BlockCount), reader -> ReadUInt16(reader, endianType))
    header.BlockSizes <- ReadList(reader, int32(header.BlockCount), reader -> ReadUInt32(reader, endianType))
    header.StringCount <- ReadUInt32(reader, endianType)
    header.MaxStringLength <- ReadUInt32(reader, endianType)
    header.Strings <- ReadList(reader, int32(header.StringCount), reader -> ReadSizedString(reader, endianType))
    header.GroupCount <- ReadUInt32(reader, endianType)
    header.Groups <- ReadList(reader, int32(header.GroupCount), reader -> ReadUInt32(reader, endianType))

    header

OpenFromFile(filePath: string): Nif =
    let file = FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.Read)
    let mmf = MemoryMappedFile.CreateFromFile(file, unchecked default, 0, MemoryMappedFileAccess.Read, HandleInheritability.Inheritable, false)
    let reader = BinaryReader(file)

    let header = ReadHeader(reader)

    Nif(mmf, file, reader, header)

OpenFromStream(mmf: MemoryMappedFile, stream: Stream): Nif =
    let reader = BinaryReader(stream)

    let header = ReadHeader(reader)

    Nif(mmf, stream, reader, header)