#[open]
module OlyArray

#[intrinsic("get_length")]
getLength<T>(T[]): int32

#[intrinsic("get_length")]
getLength<T>(T[||]): int32

#[intrinsic("new_array")]
ZeroCreate<T>(size: int32): T[||]

#[open]
extension ArrayExtensions<T> =
    inherits T[||]

    Length: int32 
        #[inline]
        get() = getLength(this)

map<T, U>(arr: T[||], f: T -> U): U[||] =
    let newArr = ZeroCreate<U>(arr.Length)
    let mutable i = 0
    while (i < arr.Length)
        newArr[i] <- f(arr[i])
        i <- i + 1
    newArr

flatten<T, U>(arr: T[||], f: T -> (U, U, U)): U[||] =
    let newArr = ZeroCreate<U>(arr.Length * 3)
    let mutable i = 0
    let mutable j = 0
    while (i < arr.Length)
        let tup = f(arr[i])
        newArr[j] <- GetTupleElement<0, _>(tup)
        newArr[j + 1] <- GetTupleElement<1, _>(tup)
        newArr[j + 2] <- GetTupleElement<2, _>(tup)
        i <- i + 1
        j <- j + 3
    newArr