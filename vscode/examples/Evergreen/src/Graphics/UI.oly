
namespace Evergreen.Graphics.UI

open System
open System.Numerics
open Evergreen.Graphics
open ImGuiNET

class UINode =

    private Tag: int32
    private new(tag: int32) = { Tag = tag }

    internal sealed class Window =
        inherits UINode

        Title: string
        Children: UINode[]
        Size: Vector2
        RelativePosition: Vector2

        new(title: string, children: UINode[], size: Vector2, relativePos: Vector2) =
            base(0) with {
                Title = title
                Children = children
                Size = size
                RelativePosition = relativePos
            }

    pattern Window(node: UINode): (title: string, children: UINode[], size: Vector2, relativePos: Vector2) when (node.Tag == 0) =>
        let node = UnsafeCast<UINode.Window>(node)
        (node.Title, node.Children, node.Size, node.RelativePosition)

    internal sealed class Button =
        inherits UINode

        Label: string
        OnClick: () -> ()

        new(label: string, onClick: () -> ()) =
            base(1) with {
                Label = label
                OnClick = onClick
            }

    pattern Button(node: UINode): (label: string, onClick: () -> ()) when (node.Tag == 1) =>
        let node = UnsafeCast<UINode.Button>(node)
        (node.Label, node.OnClick)

    internal sealed class TextBox =
        inherits UINode

        Label: string

        new(label: string) =
            base(2) with {
                Label = label
            }

    pattern TextBox(node: UINode): string when (node.Tag == 2) =>
        let node = UnsafeCast<UINode.Button>(node)
        node.Label

module UI =

    private MakeNode(node: UINode): () =
        match (node)
        | UINode.Window(title, children, relativeSize, relativePos) =>
            ImGui.SetNextWindowSize(relativeSize)
            ImGui.SetNextWindowPos(relativePos)
            MakeWindow(title, children)
        
        | UINode.Button(label, onClick) =>
            MakeButton(label, onClick)

        | UINode.TextBox(label) =>
            MakeTextBox(label)

        | _ =>
            ()

    private MakeWindow(title: string, children: UINode[]): () =
        if (ImGui.Begin(title))
            let mutable i = 0
            while (i < children.Length)
                MakeNode(children[i])
                i <- i + 1
            ImGui.End()

    private MakeButton(label: string, onClick: () -> ()): () =
        if (ImGui.Button(label))
            onClick()

    private textBuffer: byte[||] = Array.ZeroCreate(1024)
    private MakeTextBox(label: string): () =
        if (ImGui.InputText(label, textBuffer, 1024))
            print(System.Text.Encoding.UTF8.GetString(textBuffer))

    Window(title: string, children: UINode[], size: Vector2, relativePosition: Vector2): UINode =
        UINode.Window(title, children, size, relativePosition)

    Button(label: string, onClick: () -> ()): UINode =
        UINode.Button(label, onClick)

    TextBox(label: string): UINode =
        UINode.TextBox(label)

    Update(deltaTime: float64, inputState: InputState, node: UINode): () =
        Graphics.imGuiRenderer.Update(float32(deltaTime), inputState.snapshot)
        MakeNode(node)