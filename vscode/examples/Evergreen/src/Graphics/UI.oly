
namespace Evergreen.Graphics.UI

open System
open System.Numerics
open System.Collections.Generic
open Evergreen.Graphics
open ImGuiNET

interface IViewModel

class WindowViewModel =
    implements IViewModel

    public mutable field IsEnabled: bool = true
    public mutable field Title: string = string.Empty
    public mutable field Size: Vector2 = Vector2.Zero
    public mutable field RelativePosition: Vector2 = Vector2.Zero

class ButtonViewModel =
    implements IViewModel

    public mutable field IsEnabled: bool = true
    public mutable field Label: string = string.Empty

class TextInputViewModel =
    implements IViewModel

    public mutable field IsEnabled: bool = true
    public mutable field Label: string = string.Empty

    mutable field text: string = string.Empty
    Text: string
        get() = this.text
        set(value) = 
            this.text <- value
            let byteCount = System.Text.Encoding.UTF8.GetBytes(this.text, 0, this.text.Length, this.TextBuffer, 0)

    internal field TextBuffer: byte[||] = Array.ZeroCreate(256)

class Int32InputViewModel =
    implements IViewModel

    public mutable field IsEnabled: bool = true
    public mutable field Label: string = string.Empty
    public mutable field Value: int32 = 0

class CheckboxViewModel =
    implements IViewModel

    public mutable field IsEnabled: bool = true
    public mutable field Label: string = string.Empty
    public mutable field IsChecked: bool = false

class ComboBoxViewModel =
    implements IViewModel

    public mutable field IsEnabled: bool = true
    public mutable field Label: string = string.Empty
    public mutable field SelectedItemIndex: int32 = 0
    public mutable field Items: string[||] = [||]
    public mutable field ItemCount: int32 = 0

abstract class UINode =

    field Tag: int32
    private new(tag: int32) = { Tag = tag }

    internal class Window =
        inherits UINode

        public field State: WindowViewModel
        public field Children: UINode[]

        new(state: WindowViewModel, children: UINode[]) =
            base(0) with {
                State = state
                Children = children
            }

    pattern Window(node: UINode): (state: WindowViewModel, children: UINode[]) when (node.Tag == 0) =>
        let node = UnsafeCast<UINode.Window>(node)
        (node.State, node.Children)

    internal class Button =
        inherits UINode

        public field State: ButtonViewModel
        public field OnClick: ButtonViewModel -> ()

        new(state: ButtonViewModel, onClick: ButtonViewModel -> ()) =
            base(1) with {
                State = state
                OnClick = onClick
            }

    pattern Button(node: UINode): (state: ButtonViewModel, onClick: ButtonViewModel -> ()) when (node.Tag == 1) =>
        let node = UnsafeCast<UINode.Button>(node)
        (node.State, node.OnClick)

    internal class TextInput =
        inherits UINode

        public field State: TextInputViewModel
        public field OnChanged: TextInputViewModel -> ()

        new(state: TextInputViewModel, onChanged: TextInputViewModel -> ()) =
            base(2) with {
                State = state
                OnChanged = onChanged
            }

    pattern TextInput(node: UINode): (state: TextInputViewModel, onChanged: TextInputViewModel -> ()) when (node.Tag == 2) =>
        let node = UnsafeCast<UINode.TextInput>(node)
        (node.State, node.OnChanged)

    internal class Int32Input =
        inherits UINode

        public field State: Int32InputViewModel
        public field OnChanged: Int32InputViewModel -> ()

        new(state: Int32InputViewModel, onChanged: Int32InputViewModel -> ()) =
            base(3) with {
                State = state
                OnChanged = onChanged
            }

    pattern Int32Input(node: UINode): (state: Int32InputViewModel, onChanged: Int32InputViewModel -> ()) when (node.Tag == 3) =>
        let node = UnsafeCast<UINode.Int32Input>(node)
        (node.State, node.OnChanged)

    internal class Checkbox =
        inherits UINode

        public field State: CheckboxViewModel
        public field OnChanged: CheckboxViewModel -> ()

        new(state: CheckboxViewModel, onChanged: CheckboxViewModel -> ()) =
            base (10) with {
                State = state
                OnChanged = onChanged
            }

    pattern Checkbox(node: UINode): (state: CheckboxViewModel, onChanged: CheckboxViewModel -> ()) when (node.Tag == 10) =>
        let node = UnsafeCast<UINode.Checkbox>(node)
        (node.State, node.OnChanged)

    internal class ComboBox =
        inherits UINode

        public field State: ComboBoxViewModel
        public field OnChanged: ComboBoxViewModel -> ()

        new(state: ComboBoxViewModel, onChanged: ComboBoxViewModel -> ()) =
            base (11) with {
                State = state
                OnChanged = onChanged
            }

    pattern ComboBox(node: UINode): (state: ComboBoxViewModel, onChanged: ComboBoxViewModel -> ()) when (node.Tag == 11) =>
        let node = UnsafeCast<UINode.ComboBox>(node)
        (node.State, node.OnChanged)


module UI =

    private MakeNode(node: UINode): () =
        match (node)
        | UINode.Window(state, children) =>
            ImGui.SetNextWindowSize(state.Size)
            ImGui.SetNextWindowPos(state.RelativePosition)
            ImGui.BeginDisabled(!state.IsEnabled)
            MakeWindow(state.Title, children)
            ImGui.EndDisabled()
        
        | UINode.Button(state, onClick) =>
            MakeButton(state, onClick)

        | UINode.TextInput(state, onChanged) =>
            MakeTextInput(state, onChanged)

        | UINode.Int32Input(state, onChanged) =>
            MakeInt32Input(state, onChanged)

        | UINode.Checkbox(state, onChanged) =>
            MakeCheckbox(state, onChanged)

        | UINode.ComboBox(state, onChanged) =>
            MakeComboBox(state, onChanged)

        | _ =>
            ()

    private MakeWindow(title: string, children: UINode[]): () =
        if (ImGui.Begin(title))
            let mutable i = 0
            while (i < children.Length)
                MakeNode(children[i])
                i <- i + 1
            ImGui.End()

    private MakeButton(state: ButtonViewModel, onClick: ButtonViewModel -> ()): () =
        ImGui.BeginDisabled(!state.IsEnabled)
        if (ImGui.Button(state.Label))
            onClick(state)
        ImGui.EndDisabled()

    private MakeTextInput(state: TextInputViewModel, onChanged: TextInputViewModel -> ()): () =
        ImGui.BeginDisabled(!state.IsEnabled)
        if (ImGui.InputText(state.Label, state.TextBuffer, uint32(state.TextBuffer.Length)))
            state.Text <- System.Text.Encoding.UTF8.GetString(state.TextBuffer).Trim('\0')
            onChanged(state)
        ImGui.EndDisabled()

    private MakeInt32Input(state: Int32InputViewModel, onChanged: Int32InputViewModel -> ()): () =
        ImGui.BeginDisabled(!state.IsEnabled)
        if (ImGui.InputInt(state.Label, &state.Value))
            onChanged(state)
        ImGui.EndDisabled()

    private MakeCheckbox(state: CheckboxViewModel, onChanged: CheckboxViewModel -> ()): () =
        ImGui.BeginDisabled(!state.IsEnabled)
        if (ImGui.Checkbox(state.Label, &state.IsChecked))
            onChanged(state)
        ImGui.EndDisabled()

    private MakeComboBox(state: ComboBoxViewModel, onChanged: ComboBoxViewModel -> ()): () =
        ImGui.BeginDisabled(!state.IsEnabled)
        if (ImGui.Combo(state.Label, &state.SelectedItemIndex, state.Items, state.ItemCount))
            onChanged(state)
        ImGui.EndDisabled()

    Window(state: WindowViewModel, children: UINode[]): UINode =
        UINode.Window(state, children)

    WindowModel(title: string, size: Vector2, relativePosition: Vector2): WindowViewModel =
        let vm = WindowViewModel()
        vm.Title <- title
        vm.Size <- size
        vm.RelativePosition <- relativePosition
        vm

    Button(state: ButtonViewModel, onClick: ButtonViewModel -> ()): UINode =
        UINode.Button(state, onClick)

    ButtonModel(label: string): ButtonViewModel =
        let vm = ButtonViewModel()
        vm.Label <- label
        vm

    TextInput(state: TextInputViewModel, onChanged: TextInputViewModel -> ()): UINode =
        UINode.TextInput(state, onChanged)

    TextInputModel(label: string, text: string): TextInputViewModel =
        let vm = TextInputViewModel()
        vm.Label <- label
        vm.Text <- text
        vm

    Int32Input(state: Int32InputViewModel, onChanged: Int32InputViewModel -> ()): UINode =
        UINode.Int32Input(state, onChanged)

    Int32InputModel(label: string, value: int32): Int32InputViewModel =
        let vm = Int32InputViewModel()
        vm.Label <- label
        vm.Value <- value
        vm

    Checkbox(state: CheckboxViewModel, onChanged: CheckboxViewModel -> ()): UINode =
        UINode.Checkbox(state, onChanged)

    CheckboxModel(label: string, isChecked: bool): CheckboxViewModel =
        let vm = CheckboxViewModel()
        vm.Label <- label
        vm.IsChecked <- isChecked
        vm

    ComboBox(state: ComboBoxViewModel, onChanged: ComboBoxViewModel -> ()): UINode =
        UINode.ComboBox(state, onChanged)

    ComboBoxModel(label: string, selectedItemIndex: int32, items: string[||], itemCount: int32): ComboBoxViewModel =
        let vm = ComboBoxViewModel()
        vm.Label <- label
        vm.SelectedItemIndex <- selectedItemIndex
        vm.Items <- items
        vm.ItemCount <- itemCount
        vm

    Update(deltaTime: float64, inputState: InputState, node: UINode): () =
        Graphics.imGuiRenderer.Update(float32(deltaTime), inputState.snapshot)
        MakeNode(node)