#target "dotnet: net7"

#reference "../core/prelude.olyx"
#reference "../../../src/Compiler/Oly.Compiler.Workspace/Oly.Compiler.Workspace.fsproj"

#package "LLVMSharp,14.0.0-beta1"
#package "libLLVM.runtime.win-x64,14.0.0"

module Oly.Runtime.Target.LLVM

open System
open System.Runtime.InteropServices
open System.Runtime.CompilerServices
open LLVMSharp
open LLVMSharp.Interop
open Oly.Core

open Microsoft.FSharp.Core

Some<T>(value: T): FSharpOption<T> =
    FSharpOption(value)

None<T>: FSharpOption<T> =
    null

#[open]
module OptionPatterns<T> =

    pattern None(value: FSharpOption<T>): () when (value === null) =>
        ()

    pattern Some(value: FSharpOption<T>): T when (value !== null) =>
        value.Value

test(value: FSharpOption<FSharpOption<int32>>): () =
    match(value)
    | Some(x) => print(x)
    | None => print("nothing2")
    | _ => print("nothing")

main(): () =
    let y = None
    let lambda(x) =
        test(Some(x))
    lambda(Some(587))
    print("\n")
    test(y)

    let str = "my cool jit"
    let mutable strPtr = GCHandle.Alloc(str, GCHandleType.Pinned)
    let mod = LLVM.ModuleCreateWithName(ToPtr(strPtr.AddrOfPinnedObject()))
    let builder = LLVM.CreateBuilder()
    print("testttttt")