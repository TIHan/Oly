#target "spirv: lib"
#library

#load "spirv_numerics.oly"

#[open]
module OlyPrelude

// Types

#[intrinsic("bool")]
alias bool

#[intrinsic("int32")]
alias int

#[intrinsic("uint32")]
alias uint

#[intrinsic("float32")]
alias float

#[intrinsic("float64")]
alias double

#[intrinsic("by_ref")]
alias byref<T>

#[intrinsic("by_ref_read_only")]
alias inref<T>

#[intrinsic("by_ref_write_only")]
alias outref<T>

// Attributes

#[import("spirv", "std", "position")]
#[intrinsic("importer")]
struct positionAttribute = new()

#[import("spirv", "std", "point_size")]
#[intrinsic("importer")]
struct point_sizeAttribute = new()

#[import("spirv", "std", "block")]
#[intrinsic("importer")]
struct blockAttribute = new()

#[import("spirv", "std", "location")]
#[intrinsic("importer")]
struct locationAttribute = new(number: uint)

#[import("spirv", "std", "global_invocation_id")]
#[intrinsic("importer")]
struct global_invocation_idAttribute = new()

#[import("spirv", "std", "uniform")]
#[intrinsic("importer")]
struct uniformAttribute = new()

#[import("spirv", "std", "descriptor_set")]
#[intrinsic("importer")]
struct descriptor_setAttribute = new(uint)

#[import("spirv", "std", "binding")]
#[intrinsic("importer")]
struct bindingAttribute = new(uint)

#[import("spirv", "std", "buffer_block")]
#[intrinsic("importer")]
struct buffer_blockAttribute = new()

#[import("spirv", "std", "storage_buffer")]
#[intrinsic("importer")]
struct storage_bufferAttribute = new()

// Operations

/*
#[intrinsic("unsafe_cast")]
int(uint): int

#[intrinsic("unsafe_cast")]
uint(int): uint
*/

#[intrinsic("add")]
(+)(float, float): float

#[intrinsic("equal")]
(==)(bool, bool): bool

#[intrinsic("equal")]
(==)(int, int): bool

#[intrinsic("equal")]
(==)(uint, uint): bool

#[intrinsic("equal")]
(==)(float, float): bool

#[intrinsic("get_element")]
(`[]`)<T>(T[], index: uint): T

#[intrinsic("get_element")]
(`[]`)<T>(mutable T[], index: uint): T

#[intrinsic("set_element")]
(`[]`)<T>(mutable T[], index: uint, T): ()

// BuiltIn

Position: vec4
    #[position]
    set

GlobalInvocationId: uvec3
    #[global_invocation_id]
    get