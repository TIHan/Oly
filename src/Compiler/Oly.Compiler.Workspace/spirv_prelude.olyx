#target "spirv: lib"
#library

#[open]
module OlyPrelude

// Types

#[intrinsic("bool")]
alias bool

#[intrinsic("int32")]
alias int32

#[intrinsic("uint32")]
alias uint32

#[intrinsic("float32")]
alias float32

#[intrinsic("by_ref")]
alias byref<T>

#[intrinsic("by_ref_read_only")]
alias inref<T>

#[intrinsic("by_ref_write_only")]
alias outref<T>

#[import("spirv", "std", "vec")]
struct vec<N, T> where N: constant int32

#[open]
extension vec2Extensions<T> =
    inherits vec<2, T>

    x: T 
        #[import("spirv", "std.vec2", "x")]
        get()
        #[import("spirv", "std.vec2", "x")]
        set(value)

    y: T
        #[import("spirv", "std.vec2", "y")]
        get()
        #[import("spirv", "std.vec2", "y")]
        set(value)

#[open]
extension vec3Extensions<T> =
    inherits vec<3, T>

    x: T 
        #[import("spirv", "std.vec3", "x")]
        get()
        #[import("spirv", "std.vec3", "x")]
        set(value)

    y: T
        #[import("spirv", "std.vec3", "y")]
        get()
        #[import("spirv", "std.vec3", "y")]
        set(value)

    z: T
        #[import("spirv", "std.vec3", "z")]
        get()
        #[import("spirv", "std.vec3", "z")]
        set(value)


#[open]
extension vec4Extensions<T> =
    inherits vec<4, T>

    x: T 
        #[import("spirv", "std.vec4", "x")]
        get()
        #[import("spirv", "std.vec4", "x")]
        set(value)

    y: T
        #[import("spirv", "std.vec4", "y")]
        get()
        #[import("spirv", "std.vec4", "y")]
        set(value)

    z: T
        #[import("spirv", "std.vec4", "z")]
        get()
        #[import("spirv", "std.vec4", "z")]
        set(value)

    w: T
        #[import("spirv", "std.vec4", "w")]
        get()
        #[import("spirv", "std.vec4", "w")]
        set(value)

alias int = int32
alias uint = uint32
alias float = float32
alias vec2 = vec<2, float32>
alias vec3 = vec<3, float32>
alias vec4 = vec<4, float32>
alias ivec2 = vec<2, int32>
alias ivec3 = vec<3, int32>
alias ivec4 = vec<4, int32>
alias uvec2 = vec<2, uint32>
alias uvec3 = vec<3, uint32>
alias uvec4 = vec<4, uint32>
alias bvec2 = vec<2, bool>
alias bvec3 = vec<3, bool>
alias bvec4 = vec<4, bool>


// vec of float

#[import("spirv", "std", "vec")]
vec2(float): vec2

#[import("spirv", "std", "vec")]
vec2(x: float, y: float): vec2

#[import("spirv", "std", "vec")]
vec3(float): vec3

#[import("spirv", "std", "vec")]
vec3(xy: vec2, z: float): vec3

#[import("spirv", "std", "vec")]
vec3(x: float, y: float, z: float): vec3

#[import("spirv", "std", "vec")]
vec4(float): vec4

#[import("spirv", "std", "vec")]
vec4(xyz: vec3, w: float): vec4

#[import("spirv", "std", "vec")]
vec4(xy: vec2, z: float, w: float): vec4

#[import("spirv", "std", "vec")]
vec4(x: float, y: float, z: float, w: float): vec4

// vec of int

#[import("spirv", "std", "vec")]
ivec2(int): ivec2

#[import("spirv", "std", "vec")]
ivec2(x: int, y: int): ivec2

#[import("spirv", "std", "vec")]
ivec3(int): ivec3

#[import("spirv", "std", "vec")]
ivec3(xy: vec2, z: int): ivec3

#[import("spirv", "std", "vec")]
ivec3(x: int, y: int, z: int): ivec3

#[import("spirv", "std", "vec")]
ivec4(int): ivec4

#[import("spirv", "std", "vec")]
ivec4(xyz: ivec3, w: int): ivec4

#[import("spirv", "std", "vec")]
ivec4(xy: ivec2, z: int, w: int): ivec4

#[import("spirv", "std", "vec")]
ivec4(x: int, y: int, z: int, w: int): ivec4

// vec of uint

#[import("spirv", "std", "vec")]
uvec2(uint): uvec2

#[import("spirv", "std", "vec")]
uvec2(x: uint, y: uint): uvec2

#[import("spirv", "std", "vec")]
uvec3(uint): uvec3

#[import("spirv", "std", "vec")]
uvec3(xy: vec2, z: uint): uvec3

#[import("spirv", "std", "vec")]
uvec3(x: uint, y: uint, z: uint): uvec3

#[import("spirv", "std", "vec")]
uvec4(uint): uvec4

#[import("spirv", "std", "vec")]
uvec4(xyz: uvec3, w: uint): uvec4

#[import("spirv", "std", "vec")]
uvec4(xy: uvec2, z: uint, w: uint): uvec4

#[import("spirv", "std", "vec")]
uvec4(x: uint, y: uint, z: uint, w: uint): uvec4

// vec of bool

#[import("spirv", "std", "vec")]
bvec2(bool): bvec2

#[import("spirv", "std", "vec")]
bvec2(x: bool, y: bool): bvec2

#[import("spirv", "std", "vec")]
bvec3(bool): bvec3

#[import("spirv", "std", "vec")]
bvec3(xy: vec2, z: bool): bvec3

#[import("spirv", "std", "vec")]
bvec3(x: bool, y: bool, z: bool): bvec3

#[import("spirv", "std", "vec")]
bvec4(bool): bvec4

#[import("spirv", "std", "vec")]
bvec4(xyz: bvec3, w: bool): bvec4

#[import("spirv", "std", "vec")]
bvec4(xy: bvec2, z: bool, w: bool): bvec4

#[import("spirv", "std", "vec")]
bvec4(x: bool, y: bool, z: bool, w: bool): bvec4

// Attributes

#[import("spirv", "std", "position")]
#[intrinsic("importer")]
struct positionAttribute = new()

#[import("spirv", "std", "point_size")]
#[intrinsic("importer")]
struct point_sizeAttribute = new()

#[import("spirv", "std", "block")]
#[intrinsic("importer")]
struct blockAttribute = new()

#[import("spirv", "std", "location")]
#[intrinsic("importer")]
struct locationAttribute = new(number: uint)

#[import("spirv", "std", "global_invocation_id")]
#[intrinsic("importer")]
struct global_invocation_idAttribute = new()

#[import("spirv", "std", "uniform")]
#[intrinsic("importer")]
struct uniformAttribute = new()

#[import("spirv", "std", "descriptor_set")]
#[intrinsic("importer")]
struct descriptor_setAttribute = new(uint)

#[import("spirv", "std", "binding")]
#[intrinsic("importer")]
struct bindingAttribute = new(uint32)

#[import("spirv", "std", "buffer_block")]
#[intrinsic("importer")]
struct buffer_blockAttribute = new()

#[import("spirv", "std", "storage_buffer")]
#[intrinsic("importer")]
struct storage_bufferAttribute = new()

// Operations

/*
#[intrinsic("unsafe_cast")]
int(uint): int

#[intrinsic("unsafe_cast")]
uint(int): uint
*/

#[intrinsic("address_of")]
(&)<T>(T): inref<T>

#[intrinsic("address_of")]
(&)<T>(T): byref<T>

#[intrinsic("equal")]
(==)(bool, bool): bool

#[intrinsic("equal")]
(==)(int, int): bool

#[intrinsic("equal")]
(==)(uint, uint): bool

#[intrinsic("equal")]
(==)(float, float): bool

#[intrinsic("get_element")]
(`[]`)<T>(T[], index: uint): T

#[intrinsic("get_element")]
(`[]`)<T>(mutable T[], index: uint): T

#[intrinsic("set_element")]
(`[]`)<T>(mutable T[], index: uint, T): ()

// BuiltIn

Position: vec4
    #[position]
    set

GlobalInvocationId: uvec3
    #[global_invocation_id]
    get

// GLSL.std.450
// https://registry.khronos.org/SPIR-V/specs/unified1/GLSL.std.450.html

#[import("spirv", "GLSL.std.450", "1")]
round<T>(T): T

#[import("spirv", "GLSL.std.450", "1")]
round<N, T>(vec<N, T>): vec<N, T> where N: constant int

#[import("spirv", "GLSL.std.450", "2")]
roundEven<T>(T): T

#[import("spirv", "GLSL.std.450", "2")]
roundEven<N, T>(vec<N, T>): vec<N, T> where N: constant int