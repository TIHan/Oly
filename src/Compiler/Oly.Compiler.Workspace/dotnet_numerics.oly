#[open]
module OlyNumerics

open System
open System.Numerics

alias vec2 = Vector2
alias vec3 = Vector3
alias vec4 = Vector4

/*
#[import("CLR:System.Numerics", "System.Numerics", "Vector2")]
struct vec2 =
    #[import("REMOVE_THIS", "", "X")]
    public field mutable x: float32
    #[import("REMOVE_THIS", "", "Y")]
    public field mutable y: float32
    new(float32)
    new(float32, float32)

    static Zero: vec2 get
    static One: vec2 get
    static UnitX: vec2 get
    static UnitY: vec2 get

#[import("CLR:System.Numerics", "System.Numerics", "Vector3")]
struct vec3 =
    #[import("REMOVE_THIS", "", "X")]
    public field mutable x: float32
    #[import("REMOVE_THIS", "", "Y")]
    public field mutable y: float32
    #[import("REMOVE_THIS", "", "Z")]
    public field mutable z: float32
    new(float32)
    new(vec2, float32)
    new(float32, float32, float32)

    static Zero: vec3 get
    static One: vec3 get
    static UnitX: vec3 get
    static UnitY: vec3 get
    static UnitZ: vec3 get
*/

(+)(v1: vec3, v2: vec3): vec3 = Vector3.Add(v1, v2)

(-)(v1: vec3, v2: vec3): vec3 = Vector3.Subtract(v1, v2)

(*)(v1: vec3, v2: vec3): vec3 = Vector3.Multiply(v1, v2)
(*)(v: vec3, s: float32): vec3 = Vector3.Multiply(v, s)

(-)(v: vec3): vec3 = Vector3.op_UnaryNegation(v)

/*
#[import("CLR:System.Numerics", "System.Numerics", "Vector4")]
struct vec4 =
    #[import("REMOVE_THIS", "", "X")]
    public field mutable x: float32
    #[import("REMOVE_THIS", "", "Y")]
    public field mutable y: float32
    #[import("REMOVE_THIS", "", "Z")]
    public field mutable z: float32
    #[import("REMOVE_THIS", "", "W")]
    public field mutable w: float32
    new(float32)
    new(vec3, float32)
    new(vec2, float32, float32)
    new(float32, float32, float32, float32)

    static Zero: vec4 get
    static One: vec4 get
    static UnitX: vec4 get
    static UnitY: vec4 get
    static UnitZ: vec4 get
    static UnitW: vec4 get
*/

alias quat = Quaternion

transform(v: vec3, rotation: quat): vec3 =
    Vector3.Transform(v, rotation)

//

round(x: float32): float32 =
    MathF.Round(x)

round(v: vec2): vec2 =
    vec2(round(v.x), round(v.y))

round(v: vec3): vec3 =
    vec3(round(v.x), round(v.y), round(v.z))

round(v: vec4): vec4 =
    vec4(round(v.x), round(v.y), round(v.z), round(v.w))

roundEven(x: float32): float32 =
    MathF.Round(x)

roundEven(v: vec2): vec2 =
    vec2(roundEven(v.x), roundEven(v.y))

roundEven(v: vec3): vec3 =
    vec3(roundEven(v.x), roundEven(v.y), roundEven(v.z))

roundEven(v: vec4): vec4 =
    vec4(roundEven(v.x), roundEven(v.y), roundEven(v.z), roundEven(v.w))

floor(x: float32): float32 =
    MathF.Floor(x)

floor(v: vec2): vec2 =
    vec2(floor(v.x), floor(v.y))

floor(v: vec3): vec3 =
    vec3(floor(v.x), floor(v.y), floor(v.z))

floor(v: vec4): vec4 =
    vec4(floor(v.x), floor(v.y), floor(v.z), floor(v.w))

normalize(v: vec2): vec2 =
    Vector2.Normalize(v)

normalize(v: vec3): vec3 =
    Vector3.Normalize(v)

normalize(v: vec4): vec4 =
    Vector4.Normalize(v)