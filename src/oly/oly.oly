namespace olycli

open System
open System.IO
open System.Threading
open System.ComponentModel
open Spectre.Console
open Spectre.Console.Cli
open Errata
open Oly.Core

#[export]
class BuildCommand =
    inherits Command<Settings>

    class Settings =
        inherits CommandSettings

        #[CommandOption("-c|--configuration")]
        #[DefaultValue("Debug")]
        Configuration: string get, set = "Debug"

        #[CommandArgument(0, "<project-file>")]
        ProjectFile: string get, set = String.Empty

    overrides Execute(context: CommandContext, settings: Settings): int32 =
        let mutable projectPath = OlyPath.Create(settings.ProjectFile)
        let mutable results = olylib.Oly.Build(settings.Configuration, projectPath, CancellationToken.None).Result
        if (results.IsOk)
            AnsiConsole.Markup("[green]Build Successful[/]")
            // TODO: Print warnings.
            0
        else
            let repo = InMemorySourceRepository()
            let report = Report(repo)
            let mutable diags = results.ErrorValue
            For(diags.Length,
                i ->
                    let diag = diags[i]
                    if (diag.IsError)
                        report.Diagnostics.Add(
                            DiagnosticExtensions.WithColor(
                                DiagnosticExtensions.WithLabel(
                                    DiagnosticExtensions.WithCode(
                                        Diagnostic.Error(diag.Message), "OLY" + diag.Code.ToString()
                                    ),
                                    Label(
                                        let path =
                                            if (diag.SyntaxTree === null)
                                                projectPath.ToString()
                                            else
                                                diag.SyntaxTree.Value.Path.ToString()
                                        repo.Register(path, File.ReadAllText(path))
                                        path,
                                        TextSpan(diag.TextSpan.Start, diag.TextSpan.End),
                                        ""
                                    )
                                ),
                                Color.Red
                            )
                        )
            )
            report.Render(AnsiConsole.Console, null)
            //AnsiConsole.Markup("[red]Build Failed[/]")
            1